// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'th2e.data';
    var REMOTE_PACKAGE_BASE = 'th2e.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'th2', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) err('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_th2e.data');

    };
    Module['addRunDependency']('datafile_th2e.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
// loadPackage({"files": [{"start": 0, "audio": 1, "end": 7612, "filename": "/2608_bd.wav"}, {"start": 7612, "audio": 1, "end": 14024, "filename": "/2608_hh.wav"}, {"start": 14024, "audio": 1, "end": 17004, "filename": "/2608_rim.wav"}, {"start": 17004, "audio": 1, "end": 23704, "filename": "/2608_sd.wav"}, {"start": 23704, "audio": 1, "end": 37748, "filename": "/2608_tom.wav"}, {"start": 37748, "audio": 1, "end": 95248, "filename": "/2608_top.wav"}, {"start": 95248, "audio": 0, "end": 95380, "filename": "/dosbox.conf"}, {"start": 95380, "audio": 0, "end": 384148, "filename": "/font.rom"}, {"start": 384148, "audio": 0, "end": 384924, "filename": "/th2/GAME.BAT"}, {"start": 384924, "audio": 0, "end": 385834, "filename": "/th2/HUUHI.DAT"}, {"start": 385834, "audio": 0, "end": 385842, "filename": "/th2/HUUMA.CFG"}, {"start": 385842, "audio": 0, "end": 520600, "filename": "/th2/MAIN.EXE"}, {"start": 520600, "audio": 0, "end": 579706, "filename": "/th2/MAINE.EXE"}, {"start": 579706, "audio": 0, "end": 586777, "filename": "/th2/MMD.COM"}, {"start": 586777, "audio": 0, "end": 599863, "filename": "/th2/OMAKE.TXT"}, {"start": 599863, "audio": 0, "end": 663599, "filename": "/th2/OP.EXE"}, {"start": 663599, "audio": 0, "end": 683978, "filename": "/th2/PMD.COM"}, {"start": 683978, "audio": 0, "end": 712761, "filename": "/th2/PMD86.COM"}, {"start": 712761, "audio": 0, "end": 738403, "filename": "/th2/PMDB2.COM"}, {"start": 738403, "audio": 0, "end": 1457346, "filename": "/th2/thhumaro.ku"}, {"start": 1457346, "audio": 0, "end": 1457472, "filename": "/th2/thx.bat"}, {"start": 1457472, "audio": 0, "end": 1465744, "filename": "/th2/TOUHOU.DAT"}, {"start": 1465744, "audio": 0, "end": 1485728, "filename": "/th2/ZUN.COM"}], "remote_package_size": 1485728, "package_uuid": "6fb22619-fbfd-4dc2-8337-5634c563e3fe"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)


// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    process['exit'](1);
  });

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WEB) {
    if (document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
  } else { // worker
    scriptDirectory = self.location.href;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}



var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state) {
    return new Promise(function(resolve) {
      EmterpreterAsync.restartFunc = func;
      EmterpreterAsync.asyncFinalizers.push(function(ret) {
        if (stack !== 0) stackRestore(stack);
        resolve(convertReturnValue(ret));
      });
    });
  }
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  // If this is an async ccall, ensure we return a promise
  if (opts && opts.async) return Promise.resolve(ret);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortStackOverflowEmterpreter() {
  abort("Emterpreter stack overflow! Decrease the recursion level or increase EMT_STACK_MAX in tools/emterpretify.py (current value " + EMT_STACK_MAX + ").");
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 104857600;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method is set at compile time (BINARYEN_METHOD)
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = 'native-wasm';

  var wasmTextFile = 'th2e.wast';
  var wasmBinaryFile = 'th2e.wasm';
  var asmjsCodeFile = 'th2e.temp.asm.js';

  if (!isDataURI(wasmTextFile)) {
    wasmTextFile = locateFile(wasmTextFile);
  }
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }
  if (!isDataURI(asmjsCodeFile)) {
    asmjsCodeFile = locateFile(asmjsCodeFile);
  }

  // utilities

  var wasmPageSize = 64*1024;

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': asm2wasmImports,
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;


  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      err('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);


    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  function fixImports(imports) {
    return imports;
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "both async and sync fetching of the wasm failed";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions


  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      err('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      err('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }
    addRunDependency('wasm-instantiate');

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        err('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    function receiveInstantiatedSource(output) {
      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      receiveInstance(output['instance'], output['module']);
    }
    function instantiateArrayBuffer(receiver) {
      getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver).catch(function(reason) {
        err('failed to asynchronously prepare wasm: ' + reason);
        abort(reason);
      });
    }
    // Prefer streaming instantiation if available.
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
        .then(receiveInstantiatedSource)
        .catch(function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          err('wasm streaming compile failed: ' + reason);
          err('falling back to ArrayBuffer instantiation');
          instantiateArrayBuffer(receiveInstantiatedSource);
        });
    } else {
      instantiateArrayBuffer(receiveInstantiatedSource);
    }
    return {}; // no exports yet; we'll fill them in later
  }


  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        return null;
      }
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    env = fixImports(env);

    // import table
    if (!env['table']) {
      var TABLE_SIZE = Module['wasmTableSize'];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['memoryBase']) {
      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['tableBase']) {
      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);

    assert(exports, 'no binaryen method succeeded.');


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [function() { return screen.width; },
 function() { return screen.height; },
 function($0) { if (typeof Module['setWindowTitle'] !== 'undefined') { Module['setWindowTitle'](Module['Pointer_stringify']($0)); } return 0; },
 function($0, $1, $2) { var w = $0; var h = $1; var pixels = $2; if (!Module['SDL2']) Module['SDL2'] = {}; var SDL2 = Module['SDL2']; if (SDL2.ctxCanvas !== Module['canvas']) { SDL2.ctx = Module['createContext'](Module['canvas'], false, true); SDL2.ctxCanvas = Module['canvas']; } if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) { SDL2.image = SDL2.ctx.createImageData(w, h); SDL2.w = w; SDL2.h = h; SDL2.imageCtx = SDL2.ctx; } var data = SDL2.image.data; var src = pixels >> 2; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = 0xff; src++; dst += 4; } } else { if (SDL2.data32Data !== data) { SDL2.data32 = new Int32Array(data.buffer); SDL2.data8 = new Uint8Array(data.buffer); } var data32 = SDL2.data32; num = data32.length; data32.set(HEAP32.subarray(src, src + num)); var data8 = SDL2.data8; var i = 3; var j = i + 4*num; if (num % 8 == 0) { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; } } else { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; } } } SDL2.ctx.putImageData(SDL2.image, 0, 0); return 0; },
 function($0, $1, $2, $3, $4) { var w = $0; var h = $1; var hot_x = $2; var hot_y = $3; var pixels = $4; var canvas = document.createElement("canvas"); canvas.width = w; canvas.height = h; var ctx = canvas.getContext("2d"); var image = ctx.createImageData(w, h); var data = image.data; var src = pixels >> 2; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = (val >> 24) & 0xff; src++; dst += 4; } } else { var data32 = new Int32Array(data.buffer); num = data32.length; data32.set(HEAP32.subarray(src, src + num)); } ctx.putImageData(image, 0, 0); var url = hot_x === 0 && hot_y === 0 ? "url(" + canvas.toDataURL() + "), auto" : "url(" + canvas.toDataURL() + ") " + hot_x + " " + hot_y + ", auto"; var urlBuf = _malloc(url.length + 1); stringToUTF8(url, urlBuf, url.length + 1); return urlBuf; },
 function($0) { if (Module['canvas']) { Module['canvas'].style['cursor'] = Module['Pointer_stringify']($0); } return 0; },
 function() { if (Module['canvas']) { Module['canvas'].style['cursor'] = 'none'; } },
 function() { if (typeof(AudioContext) !== 'undefined') { return 1; } else if (typeof(webkitAudioContext) !== 'undefined') { return 1; } return 0; },
 function() { if ((typeof(navigator.mediaDevices) !== 'undefined') && (typeof(navigator.mediaDevices.getUserMedia) !== 'undefined')) { return 1; } else if (typeof(navigator.webkitGetUserMedia) !== 'undefined') { return 1; } return 0; },
 function($0) { if(typeof(SDL2) === 'undefined') { SDL2 = {}; } if (!$0) { SDL2.audio = {}; } else { SDL2.capture = {}; } if (!SDL2.audioContext) { if (typeof(AudioContext) !== 'undefined') { SDL2.audioContext = new AudioContext(); } else if (typeof(webkitAudioContext) !== 'undefined') { SDL2.audioContext = new webkitAudioContext(); } } return SDL2.audioContext === undefined ? -1 : 0; },
 function() { return SDL2.audioContext.sampleRate; },
 function($0, $1, $2, $3) { var have_microphone = function(stream) { if (SDL2.capture.silenceTimer !== undefined) { clearTimeout(SDL2.capture.silenceTimer); SDL2.capture.silenceTimer = undefined; } SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream); SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1); SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) { if ((SDL2 === undefined) || (SDL2.capture === undefined)) { return; } audioProcessingEvent.outputBuffer.getChannelData(0).fill(0.0); SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer; Runtime.dynCall('vi', $2, [$3]); }; SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode); SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination); SDL2.capture.stream = stream; }; var no_microphone = function(error) { }; SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate); SDL2.capture.silenceBuffer.getChannelData(0).fill(0.0); var silence_callback = function() { SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer; Runtime.dynCall('vi', $2, [$3]); }; SDL2.capture.silenceTimer = setTimeout(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1000); if ((navigator.mediaDevices !== undefined) && (navigator.mediaDevices.getUserMedia !== undefined)) { navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(have_microphone).catch(no_microphone); } else if (navigator.webkitGetUserMedia !== undefined) { navigator.webkitGetUserMedia({ audio: true, video: false }, have_microphone, no_microphone); } },
 function($0, $1, $2, $3) { SDL2.audio.scriptProcessorNode = SDL2.audioContext['createScriptProcessor']($1, 0, $0); SDL2.audio.scriptProcessorNode['onaudioprocess'] = function (e) { if ((SDL2 === undefined) || (SDL2.audio === undefined)) { return; } SDL2.audio.currentOutputBuffer = e['outputBuffer']; Runtime.dynCall('vi', $2, [$3]); }; SDL2.audio.scriptProcessorNode['connect'](SDL2.audioContext['destination']); },
 function($0) { if ($0) { if (SDL2.capture.silenceTimer !== undefined) { clearTimeout(SDL2.capture.silenceTimer); } if (SDL2.capture.stream !== undefined) { var tracks = SDL2.capture.stream.getAudioTracks(); for (var i = 0; i < tracks.length; i++) { SDL2.capture.stream.removeTrack(tracks[i]); } SDL2.capture.stream = undefined; } if (SDL2.capture.scriptProcessorNode !== undefined) { SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {}; SDL2.capture.scriptProcessorNode.disconnect(); SDL2.capture.scriptProcessorNode = undefined; } if (SDL2.capture.mediaStreamNode !== undefined) { SDL2.capture.mediaStreamNode.disconnect(); SDL2.capture.mediaStreamNode = undefined; } if (SDL2.capture.silenceBuffer !== undefined) { SDL2.capture.silenceBuffer = undefined } SDL2.capture = undefined; } else { if (SDL2.audio.scriptProcessorNode != undefined) { SDL2.audio.scriptProcessorNode.disconnect(); SDL2.audio.scriptProcessorNode = undefined; } SDL2.audio = undefined; } if ((SDL2.audioContext !== undefined) && (SDL2.audio === undefined) && (SDL2.capture === undefined)) { SDL2.audioContext.close(); SDL2.audioContext = undefined; } },
 function($0, $1) { var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c); if (channelData.length != $1) { throw 'Web Audio capture buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } if (numChannels == 1) { for (var j = 0; j < $1; ++j) { setValue($0 + (j * 4), channelData[j], 'float'); } } else { for (var j = 0; j < $1; ++j) { setValue($0 + (((j * numChannels) + c) * 4), channelData[j], 'float'); } } } },
 function($0, $1) { var numChannels = SDL2.audio.currentOutputBuffer['numberOfChannels']; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.audio.currentOutputBuffer['getChannelData'](c); if (channelData.length != $1) { throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } for (var j = 0; j < $1; ++j) { channelData[j] = HEAPF32[$0 + ((j*numChannels + c) << 2) >> 2]; } } },
 function($0) { var str = Pointer_stringify($0) + '\n\n' + 'Abort/Retry/Ignore/AlwaysIgnore? [ariA] :'; var reply = window.prompt(str, "i"); if (reply === null) { reply = "i"; } return allocate(intArrayFromString(reply), 'i8', ALLOC_NORMAL); }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 37085408;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_dos_devices_cpp() } }, { func: function() { __GLOBAL__sub_I_drives_cpp() } }, { func: function() { __GLOBAL__sub_I_programs_cpp() } }, { func: function() { __GLOBAL__sub_I_sdl_mapper_cpp() } }, { func: function() { __GLOBAL__sub_I_menu_cpp() } }, { func: function() { __GLOBAL__sub_I_gus_cpp() } }, { func: function() { __GLOBAL__sub_I_cpu_cpp() } }, { func: function() { ___emscripten_environ_constructor() } });







var STATIC_BUMP = 37085408;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(207192);
//assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,2,148,9,0,0,0,0,2,200,0,0,255,0,0,0,2,201,0,0,240,0,0,0,2,202,0,0,176,3,0,0,1,203,0,0,143,203,144,9,136,204,0,0,0,203,204,0,143,203,145,9,136,203,0,0,1,204,240,4,3,203,203,204,137,203,0,0,141,203,145,9,1,204,228,4,1,205,0,0,97,203,204,205,141,205,145,9,1,204,224,4,1,203,0,0,97,205,204,203,141,203,145,9,1,204,220,4,1,205,0,0,97,203,204,205,141,205,145,9,1,204,216,4,1,203,0,0,97,205,204,203,141,204,145,9,1,205,248,3,3,204,204,205,1,205,3,0,135,203,0,0,204,0,1,205,141,205,145,9,1,204,112,1,3,205,205,204,141,204,145,9,1,206,248,3,3,204,204,206,135,203,1,0,205,204,0,0,2,204,0,0,0,18,71,0,1,205,0,0,1,206,200,64,135,203,2,0,204,205,206,0,2,203,0,0,40,156,79,0,141,206,145,9,1,205,112,1,3,206,206,205,85,203,206,0,141,206,145,9,1,203,236,3,1,205,0,0,97,206,203,205,141,205,145,9,1,203,236,3,3,205,205,203,1,203,0,0,109,205,4,203,141,203,145,9,1,205,236,3,3,203,203,205,1,205,0,0,109,203,8,205,141,205,145,9,1,203,224,3,1,206,0,0,97,205,203,206,141,206,145,9,1,203,224,3,3,206,206,203,1,203,0,0,109,206,4,203,141,203,145,9,1,206,224,3,3,203,203,206,1,206,0,0,109,203,8,206,135,206,3,0,143,206,117,4,141,206,117,4,124,206,0,0,212,185,1,0,2,203,0,0,40,156,79,0,82,206,203,0,143,206,159,4,141,203,159,4,110,206,203,64,144,206,0,5,142,206,0,5,59,203,0,0,73,206,206,203,121,206,8,0,2,206,0,0,36,195,79,0,142,203,0,5,59,205,232,3,65,203,203,205,75,203,203,0,85,206,203,0,141,206,159,4,1,205,158,0,90,203,206,205,143,203,224,5,141,203,224,5,41,203,203,24,42,203,203,24,32,203,203,0,124,203,0,0,252,182,1,0,141,206,159,4,1,205,159,0,90,203,206,205,143,203,104,6,141,203,104,6,41,203,203,24,42,203,203,24,32,203,203,0,124,203,0,0,252,182,1,0,141,206,159,4,1,205,160,0,90,203,206,205,143,203,181,8,141,203,181,8,41,203,203,24,42,203,203,24,32,203,203,0,120,203,253,0,141,203,145,9,1,206,52,4,1,205,0,0,97,203,206,205,141,205,145,9,1,206,52,4,3,205,205,206,1,206,0,0,109,205,4,206,141,206,145,9,1,205,52,4,3,206,206,205,1,205,0,0,109,206,8,205,141,205,145,9,1,206,40,4,1,203,0,0,97,205,206,203,141,203,145,9,1,206,40,4,3,203,203,206,1,206,0,0,109,203,4,206,141,206,145,9,1,203,40,4,3,206,206,203,1,203,0,0,109,206,8,203,141,206,145,9,1,205,52,4,3,206,206,205,135,203,4,0,206,0,0,0,141,206,145,9,1,205,40,4,3,206,206,205,135,203,5,0,206,0,0,0,141,206,145,9,1,205,40,4,3,206,206,205,102,203,206,11,143,203,194,8,141,206,145,9,1,205,40,4,94,203,206,205,143,203,208,8,141,206,145,9,1,205,40,4,3,206,206,205,106,203,206,4,143,203,221,8,141,205,194,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,208,8,0,206,205,0,119,0,5,0,141,205,145,9,1,204,40,4,3,205,205,204,0,206,205,0,0,203,206,0,143,203,236,8,141,205,194,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,221,8,0,206,205,0,119,0,4,0,141,205,194,8,19,205,205,200,0,206,205,0,0,203,206,0,143,203,241,8,141,206,145,9,1,205,52,4,3,206,206,205,141,205,236,8,141,204,241,8,135,203,6,0,206,205,204,0,141,204,145,9,1,205,52,4,3,204,204,205,25,203,204,11,143,203,249,8,141,204,249,8,78,203,204,0,143,203,255,8,141,204,145,9,1,205,52,4,94,203,204,205,143,203,6,9,141,205,255,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,6,9,0,204,205,0,119,0,5,0,141,205,145,9,1,206,52,4,3,205,205,206,0,204,205,0,0,203,204,0,143,203,13,9,141,204,13,9,2,205,0,0,238,116,22,0,135,203,7,0,204,205,0,0,143,203,18,9,141,203,18,9,1,205,0,0,52,203,203,205,148,4,0,0,141,205,18,9,135,203,8,0,205,0,0,0,141,205,249,8,78,203,205,0,143,203,78,9,141,205,78,9,41,205,205,24,42,205,205,24,34,203,205,0,143,203,84,9,141,205,145,9,1,204,52,4,94,203,205,204,143,203,89,9,141,204,84,9,121,204,4,0,141,204,89,9,0,205,204,0,119,0,5,0,141,204,145,9,1,206,52,4,3,204,204,206,0,205,204,0,0,203,205,0,143,203,94,9,141,205,94,9,135,203,9,0,205,0,0,0,1,205,0,0,135,203,10,0,205,0,0,0,2,205,0,0,40,156,79,0,82,203,205,0,143,203,28,9,141,205,249,8,78,203,205,0,143,203,34,9,141,205,145,9,1,204,52,4,94,203,205,204,143,203,42,9,141,204,34,9,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,42,9,0,205,204,0,119,0,5,0,141,204,145,9,1,206,52,4,3,204,204,206,0,205,204,0,0,203,205,0,143,203,48,9,141,205,28,9,141,204,48,9,1,206,0,0,135,203,11,0,205,204,206,0,143,203,53,9,141,203,53,9,121,203,31,0,141,206,249,8,78,203,206,0,143,203,78,9,141,206,78,9,41,206,206,24,42,206,206,24,34,203,206,0,143,203,84,9,141,206,145,9,1,204,52,4,94,203,206,204,143,203,89,9,141,204,84,9,121,204,4,0,141,204,89,9,0,206,204,0,119,0,5,0,141,204,145,9,1,205,52,4,3,204,204,205,0,206,204,0,0,203,206,0,143,203,94,9,141,206,94,9,135,203,9,0,206,0,0,0,1,206,0,0,135,203,10,0,206,0,0,0,119,0,36,0,141,206,249,8,78,203,206,0,143,203,58,9,141,206,145,9,1,204,52,4,94,203,206,204,143,203,69,9,141,204,58,9,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,69,9,0,206,204,0,119,0,5,0,141,204,145,9,1,205,52,4,3,204,204,205,0,206,204,0,0,203,206,0,143,203,73,9,141,203,145,9,1,206,40,2,141,204,73,9,97,203,206,204,2,206,0,0,61,54,21,0,141,203,145,9,1,205,40,2,3,203,203,205,135,204,12,0,206,203,0,0,1,203,1,0,135,204,10,0,203,0,0,0,141,203,159,4,1,206,149,0,90,204,203,206,143,204,105,9,141,204,105,9,41,204,204,24,42,204,204,24,32,204,204,0,124,204,0,0,160,180,1,0,141,203,159,4,1,206,150,0,90,204,203,206,143,204,118,9,141,204,118,9,41,204,204,24,42,204,204,24,32,204,204,0,124,204,0,0,160,180,1,0,135,204,13,0,135,204,14,0,135,204,15,0,135,204,16,0,141,203,145,9,1,206,224,3,3,203,203,206,135,204,17,0,203,0,0,0,2,203,0,0,40,156,79,0,82,204,203,0,143,204,11,2,141,203,11,2,1,206,161,0,90,204,203,206,143,204,25,2,141,204,25,2,41,204,204,24,42,204,204,24,32,204,204,0,120,204,160,1,141,203,145,9,1,206,236,3,3,203,203,206,25,204,203,11,143,204,39,2,141,203,39,2,78,204,203,0,143,204,46,2,141,204,46,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,14,0,141,203,145,9,1,206,236,3,94,204,203,206,143,204,58,2,141,204,58,2,1,203,0,0,83,204,203,0,141,203,145,9,1,204,236,3,3,203,203,204,1,204,0,0,109,203,4,204,119,0,8,0,141,204,145,9,1,203,236,3,1,206,0,0,95,204,203,206,141,206,39,2,1,203,0,0,83,206,203,0,141,206,145,9,1,204,224,3,3,206,206,204,135,203,17,0,206,0,0,0,141,206,145,9,1,204,236,3,3,206,206,204,135,203,5,0,206,0,0,0,141,206,39,2,78,203,206,0,143,203,68,2,141,206,145,9,1,204,236,3,94,203,206,204,143,203,75,2,141,206,145,9,1,204,236,3,3,206,206,204,106,203,206,4,143,203,87,2,141,204,68,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,75,2,0,206,204,0,119,0,5,0,141,204,145,9,1,205,236,3,3,204,204,205,0,206,204,0,0,203,206,0,143,203,93,2,141,204,68,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,87,2,0,206,204,0,119,0,4,0,141,204,68,2,19,204,204,200,0,206,204,0,0,203,206,0,143,203,97,2,141,206,145,9,1,204,224,3,3,206,206,204,141,204,93,2,141,205,97,2,135,203,6,0,206,204,205,0,141,203,145,9,1,205,208,4,1,204,21,0,97,203,205,204,141,204,145,9,1,205,208,4,3,204,204,205,1,205,0,0,109,204,4,205,141,204,145,9,1,203,224,3,3,204,204,203,25,205,204,11,143,205,109,2,141,204,109,2,78,205,204,0,143,205,111,2,141,204,145,9,1,203,224,3,94,205,204,203,143,205,121,2,141,203,111,2,41,203,203,24,42,203,203,24,34,203,203,0,121,203,4,0,141,203,121,2,0,204,203,0,119,0,5,0,141,203,145,9,1,206,224,3,3,203,203,206,0,204,203,0,0,205,204,0,143,205,127,2,141,205,145,9,1,204,56,2,141,203,127,2,97,205,204,203,141,204,145,9,1,205,208,4,3,204,204,205,2,205,0,0,253,54,21,0,141,206,145,9,1,207,56,2,3,206,206,207,135,203,18,0,204,205,206,0,2,206,0,0,40,156,79,0,82,203,206,0,143,203,131,2,141,206,109,2,78,203,206,0,143,203,134,2,141,206,145,9,1,205,224,3,94,203,206,205,143,203,145,2,141,205,134,2,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,145,2,0,206,205,0,119,0,5,0,141,205,145,9,1,204,224,3,3,205,205,204,0,206,205,0,0,203,206,0,143,203,150,2,141,206,131,2,141,205,150,2,135,203,19,0,206,205,0,0,2,205,0,0,40,156,79,0,82,203,205,0,143,203,153,2,141,205,153,2,106,203,205,52,143,203,168,2,141,205,153,2,106,203,205,48,143,203,172,2,141,203,168,2,141,205,172,2,45,203,203,205,64,13,0,0,141,205,39,2,78,203,205,0,143,203,182,2,141,203,182,2,41,203,203,24,42,203,203,24,34,203,203,0,121,203,14,0,141,205,145,9,1,206,236,3,94,203,205,206,143,203,191,2,141,203,191,2,1,205,0,0,83,203,205,0,141,205,145,9,1,203,236,3,3,205,205,203,1,203,0,0,109,205,4,203,119,0,8,0,141,203,145,9,1,205,236,3,1,206,0,0,95,203,205,206,141,206,39,2,1,205,0,0,83,206,205,0,141,206,145,9,1,203,224,3,3,206,206,203,135,205,4,0,206,0,0,0,141,206,145,9,1,203,236,3,3,206,206,203,135,205,5,0,206,0,0,0,141,206,39,2,78,205,206,0,143,205,197,2,141,206,145,9,1,203,236,3,94,205,206,203,143,205,207,2,141,206,145,9,1,203,236,3,3,206,206,203,106,205,206,4,143,205,209,2,141,203,197,2,41,203,203,24,42,203,203,24,34,203,203,0,121,203,4,0,141,203,207,2,0,206,203,0,119,0,5,0,141,203,145,9,1,204,236,3,3,203,203,204,0,206,203,0,0,205,206,0,143,205,218,2,141,203,197,2,41,203,203,24,42,203,203,24,34,203,203,0,121,203,4,0,141,203,209,2,0,206,203,0,119,0,4,0,141,203,197,2,19,203,203,200,0,206,203,0,0,205,206,0,143,205,224,2,141,206,145,9,1,203,224,3,3,206,206,203,141,203,218,2,141,204,224,2,135,205,6,0,206,203,204,0,141,205,145,9,1,204,200,4,1,203,21,0,97,205,204,203,141,203,145,9,1,204,200,4,3,203,203,204,1,204,0,0,109,203,4,204,141,203,109,2,78,204,203,0,143,204,232,2,141,203,145,9,1,205,224,3,94,204,203,205,143,204,239,2,141,205,232,2,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,239,2,0,203,205,0,119,0,5,0,141,205,145,9,1,206,224,3,3,205,205,206,0,203,205,0,0,204,203,0,143,204,243,2,141,204,145,9,1,203,64,2,141,205,243,2,97,204,203,205,141,203,145,9,1,204,200,4,3,203,203,204,2,204,0,0,48,55,21,0,141,206,145,9,1,207,64,2,3,206,206,207,135,205,18,0,203,204,206,0,2,206,0,0,40,156,79,0,82,205,206,0,143,205,251,2,141,206,109,2,78,205,206,0,143,205,1,3,141,206,145,9,1,204,224,3,94,205,206,204,143,205,12,3,141,204,1,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,12,3,0,206,204,0,119,0,5,0,141,204,145,9,1,203,224,3,3,204,204,203,0,206,204,0,0,205,206,0,143,205,16,3,141,206,251,2,141,204,16,3,1,203,0,0,135,205,11,0,206,204,203,0,143,205,22,3,141,205,22,3,121,205,74,0,141,205,145,9,1,203,192,4,1,204,21,0,97,205,203,204,141,204,145,9,1,203,192,4,3,204,204,203,1,203,1,0,109,204,4,203,141,204,109,2,78,203,204,0,143,203,32,3,141,204,145,9,1,205,224,3,94,203,204,205,143,203,41,3,141,205,32,3,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,41,3,0,204,205,0,119,0,5,0,141,205,145,9,1,206,224,3,3,205,205,206,0,204,205,0,0,203,204,0,143,203,46,3,141,203,145,9,1,204,72,2,141,205,46,3,97,203,204,205,141,204,145,9,1,203,192,4,3,204,204,203,2,203,0,0,110,55,21,0,141,206,145,9,1,207,72,2,3,206,206,207,135,205,18,0,204,203,206,0,2,206,0,0,40,156,79,0,82,205,206,0,143,205,49,3,141,206,109,2,78,205,206,0,143,205,54,3,141,206,145,9,1,203,224,3,94,205,206,203,143,205,65,3,141,203,54,3,41,203,203,24,42,203,203,24,34,203,203,0,121,203,4,0,141,203,65,3,0,206,203,0,119,0,5,0,141,203,145,9,1,204,224,3,3,203,203,204,0,206,203,0,0,205,206,0,143,205,70,3,141,206,49,3,141,203,70,3,135,205,19,0,206,203,0,0,2,203,0,0,40,156,79,0,82,205,203,0,143,205,77,3,141,203,77,3,106,205,203,124,143,205,93,3,141,203,77,3,106,205,203,120,143,205,97,3,141,205,93,3,141,203,97,3,45,205,205,203,136,13,0,0,141,203,77,3,0,205,203,0,143,205,50,1,119,0,131,0,1,205,0,0,143,205,45,1,141,203,77,3,0,205,203,0,143,205,140,3,141,203,140,3,25,205,203,120,143,205,135,3,141,203,135,3,82,205,203,0,143,205,146,3,141,203,146,3,141,206,45,1,27,206,206,12,3,205,203,206,143,205,152,3,141,206,152,3,102,205,206,11,143,205,161,3,141,205,161,3,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,206,152,3,82,205,206,0,143,205,171,3,141,206,171,3,0,205,206,0,143,205,175,3,119,0,4,0,141,206,152,3,0,205,206,0,143,205,175,3,141,206,140,3,141,203,175,3,135,205,19,0,206,203,0,0,143,205,180,3,141,205,180,3,120,205,58,0,2,203,0,0,40,156,79,0,82,205,203,0,143,205,186,3,141,203,145,9,1,206,180,4,3,203,203,206,141,206,145,9,1,204,224,3,3,206,206,204,141,204,152,3,135,205,20,0,203,206,204,0,141,204,145,9,1,206,180,4,3,204,204,206,102,205,204,11,143,205,192,3,141,204,145,9,1,206,180,4,94,205,204,206,143,205,198,3,141,206,192,3,41,206,206,24,42,206,206,24,34,206,206,0,121,206,4,0,141,206,198,3,0,204,206,0,119,0,5,0,141,206,145,9,1,203,180,4,3,206,206,203,0,204,206,0,0,205,204,0,143,205,203,3,141,204,186,3,141,206,203,3,135,205,19,0,204,206,0,0,141,206,145,9,1,204,180,4,3,206,206,204,102,205,206,11,143,205,209,3,141,205,209,3,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,206,145,9,1,204,180,4,94,205,206,204,143,205,217,3,141,206,217,3,135,205,21,0,206,0,0,0,141,206,45,1,25,205,206,1,143,205,222,3,2,206,0,0,40,156,79,0,82,205,206,0,143,205,229,3,141,206,229,3,106,205,206,124,143,205,242,3,141,206,229,3,106,205,206,120,143,205,248,3,141,205,222,3,141,206,242,3,141,204,248,3,4,206,206,204,28,206,206,12,38,206,206,255,48,205,205,206,128,15,0,0,141,206,222,3,0,205,206,0,143,205,45,1,141,206,229,3,0,205,206,0,143,205,140,3,119,0,136,255,141,206,229,3,0,205,206,0,143,205,50,1,119,0,1,0,141,206,50,1,25,205,206,48,143,205,111,3,141,206,50,1,25,205,206,52,143,205,116,3,141,206,116,3,82,205,206,0,143,205,122,3,141,206,111,3,82,205,206,0,143,205,127,3,141,205,122,3,141,206,127,3,45,205,205,206,40,16,0,0,141,206,50,1,2,204,0,0,180,53,21,0,135,205,19,0,206,204,0,0,2,204,0,0,40,156,79,0,82,205,204,0,143,205,141,1,141,204,141,1,106,205,204,52,143,205,142,1,141,204,141,1,106,205,204,48,143,205,143,1,141,204,142,1,0,205,204,0,143,205,8,4,141,204,143,1,0,205,204,0,143,205,19,4,119,0,7,0,141,204,122,3,0,205,204,0,143,205,8,4,141,204,127,3,0,205,204,0,143,205,19,4,141,204,8,4,141,206,19,4,13,205,204,206,143,205,15,4,141,205,15,4,121,205,97,0,141,206,145,9,1,204,236,3,3,206,206,204,102,205,206,11,143,205,26,4,141,205,26,4,41,205,205,24,42,205,205,24,34,205,205,0,121,205,14,0,141,206,145,9,1,204,236,3,94,205,206,204,143,205,38,4,141,205,38,4,1,206,0,0,83,205,206,0,141,206,145,9,1,205,236,3,3,206,206,205,1,205,0,0,109,206,4,205,119,0,10,0,141,205,145,9,1,206,236,3,1,204,0,0,95,205,206,204,141,204,145,9,1,206,236,3,3,204,204,206,1,206,0,0,107,204,11,206,141,204,145,9,1,205,236,3,3,204,204,205,135,206,5,0,204,0,0,0,2,204,0,0,40,156,79,0,82,206,204,0,143,206,46,4,141,204,145,9,1,205,168,4,3,204,204,205,141,205,145,9,1,203,224,3,3,205,205,203,141,203,145,9,1,207,236,3,3,203,203,207,135,206,20,0,204,205,203,0,141,203,145,9,1,205,168,4,3,203,203,205,102,206,203,11,143,206,57,4,141,203,145,9,1,205,168,4,94,206,203,205,143,206,64,4,141,205,57,4,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,64,4,0,203,205,0,119,0,5,0,141,205,145,9,1,204,168,4,3,205,205,204,0,203,205,0,0,206,203,0,143,206,71,4,141,203,46,4,141,205,71,4,135,206,19,0,203,205,0,0,141,205,145,9,1,203,168,4,3,205,205,203,102,206,205,11,143,206,76,4,141,206,76,4,41,206,206,24,42,206,206,24,34,206,206,0,121,206,8,0,141,205,145,9,1,203,168,4,94,206,205,203,143,206,82,4,141,205,82,4,135,206,21,0,205,0,0,0,2,205,0,0,40,156,79,0,82,206,205,0,143,206,88,4,2,205,0,0,172,156,53,2,82,206,205,0,143,206,94,4,141,205,88,4,141,203,94,4,135,206,22,0,205,203,0,0,135,206,23,0,141,206,145,9,1,203,80,2,2,205,0,0,41,26,21,0,97,206,203,205,2,203,0,0,161,55,21,0,141,206,145,9,1,204,80,2,3,206,206,204,135,205,24,0,203,206,0,0,141,205,145,9,1,206,160,4,1,203,21,0,97,205,206,203,141,203,145,9,1,206,160,4,3,203,203,206,1,206,1,0,109,203,4,206,141,203,145,9,1,205,160,4,3,203,203,205,2,205,0,0,181,55,21,0,141,204,145,9,1,207,96,2,3,204,204,207,135,206,18,0,203,205,204,0,2,204,0,0,40,156,79,0,82,206,204,0,143,206,102,4,141,206,145,9,1,204,96,2,1,205,0,0,97,206,204,205,141,205,145,9,1,204,96,2,3,205,205,204,1,204,0,0,109,205,4,204,141,204,145,9,1,205,96,2,3,204,204,205,1,205,0,0,109,204,8,205,141,205,145,9,1,204,96,2,3,205,205,204,1,204,6,0,107,205,11,204,141,204,145,9,1,205,96,2,2,206,0,0,115,24,22,0,78,206,206,0,95,204,205,206,141,206,145,9,1,205,96,2,3,206,206,205,2,205,0,0,115,24,22,0,102,205,205,1,107,206,1,205,141,205,145,9,1,206,96,2,3,205,205,206,2,206,0,0,115,24,22,0,102,206,206,2,107,205,2,206,141,206,145,9,1,205,96,2,3,206,206,205,2,205,0,0,115,24,22,0,102,205,205,3,107,206,3,205,141,205,145,9,1,206,96,2,3,205,205,206,2,206,0,0,115,24,22,0,102,206,206,4,107,205,4,206,141,206,145,9,1,205,96,2,3,206,206,205,2,205,0,0,115,24,22,0,102,205,205,5,107,206,5,205,141,205,145,9,1,206,96,2,3,205,205,206,1,206,0,0,107,205,6,206,141,205,102,4,141,204,145,9,1,203,96,2,3,204,204,203,135,206,25,0,205,204,0,0,143,206,118,4,141,204,145,9,1,205,96,2,3,204,204,205,102,206,204,11,143,206,122,4,141,206,122,4,41,206,206,24,42,206,206,24,34,206,206,0,121,206,8,0,141,204,145,9,1,205,96,2,94,206,204,205,143,206,130,4,141,204,130,4,135,206,21,0,204,0,0,0,141,206,145,9,1,204,96,2,1,205,0,0,97,206,204,205,141,205,145,9,1,204,96,2,3,205,205,204,1,204,0,0,109,205,4,204,141,204,145,9,1,205,96,2,3,204,204,205,1,205,0,0,109,204,8,205,1,204,32,0,135,205,26,0,204,0,0,0,143,205,136,4,141,205,145,9,1,204,96,2,141,206,136,4,97,205,204,206,141,206,145,9,1,204,96,2,3,206,206,204,2,204,0,0,32,0,0,128,109,206,8,204,141,204,145,9,1,206,96,2,3,204,204,206,1,206,18,0,109,204,4,206,141,204,136,4,0,206,204,0,143,206,143,9,2,206,0,0,59,56,21,0,143,206,146,9,141,204,143,9,25,206,204,18,143,206,147,9,141,206,143,9,141,204,146,9,78,204,204,0,83,206,204,0,141,206,143,9,25,204,206,1,143,204,143,9,141,206,146,9,25,204,206,1,143,204,146,9,141,204,143,9,141,206,147,9,54,204,204,206,164,20,0,0,141,204,136,4,1,206,0,0,107,204,18,206,141,204,118,4,141,205,145,9,1,203,96,2,3,205,205,203,135,206,27,0,204,205,0,0,143,206,151,4,2,206,0,0,132,170,18,0,141,205,151,4,38,205,205,1,83,206,205,0,141,206,145,9,1,204,96,2,3,206,206,204,102,205,206,11,143,205,163,4,141,205,163,4,41,205,205,24,42,205,205,24,34,205,205,0,121,205,16,0,141,206,145,9,1,204,96,2,94,205,206,204,143,205,171,4,141,206,171,4,135,205,21,0,206,0,0,0,2,206,0,0,132,170,18,0,78,205,206,0,143,205,51,1,141,206,51,1,0,205,206,0,143,205,178,4,119,0,5,0,141,206,151,4,38,206,206,1,0,205,206,0,143,205,178,4,141,206,178,4,41,206,206,24,42,206,206,24,32,205,206,0,143,205,184,4,141,205,184,4,121,205,8,0,2,206,0,0,78,56,21,0,141,204,145,9,1,203,112,2,3,204,204,203,135,205,24,0,206,204,0,0,2,204,0,0,117,56,21,0,135,205,28,0,204,0,0,0,141,205,145,9,1,204,152,4,1,206,20,0,97,205,204,206,141,206,145,9,1,204,152,4,3,206,206,204,1,204,0,0,109,206,4,204,141,206,145,9,1,205,152,4,3,206,206,205,2,205,0,0,141,56,21,0,141,203,145,9,1,207,120,2,3,203,203,207,135,204,18,0,206,205,203,0,2,204,0,0,194,82,71,0,1,203,1,0,83,204,203,0,2,204,0,0,49,0,16,0,135,203,29,0,204,0,0,0,143,203,195,4,1,203,255,255,141,204,195,4,54,203,203,204,136,22,0,0,135,203,30,0,143,203,228,4,141,203,145,9,1,204,136,2,141,205,228,4,97,203,204,205,2,204,0,0,182,56,21,0,141,203,145,9,1,206,136,2,3,203,203,206,135,205,31,0,204,203,0,0,2,205,0,0,0,18,71,0,1,203,1,0,83,205,203,0,2,205,0,0,40,156,79,0,82,203,205,0,143,203,204,4,141,205,204,4,1,204,167,0,90,203,205,204,143,203,214,4,141,203,214,4,39,203,203,0,41,203,203,24,42,203,203,24,32,203,203,0,120,203,5,0,2,203,0,0,214,224,53,2,1,205,0,0,83,203,205,0,141,205,145,9,1,203,144,4,1,204,20,0,97,205,203,204,141,204,145,9,1,203,144,4,3,204,204,203,1,203,1,0,109,204,4,203,141,204,145,9,1,205,144,4,3,204,204,205,2,205,0,0,200,56,21,0,141,206,145,9,135,203,18,0,204,205,206,0,135,203,32,0,143,203,236,4,141,203,145,9,1,206,220,4,141,205,236,4,97,203,206,205,141,205,236,4,1,206,0,0,1,203,4,0,138,205,206,203,112,23,0,0,132,23,0,0,152,23,0,0,172,23,0,0,2,4,0,0,210,224,53,2,2,6,0,0,210,224,53,2,119,0,21,0,2,4,0,0,153,25,21,0,2,6,0,0,117,25,21,0,119,0,16,0,2,4,0,0,146,25,21,0,2,6,0,0,113,25,21,0,119,0,11,0,2,4,0,0,129,25,21,0,2,6,0,0,104,25,21,0,119,0,6,0,2,4,0,0,120,25,21,0,2,6,0,0,100,25,21,0,119,0,1,0,141,205,145,9,1,206,144,2,97,205,206,6,141,206,145,9,1,205,144,2,3,206,206,205,109,206,4,4,2,205,0,0,164,25,21,0,141,203,145,9,1,204,144,2,3,203,203,204,135,206,24,0,205,203,0,0,141,203,145,9,1,205,220,4,94,206,203,205,143,206,241,4,141,206,145,9,1,203,216,4,141,205,241,4,97,206,203,205,141,205,241,4,1,203,0,0,1,206,4,0,138,205,203,206,76,24,0,0,96,24,0,0,116,24,0,0,136,24,0,0,2,3,0,0,210,224,53,2,2,5,0,0,210,224,53,2,119,0,21,0,2,3,0,0,153,25,21,0,2,5,0,0,117,25,21,0,119,0,16,0,2,3,0,0,146,25,21,0,2,5,0,0,113,25,21,0,119,0,11,0,2,3,0,0,129,25,21,0,2,5,0,0,104,25,21,0,119,0,6,0,2,3,0,0,120,25,21,0,2,5,0,0,100,25,21,0,119,0,1,0,141,205,145,9,109,205,112,5,141,205,145,9,25,205,205,112,109,205,4,3,2,203,0,0,200,25,21,0,141,206,145,9,25,206,206,112,135,205,24,0,203,206,0,0,141,205,145,9,1,206,136,4,1,203,21,0,97,205,206,203,141,203,145,9,1,206,136,4,3,203,203,206,1,206,0,0,109,203,4,206,141,203,145,9,1,205,136,4,3,203,203,205,2,205,0,0,12,57,21,0,141,204,145,9,1,207,176,0,3,204,204,207,135,206,18,0,203,205,204,0,1,204,0,2,135,206,33,0,204,0,0,0,143,206,252,4,1,206,255,255,141,204,252,4,47,206,206,204,172,25,0,0,135,206,34,0,143,206,5,5,2,206,0,0,184,82,71,0,141,204,5,5,85,206,204,0,141,204,145,9,1,206,128,4,1,205,21,0,97,204,206,205,141,205,145,9,1,206,128,4,3,205,205,206,1,206,0,0,109,205,4,206,141,206,145,9,1,205,224,2,141,204,5,5,97,206,205,204,141,205,145,9,1,206,128,4,3,205,205,206,2,206,0,0,51,57,21,0,141,203,145,9,1,207,224,2,3,203,203,207,135,204,18,0,205,206,203,0,119,0,24,0,141,204,145,9,1,203,120,4,1,206,20,0,97,204,203,206,141,206,145,9,1,203,120,4,3,206,206,203,1,203,2,0,109,206,4,203,141,206,145,9,1,204,120,4,3,206,206,204,2,204,0,0,76,57,21,0,141,205,145,9,1,207,232,2,3,205,205,207,135,203,18,0,206,204,205,0,2,203,0,0,184,82,71,0,1,205,0,0,85,203,205,0,2,205,0,0,192,82,71,0,1,203,1,0,83,205,203,0,2,203,0,0,193,82,71,0,1,205,0,0,83,203,205,0,2,205,0,0,188,82,71,0,1,203,1,3,84,205,203,0,2,203,0,0,190,82,71,0,1,205,1,3,84,203,205,0,2,203,0,0,13,224,53,2,78,205,203,0,143,205,18,5,141,205,18,5,41,205,205,24,42,205,205,24,32,205,205,0,121,205,22,19,2,205,0,0,13,224,53,2,1,203,1,0,83,205,203,0,141,203,145,9,1,205,20,0,109,203,112,205,141,205,145,9,25,205,205,112,1,203,0,0,109,205,4,203,141,205,145,9,25,205,205,112,2,204,0,0,108,57,21,0,141,206,145,9,1,207,240,2,3,206,206,207,135,203,18,0,205,204,206,0,141,203,145,9,1,206,144,2,1,204,20,0,97,203,206,204,141,204,145,9,1,206,144,2,3,204,204,206,1,206,0,0,109,204,4,206,141,204,145,9,1,203,144,2,3,204,204,203,2,203,0,0,121,57,21,0,141,205,145,9,1,207,0,3,3,205,205,207,135,206,18,0,204,203,205,0,1,205,37,4,2,203,0,0,159,57,21,0,1,204,0,0,135,206,35,0,205,203,204,0,2,206,0,0,1,18,71,0,1,204,0,0,83,206,204,0,2,204,0,0,2,18,71,0,1,206,0,0,83,204,206,0,2,206,0,0,3,18,71,0,1,204,1,0,83,206,204,0,1,204,0,0,32,204,204,0,120,204,25,0,2,206,0,0,0,92,14,0,1,203,32,0,1,205,32,0,1,207,32,0,1,208,128,0,2,209,0,0,0,255,0,0,2,210,0,0,0,0,255,0,1,211,0,0,135,204,36,0,206,203,205,207,208,200,209,210,211,0,0,0,143,204,40,5,2,211,0,0,124,18,71,0,82,204,211,0,143,204,44,5,141,211,44,5,141,210,40,5,135,204,37,0,211,210,0,0,2,204,0,0,77,18,71,0,1,210,0,0,83,204,210,0,2,210,0,0,79,18,71,0,1,204,0,0,83,210,204,0,2,204,0,0,78,18,71,0,1,210,0,0,83,204,210,0,2,204,0,0,40,156,79,0,82,210,204,0,143,210,51,5,141,210,145,9,1,204,0,3,3,210,210,204,1,204,0,0,109,210,4,204,141,204,145,9,1,210,0,3,3,204,204,210,25,204,204,4,2,210,0,0,0,0,0,3,109,204,4,210,141,210,145,9,1,204,0,3,2,211,0,0,136,79,21,0,78,211,211,0,95,210,204,211,141,211,145,9,1,204,0,3,3,211,211,204,2,204,0,0,136,79,21,0,102,204,204,1,107,211,1,204,141,204,145,9,1,211,0,3,3,204,204,211,2,211,0,0,136,79,21,0,102,211,211,2,107,204,2,211,141,211,145,9,1,204,0,3,3,211,211,204,1,204,0,0,107,211,3,204,141,211,51,5,141,210,145,9,1,209,0,3,3,210,210,209,135,204,25,0,211,210,0,0,143,204,84,5,141,210,145,9,1,211,0,3,3,210,210,211,102,204,210,11,143,204,89,5,141,204,89,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,211,0,3,94,204,210,211,143,204,98,5,141,210,98,5,135,204,21,0,210,0,0,0,141,204,84,5,1,210,0,0,45,204,204,210,36,29,0,0,2,210,0,0,147,164,21,0,2,211,0,0,242,25,21,0,1,209,141,14,2,208,0,0,172,57,21,0,135,204,38,0,210,211,209,208,141,204,145,9,1,208,0,3,3,204,204,208,1,208,10,0,107,204,11,208,141,204,145,9,1,209,0,3,3,208,204,209,143,208,143,9,2,208,0,0,47,30,21,0,143,208,146,9,141,209,143,9,25,208,209,10,143,208,147,9,141,208,143,9,141,209,146,9,78,209,209,0,83,208,209,0,141,208,143,9,25,209,208,1,143,209,143,9,141,208,146,9,25,209,208,1,143,209,146,9,141,209,143,9,141,208,147,9,54,209,209,208,96,29,0,0,141,209,145,9,1,208,0,3,3,209,209,208,1,208,0,0,107,209,10,208,141,209,84,5,141,204,145,9,1,211,0,3,3,204,204,211,135,208,27,0,209,204,0,0,143,208,116,5,2,208,0,0,76,18,71,0,141,204,116,5,38,204,204,1,83,208,204,0,141,208,145,9,1,209,0,3,3,208,208,209,102,204,208,11,143,204,125,5,141,204,125,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,209,0,3,94,204,208,209,143,204,135,5,141,208,135,5,135,204,21,0,208,0,0,0,1,208,16,0,135,204,26,0,208,0,0,0,143,204,140,5,141,204,145,9,1,208,0,3,141,209,140,5,97,204,208,209,141,209,145,9,1,208,0,3,3,209,209,208,2,208,0,0,16,0,0,128,109,209,8,208,141,208,145,9,1,209,0,3,3,208,208,209,1,209,11,0,109,208,4,209,141,208,140,5,0,209,208,0,143,209,143,9,2,209,0,0,46,35,21,0,143,209,146,9,141,208,143,9,25,209,208,11,143,209,147,9,141,209,143,9,141,208,146,9,78,208,208,0,83,209,208,0,141,209,143,9,25,208,209,1,143,208,143,9,141,209,146,9,25,208,209,1,143,208,146,9,141,208,143,9,141,209,147,9,54,208,208,209,144,30,0,0,141,208,140,5,1,209,0,0,107,208,11,209,141,208,84,5,141,204,145,9,1,211,0,3,3,204,204,211,135,209,27,0,208,204,0,0,143,209,157,5,2,209,0,0,56,18,71,0,141,204,157,5,38,204,204,1,83,209,204,0,141,209,145,9,1,208,0,3,3,209,209,208,102,204,209,11,143,204,172,5,141,204,172,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,208,0,3,94,204,209,208,143,204,179,5,141,209,179,5,135,204,21,0,209,0,0,0,141,204,145,9,1,209,0,3,1,208,0,0,97,204,209,208,141,208,145,9,1,209,0,3,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,0,3,3,209,209,208,1,208,0,0,109,209,8,208,141,208,145,9,1,209,0,3,3,208,208,209,1,209,8,0,107,208,11,209,141,209,145,9,1,208,0,3,2,204,0,0,112,114,105,111,97,209,208,204,141,204,145,9,1,208,0,3,3,204,204,208,2,208,0,0,114,105,116,121,109,204,4,208,141,208,145,9,1,204,0,3,3,208,208,204,1,204,0,0,107,208,8,204,141,208,84,5,141,209,145,9,1,211,0,3,3,209,209,211,135,204,39,0,208,209,0,0,143,204,210,5,141,209,145,9,1,208,0,3,3,209,209,208,102,204,209,11,143,204,214,5,141,204,214,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,208,0,3,94,204,209,208,143,204,225,5,141,209,225,5,135,204,21,0,209,0,0,0,141,209,210,5,106,204,209,116,143,204,233,5,141,204,145,9,1,209,240,2,1,208,0,0,97,204,209,208,141,208,145,9,1,209,240,2,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,240,2,3,209,209,208,1,208,0,0,109,209,8,208,141,208,145,9,1,209,240,2,3,208,208,209,1,209,6,0,107,208,11,209,141,209,145,9,1,208,240,2,2,204,0,0,19,36,21,0,78,204,204,0,95,209,208,204,141,204,145,9,1,208,240,2,3,204,204,208,2,208,0,0,19,36,21,0,102,208,208,1,107,204,1,208,141,208,145,9,1,204,240,2,3,208,208,204,2,204,0,0,19,36,21,0,102,204,204,2,107,208,2,204,141,204,145,9,1,208,240,2,3,204,204,208,2,208,0,0,19,36,21,0,102,208,208,3,107,204,3,208,141,208,145,9,1,204,240,2,3,208,208,204,2,204,0,0,19,36,21,0,102,204,204,4,107,208,4,204,141,204,145,9,1,208,240,2,3,204,204,208,2,208,0,0,19,36,21,0,102,208,208,5,107,204,5,208,141,208,145,9,1,204,240,2,3,208,208,204,1,204,0,0,107,208,6,204,141,208,233,5,141,209,145,9,1,211,240,2,3,209,209,211,135,204,40,0,208,209,0,0,143,204,248,5,141,204,145,9,1,209,0,3,1,208,0,0,97,204,209,208,141,208,145,9,1,209,0,3,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,0,3,3,209,209,208,1,208,0,0,109,209,8,208,141,209,248,5,135,208,41,0,209,0,0,0,143,208,252,5,1,208,239,255,141,209,252,5,48,208,208,209,204,33,0,0,141,209,145,9,1,204,0,3,3,209,209,204,135,208,42,0,209,0,0,0,141,208,252,5,35,208,208,11,121,208,20,0,141,208,145,9,1,209,0,3,3,208,208,209,141,209,252,5,19,209,209,200,107,208,11,209,141,209,252,5,32,209,209,0,121,209,5,0,141,209,145,9,1,208,0,3,3,17,209,208,119,0,36,0,141,208,145,9,1,209,0,3,3,7,208,209,1,209,92,0,143,209,144,9,119,0,30,0,141,208,252,5,25,208,208,16,38,208,208,240,135,209,26,0,208,0,0,0,143,209,18,6,141,209,145,9,1,208,0,3,141,204,18,6,97,209,208,204,141,204,145,9,1,208,0,3,3,204,204,208,141,208,252,5,25,208,208,16,38,208,208,240,2,209,0,0,0,0,0,128,20,208,208,209,109,204,8,208,141,208,145,9,1,204,0,3,3,208,208,204,141,204,252,5,109,208,4,204,141,204,18,6,0,7,204,0,1,204,92,0,143,204,144,9,141,204,144,9,32,204,204,92,121,204,6,0,141,208,248,5,141,209,252,5,135,204,43,0,7,208,209,0,0,17,7,0,141,209,252,5,3,204,17,209,143,204,49,6,141,204,49,6,1,209,0,0,83,204,209,0,141,204,145,9,1,208,240,2,3,204,204,208,102,209,204,11,143,209,53,6,141,209,53,6,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,204,145,9,1,208,240,2,94,209,204,208,143,209,63,6,141,204,63,6,135,209,21,0,204,0,0,0,141,204,210,5,106,209,204,116,143,209,69,6,141,209,145,9,1,204,0,0,85,209,204,0,141,204,145,9,1,209,0,0,109,204,4,209,141,209,145,9,1,204,0,0,109,209,8,204,141,204,145,9,1,209,8,0,107,204,11,209,141,209,145,9,2,204,0,0,105,110,97,99,85,209,204,0,141,204,145,9,2,209,0,0,116,105,118,101,109,204,4,209,141,209,145,9,1,204,0,0,107,209,8,204,141,209,69,6,141,208,145,9,135,204,40,0,209,208,0,0,143,204,98,6,141,204,145,9,1,208,240,2,1,209,0,0,97,204,208,209,141,209,145,9,1,208,240,2,3,209,209,208,1,208,0,0,109,209,4,208,141,208,145,9,1,209,240,2,3,208,208,209,1,209,0,0,109,208,8,209,141,208,98,6,135,209,41,0,208,0,0,0,143,209,105,6,1,209,239,255,141,208,105,6,48,209,209,208,252,35,0,0,141,208,145,9,1,204,240,2,3,208,208,204,135,209,42,0,208,0,0,0,141,209,105,6,35,209,209,11,121,209,20,0,141,209,145,9,1,208,240,2,3,209,209,208,141,208,105,6,19,208,208,200,107,209,11,208,141,208,105,6,32,208,208,0,121,208,5,0,141,208,145,9,1,209,240,2,3,18,208,209,119,0,36,0,141,209,145,9,1,208,240,2,3,8,209,208,1,208,100,0,143,208,144,9,119,0,30,0,141,209,105,6,25,209,209,16,38,209,209,240,135,208,26,0,209,0,0,0,143,208,127,6,141,208,145,9,1,209,240,2,141,204,127,6,97,208,209,204,141,204,145,9,1,209,240,2,3,204,204,209,141,209,105,6,25,209,209,16,38,209,209,240,2,208,0,0,0,0,0,128,20,209,209,208,109,204,8,209,141,209,145,9,1,204,240,2,3,209,209,204,141,204,105,6,109,209,4,204,141,204,127,6,0,8,204,0,1,204,100,0,143,204,144,9,141,204,144,9,32,204,204,100,121,204,6,0,141,209,98,6,141,208,105,6,135,204,43,0,8,209,208,0,0,18,8,0,141,208,105,6,3,204,18,208,143,204,156,6,141,204,156,6,1,208,0,0,83,204,208,0,141,204,145,9,102,208,204,11,143,208,162,6,141,208,162,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,204,145,9,82,208,204,0,143,208,170,6,141,204,170,6,135,208,21,0,204,0,0,0,141,204,145,9,1,209,0,3,3,204,204,209,25,208,204,11,143,208,175,6,141,204,175,6,78,208,204,0,143,208,179,6,141,204,145,9,1,209,0,3,3,204,204,209,25,208,204,4,143,208,189,6,141,204,189,6,82,208,204,0,143,208,195,6,141,209,179,6,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,195,6,0,204,209,0,119,0,4,0,141,209,179,6,19,209,209,200,0,204,209,0,0,208,204,0,143,208,203,6,141,208,203,6,32,208,208,6,121,208,40,0,141,204,145,9,1,209,0,3,3,204,204,209,1,209,0,0,1,211,255,255,2,210,0,0,156,37,21,0,1,207,6,0,135,208,44,0,204,209,211,210,207,0,0,0,143,208,213,6,141,208,213,6,32,208,208,0,121,208,6,0,2,208,0,0,96,18,71,0,1,207,1,0,85,208,207,0,119,0,32,0,141,208,175,6,78,207,208,0,143,207,124,1,141,208,189,6,82,207,208,0,143,207,144,1,141,208,124,1,19,208,208,200,0,207,208,0,143,207,137,1,141,208,124,1,0,207,208,0,143,207,221,6,141,208,144,1,0,207,208,0,143,207,230,6,1,207,107,0,143,207,144,9,119,0,13,0,141,208,179,6,19,208,208,200,0,207,208,0,143,207,137,1,141,208,179,6,0,207,208,0,143,207,221,6,141,208,195,6,0,207,208,0,143,207,230,6,1,207,107,0,143,207,144,9,141,207,144,9,32,207,207,107,121,207,216,0,141,208,221,6,41,208,208,24,42,208,208,24,34,207,208,0,143,207,225,6,141,208,225,6,141,210,230,6,141,211,137,1,125,207,208,210,211,0,0,0,143,207,236,6,141,207,236,6,32,207,207,5,121,207,38,0,141,211,145,9,1,210,0,3,3,211,211,210,1,210,0,0,1,208,255,255,2,209,0,0,163,37,21,0,1,204,5,0,135,207,44,0,211,210,208,209,204,0,0,0,143,207,243,6,141,207,243,6,32,207,207,0,121,207,6,0,2,207,0,0,96,18,71,0,1,204,2,0,85,207,204,0,119,0,182,0,141,207,175,6,78,204,207,0,143,204,145,1,141,207,189,6,82,204,207,0,143,204,146,1,141,207,145,1,19,207,207,200,0,204,207,0,143,204,138,1,141,207,145,1,0,204,207,0,143,204,249,6,141,207,146,1,0,204,207,0,143,204,5,7,119,0,10,0,141,207,137,1,0,204,207,0,143,204,138,1,141,207,221,6,0,204,207,0,143,204,249,6,141,207,230,6,0,204,207,0,143,204,5,7,141,207,249,6,41,207,207,24,42,207,207,24,34,204,207,0,143,204,254,6,141,207,254,6,141,209,5,7,141,208,138,1,125,204,207,209,208,0,0,0,143,204,11,7,141,204,11,7,32,204,204,6,121,204,38,0,141,208,145,9,1,209,0,3,3,208,208,209,1,209,0,0,1,207,255,255,2,210,0,0,25,21,22,0,1,211,6,0,135,204,44,0,208,209,207,210,211,0,0,0,143,204,18,7,141,204,18,7,32,204,204,0,121,204,6,0,2,204,0,0,96,18,71,0,1,211,3,0], eb + 0);
  HEAPU8.set([85,204,211,0,119,0,122,0,141,204,175,6,78,211,204,0,143,211,147,1,141,204,189,6,82,211,204,0,143,211,148,1,141,204,147,1,19,204,204,200,0,211,204,0,143,211,139,1,141,204,147,1,0,211,204,0,143,211,28,7,141,204,148,1,0,211,204,0,143,211,36,7,119,0,10,0,141,204,138,1,0,211,204,0,143,211,139,1,141,204,249,6,0,211,204,0,143,211,28,7,141,204,5,7,0,211,204,0,143,211,36,7,141,204,28,7,41,204,204,24,42,204,204,24,34,211,204,0,143,211,33,7,141,204,33,7,141,210,36,7,141,207,139,1,125,211,204,210,207,0,0,0,143,211,40,7,141,211,40,7,32,211,211,6,121,211,38,0,141,207,145,9,1,210,0,3,3,207,207,210,1,210,0,0,1,204,255,255,2,209,0,0,26,36,21,0,1,208,6,0,135,211,44,0,207,210,204,209,208,0,0,0,143,211,52,7,141,211,52,7,32,211,211,0,121,211,6,0,2,211,0,0,96,18,71,0,1,208,4,0,85,211,208,0,119,0,62,0,141,211,175,6,78,208,211,0,143,208,149,1,141,211,189,6,82,208,211,0,143,208,150,1,141,211,149,1,19,211,211,200,0,208,211,0,143,208,140,1,141,211,149,1,0,208,211,0,143,208,58,7,141,211,150,1,0,208,211,0,143,208,69,7,119,0,10,0,141,211,139,1,0,208,211,0,143,208,140,1,141,211,28,7,0,208,211,0,143,208,58,7,141,211,36,7,0,208,211,0,143,208,69,7,141,211,58,7,41,211,211,24,42,211,211,24,34,208,211,0,143,208,64,7,141,211,64,7,141,209,69,7,141,204,140,1,125,208,211,209,204,0,0,0,143,208,76,7,141,208,76,7,32,208,208,7,120,208,2,0,119,0,21,0,141,204,145,9,1,209,0,3,3,204,204,209,1,209,0,0,1,211,255,255,2,210,0,0,169,37,21,0,1,207,7,0,135,208,44,0,204,209,211,210,207,0,0,0,143,208,84,7,141,208,84,7,32,208,208,0,120,208,2,0,119,0,5,0,2,208,0,0,96,18,71,0,1,207,5,0,85,208,207,0,141,208,145,9,1,210,240,2,3,208,208,210,25,207,208,11,143,207,94,7,141,208,94,7,78,207,208,0,143,207,98,7,141,208,145,9,1,210,240,2,3,208,208,210,25,207,208,4,143,207,108,7,141,208,108,7,82,207,208,0,143,207,112,7,141,210,98,7,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,112,7,0,208,210,0,119,0,4,0,141,210,98,7,19,210,210,200,0,208,210,0,0,207,208,0,143,207,120,7,141,207,120,7,32,207,207,6,121,207,40,0,141,208,145,9,1,210,240,2,3,208,208,210,1,210,0,0,1,211,255,255,2,209,0,0,156,37,21,0,1,204,6,0,135,207,44,0,208,210,211,209,204,0,0,0,143,207,128,7,141,207,128,7,32,207,207,0,121,207,6,0,2,207,0,0,100,18,71,0,1,204,1,0,85,207,204,0,119,0,32,0,141,207,94,7,78,204,207,0,143,204,151,1,141,207,108,7,82,204,207,0,143,204,152,1,141,207,151,1,19,207,207,200,0,204,207,0,143,204,132,1,141,207,151,1,0,204,207,0,143,204,138,7,141,207,152,1,0,204,207,0,143,204,148,7,1,204,126,0,143,204,144,9,119,0,13,0,141,207,98,7,19,207,207,200,0,204,207,0,143,204,132,1,141,207,98,7,0,204,207,0,143,204,138,7,141,207,112,7,0,204,207,0,143,204,148,7,1,204,126,0,143,204,144,9,141,204,144,9,32,204,204,126,121,204,20,1,141,207,138,7,41,207,207,24,42,207,207,24,34,204,207,0,143,204,142,7,141,207,142,7,141,209,148,7,141,211,132,1,125,204,207,209,211,0,0,0,143,204,151,7,141,204,151,7,32,204,204,5,121,204,38,0,141,211,145,9,1,209,240,2,3,211,211,209,1,209,0,0,1,207,255,255,2,210,0,0,163,37,21,0,1,208,5,0,135,204,44,0,211,209,207,210,208,0,0,0,143,204,161,7,141,204,161,7,32,204,204,0,121,204,6,0,2,204,0,0,100,18,71,0,1,208,2,0,85,204,208,0,119,0,242,0,141,204,94,7,78,208,204,0,143,208,153,1,141,204,108,7,82,208,204,0,143,208,154,1,141,204,153,1,19,204,204,200,0,208,204,0,143,208,133,1,141,204,153,1,0,208,204,0,143,208,169,7,141,204,154,1,0,208,204,0,143,208,176,7,119,0,10,0,141,204,132,1,0,208,204,0,143,208,133,1,141,204,138,7,0,208,204,0,143,208,169,7,141,204,148,7,0,208,204,0,143,208,176,7,141,204,169,7,41,204,204,24,42,204,204,24,34,208,204,0,143,208,175,7,141,204,175,7,141,210,176,7,141,207,133,1,125,208,204,210,207,0,0,0,143,208,181,7,141,208,181,7,32,208,208,6,121,208,38,0,141,207,145,9,1,210,240,2,3,207,207,210,1,210,0,0,1,204,255,255,2,209,0,0,25,21,22,0,1,211,6,0,135,208,44,0,207,210,204,209,211,0,0,0,143,208,188,7,141,208,188,7,32,208,208,0,121,208,6,0,2,208,0,0,100,18,71,0,1,211,3,0,85,208,211,0,119,0,182,0,141,208,94,7,78,211,208,0,143,211,155,1,141,208,108,7,82,211,208,0,143,211,156,1,141,208,155,1,19,208,208,200,0,211,208,0,143,211,134,1,141,208,155,1,0,211,208,0,143,211,194,7,141,208,156,1,0,211,208,0,143,211,202,7,119,0,10,0,141,208,133,1,0,211,208,0,143,211,134,1,141,208,169,7,0,211,208,0,143,211,194,7,141,208,176,7,0,211,208,0,143,211,202,7,141,208,194,7,41,208,208,24,42,208,208,24,34,211,208,0,143,211,200,7,141,208,200,7,141,209,202,7,141,204,134,1,125,211,208,209,204,0,0,0,143,211,207,7,141,211,207,7,32,211,211,6,121,211,38,0,141,204,145,9,1,209,240,2,3,204,204,209,1,209,0,0,1,208,255,255,2,210,0,0,26,36,21,0,1,207,6,0,135,211,44,0,204,209,208,210,207,0,0,0,143,211,214,7,141,211,214,7,32,211,211,0,121,211,6,0,2,211,0,0,100,18,71,0,1,207,4,0,85,211,207,0,119,0,122,0,141,211,94,7,78,207,211,0,143,207,157,1,141,211,108,7,82,207,211,0,143,207,158,1,141,211,157,1,19,211,211,200,0,207,211,0,143,207,135,1,141,211,157,1,0,207,211,0,143,207,221,7,141,211,158,1,0,207,211,0,143,207,229,7,119,0,10,0,141,211,134,1,0,207,211,0,143,207,135,1,141,211,194,7,0,207,211,0,143,207,221,7,141,211,202,7,0,207,211,0,143,207,229,7,141,211,221,7,41,211,211,24,42,211,211,24,34,207,211,0,143,207,225,7,141,211,225,7,141,210,229,7,141,208,135,1,125,207,211,210,208,0,0,0,143,207,233,7,141,207,233,7,32,207,207,7,121,207,38,0,141,208,145,9,1,210,240,2,3,208,208,210,1,210,0,0,1,211,255,255,2,209,0,0,169,37,21,0,1,204,7,0,135,207,44,0,208,210,211,209,204,0,0,0,143,207,241,7,141,207,241,7,32,207,207,0,121,207,6,0,2,207,0,0,100,18,71,0,1,204,5,0,85,207,204,0,119,0,62,0,141,207,94,7,78,204,207,0,143,204,159,1,141,207,108,7,82,204,207,0,143,204,160,1,141,207,159,1,19,207,207,200,0,204,207,0,143,204,136,1,141,207,159,1,0,204,207,0,143,204,249,7,141,207,160,1,0,204,207,0,143,204,2,8,119,0,10,0,141,207,135,1,0,204,207,0,143,204,136,1,141,207,221,7,0,204,207,0,143,204,249,7,141,207,229,7,0,204,207,0,143,204,2,8,141,207,249,7,41,207,207,24,42,207,207,24,34,204,207,0,143,204,252,7,141,207,252,7,141,209,2,8,141,211,136,1,125,204,207,209,211,0,0,0,143,204,4,8,141,204,4,8,32,204,204,5,120,204,2,0,119,0,21,0,141,211,145,9,1,209,240,2,3,211,211,209,1,209,0,0,1,207,255,255,2,210,0,0,50,73,21,0,1,208,5,0,135,204,44,0,211,209,207,210,208,0,0,0,143,204,13,8,141,204,13,8,32,204,204,0,120,204,2,0,119,0,5,0,2,204,0,0,100,18,71,0,1,208,0,0,85,204,208,0,2,208,0,0,162,18,71,0,1,204,0,0,83,208,204,0,2,204,0,0,5,224,53,2,1,208,0,0,83,204,208,0,2,208,0,0,161,18,71,0,1,204,0,0,83,208,204,0,2,204,0,0,64,18,71,0,1,208,0,0,83,204,208,0,141,208,145,9,1,204,0,0,85,208,204,0,141,204,145,9,1,208,0,0,109,204,4,208,141,208,145,9,1,204,0,0,109,208,8,204,1,208,16,0,135,204,26,0,208,0,0,0,143,204,19,8,141,204,145,9,141,208,19,8,85,204,208,0,141,208,145,9,2,204,0,0,16,0,0,128,109,208,8,204,141,204,145,9,1,208,14,0,109,204,4,208,141,204,19,8,0,208,204,0,143,208,143,9,2,208,0,0,172,28,21,0,143,208,146,9,141,204,143,9,25,208,204,14,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,80,48,0,0,141,204,19,8,1,208,0,0,107,204,14,208,141,204,84,5,141,210,145,9,135,208,40,0,204,210,0,0,143,208,32,8,141,210,145,9,102,208,210,11,143,208,40,8,141,208,40,8,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,210,145,9,82,208,210,0,143,208,48,8,141,210,48,8,135,208,21,0,210,0,0,0,2,208,0,0,60,18,71,0,1,210,0,0,84,208,210,0,2,210,0,0,62,18,71,0,1,208,0,0,84,210,208,0,141,208,32,8,1,210,0,0,52,208,208,210,88,50,0,0,141,210,32,8,78,208,210,0,143,208,54,8,141,208,54,8,41,208,208,24,42,208,208,24,32,208,208,0,120,208,75,0,141,210,145,9,141,204,32,8,1,207,100,0,135,208,45,0,210,204,207,0,141,207,145,9,135,208,46,0,207,0,0,0,143,208,62,8,141,207,62,8,2,204,0,0,187,28,21,0,135,208,47,0,207,204,0,0,143,208,68,8,141,208,68,8,32,208,208,0,120,208,57,0,2,208,0,0,64,18,71,0,1,204,1,0,83,208,204,0,141,208,62,8,2,207,0,0,196,28,21,0,135,204,47,0,208,207,0,0,143,204,74,8,141,204,74,8,32,204,204,0,120,204,44,0,141,207,62,8,1,208,120,0,135,204,48,0,207,208,0,0,143,204,81,8,141,204,81,8,1,208,0,0,52,204,204,208,88,50,0,0,141,208,81,8,78,204,208,0,143,204,91,8,141,204,91,8,41,204,204,24,42,204,204,24,32,204,204,0,120,204,27,0,141,204,81,8,1,208,0,0,83,204,208,0,141,204,81,8,25,204,204,1,135,208,49,0,204,0,0,0,143,208,108,8,2,208,0,0,62,18,71,0,141,204,108,8,2,207,0,0,255,255,0,0,19,204,204,207,84,208,204,0,141,208,145,9,135,204,49,0,208,0,0,0,143,204,120,8,2,204,0,0,60,18,71,0,141,208,120,8,2,207,0,0,255,255,0,0,19,208,208,207,84,204,208,0,2,208,0,0,66,18,71,0,1,204,0,0,84,208,204,0,2,204,0,0,68,18,71,0,1,208,0,0,84,204,208,0,141,208,145,9,1,204,0,0,85,208,204,0,141,204,145,9,1,208,0,0,109,204,4,208,141,208,145,9,1,204,0,0,109,208,8,204,1,208,32,0,135,204,26,0,208,0,0,0,143,204,123,8,141,204,145,9,141,208,123,8,85,204,208,0,141,208,145,9,2,204,0,0,32,0,0,128,109,208,8,204,141,204,145,9,1,208,16,0,109,204,4,208,141,204,123,8,0,208,204,0,143,208,143,9,2,208,0,0,204,28,21,0,143,208,146,9,141,204,143,9,25,208,204,16,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,248,50,0,0,141,204,123,8,1,208,0,0,107,204,16,208,141,204,84,5,141,207,145,9,135,208,40,0,204,207,0,0,143,208,124,8,141,207,145,9,102,208,207,11,143,208,125,8,141,208,125,8,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,207,145,9,82,208,207,0,143,208,126,8,141,207,126,8,135,208,21,0,207,0,0,0,141,208,124,8,1,207,0,0,52,208,208,207,172,52,0,0,141,207,124,8,78,208,207,0,143,208,127,8,141,208,127,8,41,208,208,24,42,208,208,24,32,208,208,0,120,208,62,0,141,207,145,9,141,204,124,8,1,210,100,0,135,208,45,0,207,204,210,0,141,210,145,9,135,208,46,0,210,0,0,0,143,208,128,8,141,210,128,8,2,204,0,0,187,28,21,0,135,208,47,0,210,204,0,0,143,208,129,8,141,208,129,8,32,208,208,0,120,208,44,0,141,204,128,8,1,210,120,0,135,208,48,0,204,210,0,0,143,208,131,8,141,208,131,8,1,210,0,0,52,208,208,210,172,52,0,0,141,210,131,8,78,208,210,0,143,208,132,8,141,208,132,8,41,208,208,24,42,208,208,24,32,208,208,0,120,208,27,0,141,208,131,8,1,210,0,0,83,208,210,0,141,208,131,8,25,208,208,1,135,210,49,0,208,0,0,0,143,210,133,8,2,210,0,0,68,18,71,0,141,208,133,8,2,204,0,0,255,255,0,0,19,208,208,204,84,210,208,0,141,210,145,9,135,208,49,0,210,0,0,0,143,208,134,8,2,208,0,0,66,18,71,0,141,210,134,8,2,204,0,0,255,255,0,0,19,210,210,204,84,208,210,0,141,210,145,9,1,208,10,0,107,210,11,208,141,210,145,9,0,208,210,0,143,208,143,9,2,208,0,0,221,28,21,0,143,208,146,9,141,210,143,9,25,208,210,10,143,208,147,9,141,208,143,9,141,210,146,9,78,210,210,0,83,208,210,0,141,208,143,9,25,210,208,1,143,210,143,9,141,208,146,9,25,210,208,1,143,210,146,9,141,210,143,9,141,208,147,9,54,210,210,208,220,52,0,0,141,210,145,9,1,208,0,0,107,210,10,208,141,210,84,5,141,204,145,9,135,208,27,0,210,204,0,0,143,208,135,8,2,208,0,0,80,18,71,0,141,204,135,8,38,204,204,1,83,208,204,0,141,208,145,9,102,204,208,11,143,204,136,8,141,204,136,8,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,82,204,208,0,143,204,137,8,141,208,137,8,135,204,21,0,208,0,0,0,2,208,0,0,60,18,71,0,80,204,208,0,143,204,138,8,141,204,138,8,41,204,204,16,42,204,204,16,32,204,204,0,121,204,5,0,2,204,0,0,60,18,71,0,1,208,0,4,84,204,208,0,2,204,0,0,62,18,71,0,80,208,204,0,143,208,139,8,141,208,139,8,41,208,208,16,42,208,208,16,32,208,208,0,121,208,5,0,2,208,0,0,62,18,71,0,1,204,0,4,84,208,204,0,141,204,145,9,1,208,0,0,85,204,208,0,141,208,145,9,1,204,0,0,109,208,4,204,141,204,145,9,1,208,0,0,109,204,8,208,141,208,145,9,1,204,8,0,107,208,11,204,141,204,145,9,2,208,0,0,97,117,116,111,85,204,208,0,141,208,145,9,2,204,0,0,108,111,99,107,109,208,4,204,141,204,145,9,1,208,0,0,107,204,8,208,141,204,84,5,141,210,145,9,135,208,27,0,204,210,0,0,143,208,141,8,2,208,0,0,160,18,71,0,141,210,141,8,38,210,210,1,83,208,210,0,141,208,145,9,102,210,208,11,143,210,142,8,141,210,142,8,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,208,145,9,82,210,208,0,143,210,144,8,141,208,144,8,135,210,21,0,208,0,0,0,141,210,145,9,1,208,0,0,85,210,208,0,141,208,145,9,1,210,0,0,109,208,4,210,141,210,145,9,1,208,0,0,109,210,8,208,141,208,145,9,1,210,6,0,107,208,11,210,141,210,145,9,2,208,0,0,80,33,21,0,78,208,208,0,83,210,208,0,141,208,145,9,2,210,0,0,80,33,21,0,102,210,210,1,107,208,1,210,141,210,145,9,2,208,0,0,80,33,21,0,102,208,208,2,107,210,2,208,141,208,145,9,2,210,0,0,80,33,21,0,102,210,210,3,107,208,3,210,141,210,145,9,2,208,0,0,80,33,21,0,102,208,208,4,107,210,4,208,141,208,145,9,2,210,0,0,80,33,21,0,102,210,210,5,107,208,5,210,141,210,145,9,1,208,0,0,107,210,6,208,141,210,84,5,141,204,145,9,135,208,27,0,210,204,0,0,143,208,145,8,2,208,0,0,168,18,71,0,141,204,145,8,38,204,204,1,83,208,204,0,141,208,145,9,102,204,208,11,143,204,146,8,141,204,146,8,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,82,204,208,0,143,204,147,8,141,208,147,8,135,204,21,0,208,0,0,0,2,208,0,0,160,18,71,0,78,204,208,0,143,204,148,8,141,204,148,8,41,204,204,24,42,204,204,24,32,204,204,0,121,204,4,0,1,208,0,0,135,204,50,0,208,0,0,0,2,204,0,0,152,18,71,0,1,208,0,0,83,204,208,0,141,208,145,9,1,204,120,2,1,210,0,0,97,208,204,210,141,210,145,9,1,204,120,2,3,210,210,204,1,204,0,0,109,210,4,204,141,204,145,9,1,210,120,2,3,204,204,210,1,210,0,0,109,204,8,210,1,204,32,0,135,210,26,0,204,0,0,0,143,210,150,8,141,210,145,9,1,204,120,2,141,208,150,8,97,210,204,208,141,208,145,9,1,204,120,2,3,208,208,204,2,204,0,0,32,0,0,128,109,208,8,204,141,204,145,9,1,208,120,2,3,204,204,208,1,208,17,0,109,204,4,208,141,204,150,8,0,208,204,0,143,208,143,9,2,208,0,0,227,32,21,0,143,208,146,9,141,204,143,9,25,208,204,17,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,160,56,0,0,141,204,150,8,1,208,0,0,107,204,17,208,141,204,84,5,141,210,145,9,1,207,120,2,3,210,210,207,135,208,40,0,204,210,0,0,143,208,151,8,141,208,145,9,1,210,0,0,85,208,210,0,141,210,145,9,1,208,0,0,109,210,4,208,141,208,145,9,1,210,0,0,109,208,8,210,141,208,151,8,135,210,41,0,208,0,0,0,143,210,152,8,1,210,239,255,141,208,152,8,48,210,210,208,80,57,0,0,141,208,145,9,135,210,42,0,208,0,0,0,141,210,152,8,35,210,210,11,121,210,16,0,141,210,145,9,141,208,152,8,19,208,208,200,107,210,11,208,141,208,152,8,32,208,208,0,121,208,4,0,141,208,145,9,0,21,208,0,119,0,30,0,141,208,145,9,0,11,208,0,1,208,181,0,143,208,144,9,119,0,25,0,141,210,152,8,25,210,210,16,38,210,210,240,135,208,26,0,210,0,0,0,143,208,153,8,141,208,145,9,141,210,153,8,85,208,210,0,141,210,145,9,141,208,152,8,25,208,208,16,38,208,208,240,2,204,0,0,0,0,0,128,20,208,208,204,109,210,8,208,141,208,145,9,141,210,152,8,109,208,4,210,141,210,153,8,0,11,210,0,1,210,181,0,143,210,144,9,141,210,144,9,1,208,181,0,45,210,210,208,28,58,0,0,141,208,151,8,141,204,152,8,135,210,43,0,11,208,204,0,0,21,11,0,141,204,152,8,3,210,21,204,143,210,154,8,141,210,154,8,1,204,0,0,83,210,204,0,141,210,145,9,1,208,120,2,3,210,210,208,102,204,210,11,143,204,155,8,141,204,155,8,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,208,120,2,94,204,210,208,143,204,157,8,141,210,157,8,135,204,21,0,210,0,0,0,141,210,145,9,102,204,210,11,143,204,158,8,141,210,145,9,106,204,210,4,143,204,159,8,141,208,158,8,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,159,8,0,210,208,0,119,0,4,0,141,208,158,8,19,208,208,200,0,210,208,0,0,204,210,0,143,204,160,8,141,204,160,8,32,204,204,4,121,204,38,0,141,210,145,9,1,208,0,0,1,207,255,255,2,209,0,0,163,206,21,0,1,211,4,0,135,204,44,0,210,208,207,209,211,0,0,0,143,204,161,8,141,204,161,8,32,204,204,0,121,204,6,0,2,204,0,0,156,18,71,0,1,211,0,0,85,204,211,0,119,0,32,0,141,204,145,9,102,211,204,11,143,211,161,1,141,204,145,9,106,211,204,4,143,211,162,1,141,204,161,1,19,204,204,200,0,211,204,0,143,211,130,1,141,204,161,1,0,211,204,0,143,211,162,8,141,204,162,1,0,211,204,0,143,211,164,8,1,211,188,0,143,211,144,9,119,0,13,0,141,204,158,8,19,204,204,200,0,211,204,0,143,211,130,1,141,204,158,8,0,211,204,0,143,211,162,8,141,204,159,8,0,211,204,0,143,211,164,8,1,211,188,0,143,211,144,9,141,211,144,9,1,204,188,0,45,211,211,204,16,61,0,0,141,204,162,8,41,204,204,24,42,204,204,24,34,211,204,0,143,211,163,8,141,204,163,8,141,209,164,8,141,207,130,1,125,211,204,209,207,0,0,0,143,211,165,8,141,211,165,8,32,211,211,4,121,211,36,0,141,207,145,9,1,209,0,0,1,204,255,255,2,208,0,0,209,37,21,0,1,210,4,0,135,211,44,0,207,209,204,208,210,0,0,0,143,211,166,8,141,211,166,8,32,211,211,0,121,211,6,0,2,211,0,0,156,18,71,0,1,210,1,0,85,211,210,0,119,0,60,0,141,211,145,9,102,210,211,11,143,210,163,1,141,211,145,9,106,210,211,4,143,210,164,1,141,211,163,1,19,211,211,200,0,210,211,0,143,210,131,1,141,211,163,1,0,210,211,0,143,210,167,8,141,211,164,1,0,210,211,0,143,210,170,8,119,0,10,0,141,211,130,1,0,210,211,0,143,210,131,1,141,211,162,8,0,210,211,0,143,210,167,8,141,211,164,8,0,210,211,0,143,210,170,8,141,211,167,8,41,211,211,24,42,211,211,24,34,210,211,0,143,210,169,8,141,211,169,8,141,208,170,8,141,204,131,1,125,210,211,208,204,0,0,0,143,210,171,8,141,210,171,8,32,210,210,5,120,210,2,0,119,0,19,0,141,204,145,9,1,208,0,0,1,211,255,255,2,209,0,0,214,37,21,0,1,207,5,0,135,210,44,0,204,208,211,209,207,0,0,0,143,210,172,8,141,210,172,8,32,210,210,0,120,210,2,0,119,0,5,0,2,210,0,0,156,18,71,0,1,207,2,0,85,210,207,0,141,207,145,9,1,210,120,2,1,209,0,0,97,207,210,209,141,209,145,9,1,210,120,2,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,120,2,3,210,210,209,1,209,0,0,109,210,8,209,1,210,16,0,135,209,26,0,210,0,0,0,143,209,173,8,141,209,145,9,1,210,120,2,141,207,173,8,97,209,210,207,141,207,145,9,1,210,120,2,3,207,207,210,2,210,0,0,16,0,0,128,109,207,8,210,141,210,145,9,1,207,120,2,3,210,210,207,1,207,11,0,109,210,4,207,141,210,173,8,0,207,210,0,143,207,143,9,2,207,0,0,49,33,21,0,143,207,146,9,141,210,143,9,25,207,210,11,143,207,147,9,141,207,143,9,141,210,146,9,78,210,210,0,83,207,210,0,141,207,143,9,25,210,207,1,143,210,143,9,141,207,146,9,25,210,207,1,143,210,146,9,141,210,143,9,141,207,147,9,54,210,210,207,184,61,0,0,141,210,173,8,1,207,0,0,107,210,11,207,141,210,84,5,141,209,145,9,1,211,120,2,3,209,209,211,135,207,51,0,210,209,0,0,143,207,175,8,2,207,0,0,164,18,71,0,141,209,175,8,85,207,209,0,141,207,145,9,1,210,120,2,3,207,207,210,102,209,207,11,143,209,176,8,141,209,176,8,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,207,145,9,1,210,120,2,94,209,207,210,143,209,177,8,141,207,177,8,135,209,21,0,207,0,0,0,141,209,145,9,1,207,96,2,1,210,0,0,97,209,207,210,141,210,145,9,1,207,96,2,3,210,210,207,1,207,0,0,109,210,4,207,141,207,145,9,1,210,96,2,3,207,207,210,1,210,0,0,109,207,8,210,141,210,145,9,1,207,96,2,3,210,210,207,1,207,6,0,107,210,11,207,141,207,145,9,1,210,96,2,2,209,0,0,97,32,21,0,78,209,209,0,95,207,210,209,141,209,145,9,1,210,96,2,3,209,209,210,2,210,0,0,97,32,21,0,102,210,210,1,107,209,1,210,141,210,145,9,1,209,96,2,3,210,210,209,2,209,0,0,97,32,21,0,102,209,209,2,107,210,2,209,141,209,145,9,1,210,96,2,3,209,209,210,2,210,0,0,97,32,21,0,102,210,210,3,107,209,3,210,141,210,145,9,1,209,96,2,3,210,210,209,2,209,0,0,97,32,21,0,102,209,209,4,107,210,4,209,141,209,145,9,1,210,96,2,3,209,209,210,2,210,0,0,97,32,21,0,102,210,210,5,107,209,5,210,141,210,145,9,1,209,96,2,3,210,210,209,1,209,0,0,107,210,6,209,141,210,84,5,141,207,145,9,1,211,96,2,3,207,207,211,135,209,40,0,210,207,0,0,143,209,178,8,141,209,145,9,1,207,120,2,1,210,0,0,97,209,207,210,141,210,145,9,1,207,120,2,3,210,210,207,1,207,0,0,109,210,4,207,141,207,145,9,1,210,120,2,3,207,207,210,1,210,0,0,109,207,8,210,141,207,178,8,135,210,41,0,207,0,0,0,143,210,179,8,1,210,239,255,141,207,179,8,48,210,210,207,248,63,0,0,141,207,145,9,1,209,120,2,3,207,207,209,135,210,42,0,207,0,0,0,141,210,179,8,35,210,210,11,121,210,20,0,141,210,145,9,1,207,120,2,3,210,210,207,141,207,179,8,19,207,207,200,107,210,11,207,141,207,179,8,32,207,207,0,121,207,5,0,141,207,145,9,1,210,120,2,3,22,207,210,119,0,36,0,141,210,145,9,1,207,120,2,3,12,210,207,1,207,202,0,143,207,144,9,119,0,30,0,141,210,179,8,25,210,210,16,38,210,210,240,135,207,26,0,210,0,0,0,143,207,180,8,141,207,145,9,1,210,120,2,141,209,180,8,97,207,210,209,141,209,145,9,1,210,120,2,3,209,209,210,141,210,179,8,25,210,210,16,38,210,210,240,2,207,0,0,0,0,0,128,20,210,210,207,109,209,8,210,141,210,145,9,1,209,120,2,3,210,210,209,141,209,179,8,109,210,4,209,141,209,180,8,0,12,209,0,1,209,202,0,143,209,144,9,141,209,144,9,1,210,202,0,45,209,209,210,232,64,0,0,141,210,178,8,141,207,179,8,135,209,43,0,12,210,207,0,0,22,12,0,141,207,179,8,3,209,22,207,143,209,182,8,141,209,182,8,1,207,0,0,83,209,207,0,141,209,145,9,1,210,96,2,3,209,209,210,102,207,209,11,143,207,183,8,141,207,183,8,41,207,207,24,42,207,207,24,34,207,207,0,121,207,8,0,141,209,145,9,1,210,96,2,94,207,209,210,143,207,184,8,141,209,184,8,135,207,21,0,209,0,0,0,141,207,145,9,1,209,80,2,1,210,0,0,97,207,209,210,141,210,145,9,1,209,80,2,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,80,2,3,209,209,210,1,210,0,0,109,209,8,210,1,209,16,0,135,210,26,0,209,0,0,0,143,210,185,8,141,210,145,9,1,209,80,2,141,207,185,8,97,210,209,207,141,207,145,9,1,209,80,2,3,207,207,209,2,209,0,0,16,0,0,128,109,207,8,209,141,209,145,9,1,207,80,2,3,209,209,207,1,207,15,0,109,209,4,207,141,209,185,8,0,207,209,0,143,207,143,9,2,207,0,0,186,33,21,0,143,207,146,9,141,209,143,9,25,207,209,15,143,207,147,9,141,207,143,9,141,209,146,9,78,209,209,0,83,207,209,0,141,207,143,9,25,209,207,1,143,209,143,9,141,207,146,9,25,209,207,1,143,209,146,9,141,209,143,9,141,207,147,9,54,209,209,207,236,65,0,0,141,209,185,8,1,207,0,0,107,209,15,207,141,209,84,5,141,210,145,9,1,211,80,2,3,210,210,211,135,207,40,0,209,210,0,0,143,207,186,8,141,207,145,9,1,210,96,2,1,209,0,0,97,207,210,209,141,209,145,9,1,210,96,2,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,96,2,3,210,210,209,1,209,0,0,109,210,8,209,141,210,186,8,135,209,41,0,210,0,0,0,143,209,187,8,1,209,239,255,141,210,187,8,48,209,209,210,184,66,0,0,141,210,145,9,1,207,96,2,3,210,210,207,135,209,42,0,210,0,0,0,141,209,187,8,35,209,209,11,121,209,20,0,141,209,145,9,1,210,96,2,3,209,209,210,141,210,187,8,19,210,210,200,107,209,11,210,141,210,187,8,32,210,210,0,121,210,5,0,141,210,145,9,1,209,96,2,3,23,210,209,119,0,36,0,141,209,145,9,1,210,96,2,3,13,209,210,1,210,210,0,143,210,144,9,119,0,30,0,141,209,187,8,25,209,209,16,38,209,209,240,135,210,26,0,209,0,0,0,143,210,188,8,141,210,145,9,1,209,96,2,141,207,188,8,97,210,209,207,141,207,145,9,1,209,96,2,3,207,207,209,141,209,187,8,25,209,209,16,38,209,209,240,2,210,0,0,0,0,0,128,20,209,209,210,109,207,8,209,141,209,145,9,1,207,96,2,3,209,209,207,141,207,187,8,109,209,4,207,141,207,188,8,0,13,207,0,1,207,210,0,143,207,144,9,141,207,144,9,1,209,210,0,45,207,207,209,168,67,0,0,141,209,186,8,141,210,187,8,135,207,43,0,13,209,210,0,0,23,13,0,141,210,187,8,3,207,23,210,143,207,189,8,141,207,189,8,1,210,0,0,83,207,210,0,141,207,145,9,1,209,80,2,3,207,207,209,102,210,207,11,143,210,190,8,141,210,190,8,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,207,145,9,1,209,80,2,94,210,207,209,143,210,191,8,141,207,191,8,135,210,21,0,207,0,0,0,141,207,145,9,1,209,96,2,3,207,207,209,25,210,207,11,143,210,192,8,141,207,192,8,78,210,207,0,143,210,193,8,141,207,145,9,1,209,96,2,3,207,207,209,106,210,207,4,143,210,195,8,141,209,193,8,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,195,8,0,207,209,0,119,0,4,0,141,209,193,8,19,209,209,200,0,207,209,0,0,210,207,0,143,210,196,8,141,210,196,8,32,210,210,6,121,210,42,0,141,207,145,9,1,209,96,2,3,207,207,209,1,209,0,0,1,211,255,255,2,208,0,0,196,37,21,0,1,204,6,0,135,210,44,0,207,209,211,208,204,0,0,0,143,210,197,8,141,210,197,8,32,210,210,0,121,210,6,0,2,210,0,0,172,18,71,0,1,204,1,0,85,210,204,0,119,0,34,0,141,210,192,8,78,204,210,0,143,204,165,1,141,210,145,9,1,208,96,2,3,210,210,208,106,204,210,4,143,204,166,1,141,210,165,1,19,210,210,200,0,204,210,0,143,204,127,1,141,210,165,1,0,204,210,0,143,204,198,8,141,210,166,1,0,204,210,0,143,204,200,8,1,204,217,0,143,204,144,9,119,0,13,0,141,210,193,8,19,210,210,200,0,204,210,0,143,204,127,1,141,210,193,8,0,204,210,0,143,204,198,8,141,210,195,8,0,204,210,0,143,204,200,8,1,204,217,0,143,204,144,9,141,204,144,9,1,210,217,0,45,204,204,210,216,71,0,0,141,210,198,8,41,210,210,24,42,210,210,24,34,204,210,0,143,204,199,8,141,210,199,8,141,208,200,8,141,211,127,1,125,204,210,208,211,0,0,0,143,204,201,8,141,204,201,8,32,204,204,6,121,204,40,0,141,211,145,9,1,208,96,2,3,211,211,208,1,208,0,0,1,210,255,255,2,209,0,0,189,37,21,0,1,207,6,0,135,204,44,0,211,208,210,209,207,0,0,0,143,204,202,8,141,204,202,8,32,204,204,0,121,204,6,0,2,204,0,0,172,18,71,0,1,207,3,0,85,204,207,0,119,0,126,0,141,204,192,8,78,207,204,0,143,207,167,1,141,204,145,9,1,209,96,2,3,204,204,209,106,207,204,4,143,207,168,1,141,204,167,1,19,204,204,200,0,207,204,0,143,207,128,1,141,204,167,1,0,207,204,0,143,207,203,8,141,204,168,1,0,207,204,0,143,207,205,8,119,0,10,0,141,204,127,1,0,207,204,0,143,207,128,1,141,204,198,8,0,207,204,0,143,207,203,8,141,204,200,8,0,207,204,0,143,207,205,8,141,204,203,8,41,204,204,24,42,204,204,24,34,207,204,0,143,207,204,8,141,204,204,8,141,209,205,8,141,210,128,1,125,207,204,209,210,0,0,0,143,207,206,8,141,207,206,8,32,207,207,11,121,207,40,0,141,210,145,9,1,209,96,2,3,210,210,209,1,209,0,0,1,204,255,255,2,208,0,0,177,37,21,0,1,211,11,0,135,207,44,0,210,209,204,208,211,0,0,0,143,207,207,8,141,207,207,8,32,207,207,0,121,207,6,0,2,207,0,0,172,18,71,0,1,211,2,0,85,207,211,0,119,0,64,0,141,207,192,8,78,211,207,0,143,211,169,1,141,207,145,9,1,208,96,2,3,207,207,208,106,211,207,4,143,211,170,1,141,207,169,1,19,207,207,200,0,211,207,0,143,211,129,1,141,207,169,1,0,211,207,0,143,211,209,8,141,207,170,1,0,211,207,0,143,211,211,8,119,0,10,0,141,207,128,1,0,211,207,0,143,211,129,1,141,207,203,8,0,211,207,0,143,211,209,8,141,207,205,8,0,211,207,0,143,211,211,8,141,207,209,8,41,207,207,24,42,207,207,24,34,211,207,0,143,211,210,8,141,207,210,8,141,208,211,8,141,204,129,1,125,211,207,208,204,0,0,0,143,211,212,8,141,211,212,8,32,211,211,5,120,211,2,0,119,0,21,0,141,204,145,9,1,208,96,2,3,204,204,208,1,208,0,0,1,207,255,255,2,209,0,0,203,37,21,0,1,210,5,0,135,211,44,0,204,208,207,209,210,0,0,0,143,211,213,8,141,211,213,8,32,211,211,0,120,211,2,0,119,0,5,0,2,211,0,0,172,18,71,0,1,210,0,0,85,211,210,0,2,211,0,0,76,18,71,0,78,210,211,0,143,210,214,8,141,210,214,8,41,210,210,24,42,210,210,24,32,210,210,0,120,210,11,0,2,211,0,0,162,18,71,0,78,210,211,0,143,210,215,8,141,211,215,8,41,211,211,24,42,211,211,24,32,211,211,0,135,210,52,0,211,0,0,0,141,211,145,9,1,209,120,2,3,211,211,209,25,210,211,11,143,210,216,8,141,211,216,8,78,210,211,0,143,210,217,8,141,211,145,9,1,209,120,2,3,211,211,209,106,210,211,4,143,210,218,8,141,209,217,8,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,218,8,0,211,209,0,119,0,4,0,141,209,217,8,19,209,209,200,0,211,209,0,0,210,211,0,143,210,219,8,141,210,219,8,32,210,210,7,121,210,40,0,141,211,145,9,1,209,120,2,3,211,211,209,1,209,0,0,1,207,255,255,2,208,0,0,37,63,22,0,1,204,7,0,135,210,44,0,211,209,207,208,204,0,0,0,143,210,220,8,141,210,220,8,32,210,210,0,121,210,4,0,1,210,0,0,143,210,176,1,119,0,34,0,141,204,216,8,78,210,204,0,143,210,171,1,141,204,145,9,1,208,120,2,3,204,204,208,106,210,204,4,143,210,172,1,141,204,171,1,19,204,204,200,0,210,204,0,143,210,125,1,141,204,171,1,0,210,204,0,143,210,222,8,141,204,172,1,0,210,204,0,143,210,224,8,1,210,233,0,143,210,144,9,119,0,13,0,141,204,217,8,19,204,204,200,0,210,204,0,143,210,125,1,141,204,217,8,0,210,204,0,143,210,222,8,141,204,218,8,0,210,204,0,143,210,224,8,1,210,233,0,143,210,144,9,141,210,144,9,1,204,233,0,45,210,210,204,144,75,0,0,141,204,222,8,41,204,204,24,42,204,204,24,34,210,204,0,143,210,223,8,141,204,223,8,141,208,224,8,141,207,125,1,125,210,204,208,207,0,0,0,143,210,225,8,141,210,225,8,32,210,210,5,121,210,38,0,141,207,145,9,1,208,120,2,3,207,207,208,1,208,0,0,1,204,255,255,2,209,0,0,228,37,21,0,1,211,5,0,135,210,44,0,207,208,204,209,211,0,0,0,143,210,226,8,141,210,226,8,32,210,210,0,121,210,4,0,1,210,0,0,143,210,176,1,119,0,104,0,141,211,216,8,78,210,211,0,143,210,173,1,141,211,145,9,1,209,120,2,3,211,211,209,106,210,211,4,143,210,174,1,141,211,173,1,19,211,211,200,0,210,211,0,143,210,126,1,141,211,173,1,0,210,211,0,143,210,227,8,141,211,174,1,0,210,211,0,143,210,229,8,119,0,10,0,141,211,125,1,0,210,211,0,143,210,126,1,141,211,222,8,0,210,211,0,143,210,227,8,141,211,224,8,0,210,211,0,143,210,229,8,141,211,227,8,41,211,211,24,42,211,211,24,34,210,211,0,143,210,228,8,141,211,228,8,141,209,229,8,141,204,126,1,125,210,211,209,204,0,0,0,143,210,230,8,141,210,230,8,32,210,210,7,121,210,26,0,141,204,145,9,1,209,120,2,3,204,204,209,1,209,0,0,1,211,255,255,2,208,0,0,220,37,21,0,1,207,7,0,135,210,44,0,204,209,211,208,207,0,0,0,143,210,231,8,141,210,231,8,32,210,210,0,121,210,4,0,1,210,1,0,143,210,176,1,119,0,44,0,141,207,216,8,78,210,207,0,143,210,175,1,141,207,175,1,0,210,207,0,143,210,232,8,119,0,4,0,141,207,227,8,0,210,207,0,143,210,232,8,141,207,232,8,41,207,207,24,42,207,207,24,34,210,207,0,143,210,233,8,141,207,145,9,1,208,120,2,94,210,207,208,143,210,234,8,141,208,233,8,121,208,4,0,141,208,234,8,0,207,208,0,119,0,5,0,141,208,145,9,1,211,120,2,3,208,208,211,0,207,208,0,0,210,207,0,143,210,235,8,141,210,145,9,1,207,16,3,141,208,235,8,97,210,207,208,2,207,0,0,184,57,21,0,141,210,145,9,1,211,16,3,3,210,210,211,135,208,24,0,207,210,0,0,1,208,0,0,143,208,176,1,2,208,0,0,88,18,71,0,141,210,176,1,85,208,210,0,141,210,145,9,1,208,80,2,1,207,0,0,97,210,208,207,141,207,145,9,1,208,80,2,3,207,207,208,1,208,0,0,109,207,4,208,141,208,145,9,1,207,80,2,3,208,208,207,1,207,0,0,109,208,8,207,141,207,145,9,1,208,80,2,3,207,207,208,1,208,8,0,107,207,11,208,141,208,145,9,1,207,80,2,2,210,0,0,111,118,101,114,97,208,207,210,141,210,145,9,1,207,80,2,3,210,210,207,2,207,0,0,115,99,97,110,109,210,4,207,141,207,145,9,1,210,80,2,3,207,207,210,1,210,0,0,107,207,8,210,141,207,84,5,141,208,145,9,1,211,80,2,3,208,208,211,135,210,51,0,207,208,0,0,143,210,237,8,2,210,0,0,180,82,71,0,141,208,237,8,85,210,208,0,141,210,145,9,1,207,80,2,3,210,210,207,102,208,210,11,143,208,238,8,141,208,238,8,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,207,80,2,94,208,210,207,143,208,239,8,141,210,239,8,135,208,21,0,210,0,0,0,1,210,128,2,1,207,144,1,1,211,0,0,135,208,53,0,210,207,211,0,143,208,240,8,141,208,240,8,1,211,0,0,45,208,208,211,248,76,0,0,135,208,30,0,143,208,242,8,141,208,145,9,1,211,24,3,141,207,242,8,97,208,211,207,2,211,0,0,244,57,21,0,141,208,145,9,1,210,24,3,3,208,208,210,135,207,31,0,211,208,0,0,2,208,0,0,124,18,71,0,82,207,208,0,143,207,243,8,141,208,243,8,135,207,54,0,208,0,0,0,143,207,244,8,2,207,0,0,120,18,71,0,141,208,244,8,85,207,208,0,2,207,0,0,124,18,71,0,82,208,207,0,143,208,245,8,141,207,245,8,135,208,55,0,207,0,0,0,143,208,246,8,2,208,0,0,72,18,71,0,141,207,246,8,85,208,207,0,141,208,246,8,135,207,56,0,208,0,0,0,143,207,247,8,141,207,145,9,1,208,32,3,141,211,247,8,97,207,208,211,2,208,0,0,19,58,21,0,141,207,145,9,1,210,32,3,3,207,207,210,135,211,24,0,208,207,0,0,2,207,0,0,72,18,71,0,82,211,207,0,143,211,248,8,141,211,248,8,32,211,211,0,141,207,248,8,2,208,0,0,0,0,0,240,19,207,207,208,2,208,0,0,0,0,0,16,13,207,207,208,20,211,211,207,121,211,6,0,141,207,248,8,19,207,207,200,0,211,207,0,143,211,251,8,119,0,43,0,141,211,248,8,2,207,0,0,89,86,89,85,47,211,211,207,32,78,0,0,141,211,248,8,2,207,0,0,89,85,89,50,1,208,1,0,138,211,207,208,28,78,0,0,1,207,1,0,143,207,251,8,119,0,29,0,119,0,26,0,141,211,248,8,2,207,0,0,85,89,86,89,47,211,211,207,92,78,0,0,141,211,248,8,2,207,0,0,89,86,89,85,1,208,1,0,138,211,207,208,88,78,0,0,1,207,1,0,143,207,251,8,119,0,14,0,119,0,11,0,141,211,248,8,2,207,0,0,85,89,86,89,1,208,1,0,138,211,207,208,128,78,0,0,1,207,1,0,143,207,251,8,119,0,4,0,119,0,1,0,1,211,2,0,143,211,251,8,141,207,251,8,41,207,207,3,0,211,207,0,143,211,250,8,2,211,0,0,70,18,71,0,141,207,250,8,19,207,207,200,83,211,207,0,141,207,248,8,2,211,0,0,0,255,0,0,19,207,207,211,1,211,0,24,45,207,207,211,232,78,0,0,2,211,0,0,55,58,21,0,141,208,145,9,1,210,48,3,3,208,208,210,135,207,24,0,211,208,0,0,135,207,57,0,2,208,0,0,2,18,71,0,78,207,208,0,143,207,252,8,141,207,252,8,41,207,207,24,42,207,207,24,32,207,207,0,120,207,4,0,1,208,0,0,135,207,58,0,208,0,0,0,2,207,0,0,1,18,71,0,1,208,0,0,83,207,208,0,2,207,0,0,124,18,71,0,82,208,207,0,143,208,253,8,141,207,253,8,2,211,0,0,223,238,21,0,135,208,59,0,207,211,0,0,1,211,38,4,1,207,31,0,1,210,8,0,2,209,0,0,120,58,21,0,2,204,0,0,126,58,21,0,141,205,145,9,1,203,176,0,3,205,205,203,135,208,60,0,211,207,210,209,204,205,0,0,141,205,145,9,1,204,176,0,94,208,205,204,143,208,254,8,141,208,145,9,1,205,32,3,1,204,0,0,97,208,205,204,141,204,145,9,1,205,32,3,3,204,204,205,1,205,0,0,109,204,4,205,141,205,145,9,1,204,32,3,3,205,205,204,1,204,0,0,109,205,8,204,1,205,32,0,135,204,26,0,205,0,0,0,143,204,0,9,141,204,145,9,1,205,32,3,141,208,0,9,97,204,205,208,141,208,145,9,1,205,32,3,3,208,208,205,2,205,0,0,32,0,0,128], eb + 10240);
  HEAPU8.set([109,208,8,205,141,205,145,9,1,208,32,3,3,205,205,208,1,208,18,0,109,205,4,208,141,205,0,9,0,208,205,0,143,208,143,9,2,208,0,0,132,58,21,0,143,208,146,9,141,205,143,9,25,208,205,18,143,208,147,9,141,208,143,9,141,205,146,9,78,205,205,0,83,208,205,0,141,208,143,9,25,205,208,1,143,205,143,9,141,208,146,9,25,205,208,1,143,205,146,9,141,205,143,9,141,208,147,9,54,205,205,208,60,80,0,0,141,205,0,9,1,208,0,0,107,205,18,208,141,205,254,8,106,208,205,56,143,208,1,9,141,208,1,9,34,208,208,2,121,208,94,0,141,205,254,8,25,205,205,12,102,208,205,11,143,208,2,9,141,205,254,8,106,208,205,16,143,208,3,9,141,204,2,9,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,3,9,0,205,204,0,119,0,4,0,141,204,2,9,19,204,204,200,0,205,204,0,0,208,205,0,143,208,4,9,141,208,4,9,32,208,208,18,121,208,64,0,141,205,254,8,106,208,205,12,143,208,5,9,141,208,2,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,11,0,141,205,5,9,141,204,0,9,1,209,18,0,135,208,61,0,205,204,209,0,143,208,11,9,141,208,11,9,32,208,208,0,121,208,47,0,119,0,53,0,141,208,5,9,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,82,120,208,2,0,119,0,39,0,141,208,254,8,25,28,208,12,141,208,2,9,19,208,208,200,0,100,208,0,141,208,0,9,0,173,208,0,26,208,100,1,143,208,7,9,25,208,28,1,143,208,8,9,141,208,7,9,32,208,208,0,120,208,32,0,25,208,173,1,143,208,9,9,141,209,8,9,78,208,209,0,143,208,53,1,141,209,9,9,78,208,209,0,143,208,10,9,141,208,53,1,41,208,208,24,42,208,208,24,141,209,10,9,41,209,209,24,42,209,209,24,45,208,208,209,236,81,0,0,141,208,8,9,0,28,208,0,141,208,7,9,0,100,208,0,141,208,9,9,0,173,208,0,119,0,227,255,119,0,1,0,141,209,254,8,102,208,209,60,143,208,12,9,141,208,254,8,141,209,12,9,39,209,209,1,107,208,60,209,141,208,254,8,25,208,208,12,141,204,145,9,1,205,32,3,3,204,204,205,135,209,62,0,208,204,0,0,141,204,145,9,1,208,32,3,3,204,204,208,102,209,204,11,143,209,14,9,141,209,14,9,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,204,145,9,1,208,32,3,94,209,204,208,143,209,15,9,141,204,15,9,135,209,21,0,204,0,0,0,1,204,39,4,1,208,9,0,1,205,1,0,2,210,0,0,151,58,21,0,2,207,0,0,160,58,21,0,141,211,145,9,1,203,176,0,3,211,211,203,135,209,60,0,204,208,205,210,207,211,0,0,141,211,145,9,1,207,176,0,94,209,211,207,143,209,16,9,141,209,145,9,1,211,32,3,1,207,0,0,97,209,211,207,141,207,145,9,1,211,32,3,3,207,207,211,1,211,0,0,109,207,4,211,141,211,145,9,1,207,32,3,3,211,211,207,1,207,0,0,109,211,8,207,141,207,145,9,1,211,32,3,3,207,207,211,1,211,4,0,107,207,11,211,141,211,145,9,1,207,32,3,2,209,0,0,81,117,105,116,97,211,207,209,141,209,145,9,1,207,32,3,3,209,209,207,1,207,0,0,107,209,4,207,141,209,16,9,106,207,209,56,143,207,17,9,141,207,17,9,34,207,207,2,121,207,100,0,141,209,16,9,25,209,209,12,102,207,209,11,143,207,19,9,141,209,16,9,106,207,209,16,143,207,20,9,141,211,19,9,41,211,211,24,42,211,211,24,34,211,211,0,121,211,4,0,141,211,20,9,0,209,211,0,119,0,4,0,141,211,19,9,19,211,211,200,0,209,211,0,0,207,209,0,143,207,21,9,141,207,21,9,32,207,207,4,121,207,70,0,141,209,16,9,106,207,209,12,143,207,22,9,141,207,19,9,41,207,207,24,42,207,207,24,34,207,207,0,121,207,13,0,141,209,22,9,141,211,145,9,1,210,32,3,3,211,211,210,1,210,4,0,135,207,61,0,209,211,210,0,143,207,27,9,141,207,27,9,32,207,207,0,121,207,51,0,119,0,57,0,141,207,22,9,19,207,207,200,41,207,207,24,42,207,207,24,32,207,207,81,120,207,2,0,119,0,43,0,141,207,16,9,25,78,207,12,141,207,19,9,19,207,207,200,0,150,207,0,141,210,145,9,1,211,32,3,3,207,210,211,143,207,23,1,26,207,150,1,143,207,23,9,25,207,78,1,143,207,24,9,141,207,23,9,32,207,207,0,120,207,34,0,141,211,23,1,25,207,211,1,143,207,25,9,141,211,24,9,78,207,211,0,143,207,103,1,141,211,25,9,78,207,211,0,143,207,26,9,141,207,103,1,41,207,207,24,42,207,207,24,141,211,26,9,41,211,211,24,42,211,211,24,45,207,207,211,168,84,0,0,141,207,24,9,0,78,207,0,141,207,23,9,0,150,207,0,141,211,25,9,0,207,211,0,143,207,23,1,119,0,225,255,119,0,1,0,141,211,16,9,102,207,211,60,143,207,29,9,141,207,16,9,141,211,29,9,39,211,211,1,107,207,60,211,141,207,16,9,25,207,207,12,141,210,145,9,1,209,32,3,3,210,210,209,135,211,62,0,207,210,0,0,141,210,145,9,1,207,32,3,3,210,210,207,102,211,210,11,143,211,30,9,141,211,30,9,41,211,211,24,42,211,211,24,34,211,211,0,121,211,8,0,141,210,145,9,1,207,32,3,94,211,210,207,143,211,31,9,141,210,31,9,135,211,21,0,210,0,0,0,1,210,40,4,1,207,10,0,1,209,1,0,2,205,0,0,169,58,21,0,2,208,0,0,178,58,21,0,141,204,145,9,1,203,176,0,3,204,204,203,135,211,60,0,210,207,209,205,208,204,0,0,141,204,145,9,1,208,176,0,94,211,204,208,143,211,32,9,141,211,145,9,1,204,32,3,1,208,0,0,97,211,204,208,141,208,145,9,1,204,32,3,3,208,208,204,1,204,0,0,109,208,4,204,141,204,145,9,1,208,32,3,3,204,204,208,1,208,0,0,109,204,8,208,1,204,16,0,135,208,26,0,204,0,0,0,143,208,33,9,141,208,145,9,1,204,32,3,141,211,33,9,97,208,204,211,141,211,145,9,1,204,32,3,3,211,211,204,2,204,0,0,16,0,0,128,109,211,8,204,141,204,145,9,1,211,32,3,3,204,204,211,1,211,13,0,109,204,4,211,141,204,33,9,0,211,204,0,143,211,143,9,2,211,0,0,188,58,21,0,143,211,146,9,141,204,143,9,25,211,204,13,143,211,147,9,141,211,143,9,141,204,146,9,78,204,204,0,83,211,204,0,141,211,143,9,25,204,211,1,143,204,143,9,141,211,146,9,25,204,211,1,143,204,146,9,141,204,143,9,141,211,147,9,54,204,204,211,20,86,0,0,141,204,33,9,1,211,0,0,107,204,13,211,141,204,32,9,106,211,204,56,143,211,35,9,141,211,35,9,34,211,211,2,121,211,97,0,141,204,32,9,25,204,204,12,102,211,204,11,143,211,36,9,141,204,32,9,106,211,204,16,143,211,37,9,141,208,36,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,37,9,0,204,208,0,119,0,4,0,141,208,36,9,19,208,208,200,0,204,208,0,0,211,204,0,143,211,38,9,141,211,38,9,32,211,211,13,121,211,67,0,141,204,32,9,106,211,204,12,143,211,39,9,141,211,36,9,41,211,211,24,42,211,211,24,34,211,211,0,121,211,11,0,141,204,39,9,141,208,33,9,1,205,13,0,135,211,61,0,204,208,205,0,143,211,45,9,141,211,45,9,32,211,211,0,121,211,50,0,119,0,56,0,141,211,39,9,19,211,211,200,41,211,211,24,42,211,211,24,32,211,211,67,120,211,2,0,119,0,42,0,141,211,32,9,25,79,211,12,141,211,36,9,19,211,211,200,0,151,211,0,141,205,33,9,0,211,205,0,143,211,24,1,26,211,151,1,143,211,40,9,25,211,79,1,143,211,41,9,141,211,40,9,32,211,211,0,120,211,34,0,141,205,24,1,25,211,205,1,143,211,43,9,141,205,41,9,78,211,205,0,143,211,104,1,141,205,43,9,78,211,205,0,143,211,44,9,141,211,104,1,41,211,211,24,42,211,211,24,141,205,44,9,41,205,205,24,42,205,205,24,45,211,211,205,208,87,0,0,141,211,41,9,0,79,211,0,141,211,40,9,0,151,211,0,141,205,43,9,0,211,205,0,143,211,24,1,119,0,225,255,119,0,1,0,141,205,32,9,102,211,205,60,143,211,46,9,141,211,32,9,141,205,46,9,39,205,205,1,107,211,60,205,141,211,32,9,25,211,211,12,141,208,145,9,1,204,32,3,3,208,208,204,135,205,62,0,211,208,0,0,141,208,145,9,1,211,32,3,3,208,208,211,102,205,208,11,143,205,47,9,141,205,47,9,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,208,145,9,1,211,32,3,94,205,208,211,143,205,49,9,141,208,49,9,135,205,21,0,208,0,0,0,1,208,41,4,1,211,29,0,1,204,8,0,2,209,0,0,202,58,21,0,2,207,0,0,210,58,21,0,141,210,145,9,1,203,176,0,3,210,210,203,135,205,60,0,208,211,204,209,207,210,0,0,141,210,145,9,1,207,176,0,94,205,210,207,143,205,50,9,141,205,145,9,1,210,32,3,1,207,0,0,97,205,210,207,141,207,145,9,1,210,32,3,3,207,207,210,1,210,0,0,109,207,4,210,141,210,145,9,1,207,32,3,3,210,210,207,1,207,0,0,109,210,8,207,1,210,32,0,135,207,26,0,210,0,0,0,143,207,51,9,141,207,145,9,1,210,32,3,141,205,51,9,97,207,210,205,141,205,145,9,1,210,32,3,3,205,205,210,2,210,0,0,32,0,0,128,109,205,8,210,141,210,145,9,1,205,32,3,3,210,210,205,1,205,17,0,109,210,4,205,141,210,51,9,0,205,210,0,143,205,143,9,2,205,0,0,221,58,21,0,143,205,146,9,141,210,143,9,25,205,210,17,143,205,147,9,141,205,143,9,141,210,146,9,78,210,210,0,83,205,210,0,141,205,143,9,25,210,205,1,143,210,143,9,141,205,146,9,25,210,205,1,143,210,146,9,141,210,143,9,141,205,147,9,54,210,210,205,60,89,0,0,141,210,51,9,1,205,0,0,107,210,17,205,141,210,50,9,106,205,210,56,143,205,52,9,141,205,52,9,34,205,205,2,121,205,97,0,141,210,50,9,25,210,210,12,102,205,210,11,143,205,54,9,141,210,50,9,106,205,210,16,143,205,55,9,141,207,54,9,41,207,207,24,42,207,207,24,34,207,207,0,121,207,4,0,141,207,55,9,0,210,207,0,119,0,4,0,141,207,54,9,19,207,207,200,0,210,207,0,0,205,210,0,143,205,56,9,141,205,56,9,32,205,205,17,121,205,67,0,141,210,50,9,106,205,210,12,143,205,57,9,141,205,54,9,41,205,205,24,42,205,205,24,34,205,205,0,121,205,11,0,141,210,57,9,141,207,51,9,1,209,17,0,135,205,61,0,210,207,209,0,143,205,63,9,141,205,63,9,32,205,205,0,121,205,50,0,119,0,56,0,141,205,57,9,19,205,205,200,41,205,205,24,42,205,205,24,32,205,205,84,120,205,2,0,119,0,42,0,141,205,50,9,25,80,205,12,141,205,54,9,19,205,205,200,0,152,205,0,141,209,51,9,0,205,209,0,143,205,25,1,26,205,152,1,143,205,59,9,25,205,80,1,143,205,60,9,141,205,59,9,32,205,205,0,120,205,34,0,141,209,25,1,25,205,209,1,143,205,61,9,141,209,60,9,78,205,209,0,143,205,105,1,141,209,61,9,78,205,209,0,143,205,62,9,141,205,105,1,41,205,205,24,42,205,205,24,141,209,62,9,41,209,209,24,42,209,209,24,45,205,205,209,248,90,0,0,141,205,60,9,0,80,205,0,141,205,59,9,0,152,205,0,141,209,61,9,0,205,209,0,143,205,25,1,119,0,225,255,119,0,1,0,141,209,50,9,102,205,209,60,143,205,64,9,141,205,50,9,141,209,64,9,39,209,209,1,107,205,60,209,141,205,50,9,25,205,205,12,141,207,145,9,1,210,32,3,3,207,207,210,135,209,62,0,205,207,0,0,141,207,145,9,1,205,32,3,3,207,207,205,102,209,207,11,143,209,65,9,141,209,65,9,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,207,145,9,1,205,32,3,94,209,207,205,143,209,66,9,141,207,66,9,135,209,21,0,207,0,0,0,1,207,42,4,1,205,0,0,1,210,0,0,2,204,0,0,239,58,21,0,2,211,0,0,247,58,21,0,141,208,145,9,1,203,176,0,3,208,208,203,135,209,60,0,207,205,210,204,211,208,0,0,141,208,145,9,1,211,176,0,94,209,208,211,143,209,67,9,141,209,145,9,1,208,32,3,1,211,0,0,97,209,208,211,141,211,145,9,1,208,32,3,3,211,211,208,1,208,0,0,109,211,4,208,141,208,145,9,1,211,32,3,3,208,208,211,1,211,0,0,109,208,8,211,1,208,32,0,135,211,26,0,208,0,0,0,143,211,68,9,141,211,145,9,1,208,32,3,141,209,68,9,97,211,208,209,141,209,145,9,1,208,32,3,3,209,209,208,2,208,0,0,32,0,0,128,109,209,8,208,141,208,145,9,1,209,32,3,3,208,208,209,1,209,16,0,109,208,4,209,141,208,68,9,0,209,208,0,143,209,143,9,2,209,0,0,255,58,21,0,143,209,146,9,141,208,143,9,25,209,208,16,143,209,147,9,141,209,143,9,141,208,146,9,78,208,208,0,83,209,208,0,141,209,143,9,25,208,209,1,143,208,143,9,141,209,146,9,25,208,209,1,143,208,146,9,141,208,143,9,141,209,147,9,54,208,208,209,100,92,0,0,141,208,68,9,1,209,0,0,107,208,16,209,141,208,67,9,106,209,208,56,143,209,70,9,141,209,70,9,34,209,209,2,121,209,97,0,141,208,67,9,25,208,208,12,102,209,208,11,143,209,71,9,141,208,67,9,106,209,208,16,143,209,72,9,141,211,71,9,41,211,211,24,42,211,211,24,34,211,211,0,121,211,4,0,141,211,72,9,0,208,211,0,119,0,4,0,141,211,71,9,19,211,211,200,0,208,211,0,0,209,208,0,143,209,74,9,141,209,74,9,32,209,209,16,121,209,67,0,141,208,67,9,106,209,208,12,143,209,75,9,141,209,71,9,41,209,209,24,42,209,209,24,34,209,209,0,121,209,11,0,141,208,75,9,141,211,68,9,1,204,16,0,135,209,61,0,208,211,204,0,143,209,81,9,141,209,81,9,32,209,209,0,121,209,50,0,119,0,56,0,141,209,75,9,19,209,209,200,41,209,209,24,42,209,209,24,32,209,209,82,120,209,2,0,119,0,42,0,141,209,67,9,25,81,209,12,141,209,71,9,19,209,209,200,0,153,209,0,141,204,68,9,0,209,204,0,143,209,26,1,26,209,153,1,143,209,76,9,25,209,81,1,143,209,77,9,141,209,76,9,32,209,209,0,120,209,34,0,141,204,26,1,25,209,204,1,143,209,79,9,141,204,77,9,78,209,204,0,143,209,106,1,141,204,79,9,78,209,204,0,143,209,80,9,141,209,106,1,41,209,209,24,42,209,209,24,141,204,80,9,41,204,204,24,42,204,204,24,45,209,209,204,32,94,0,0,141,209,77,9,0,81,209,0,141,209,76,9,0,153,209,0,141,204,79,9,0,209,204,0,143,209,26,1,119,0,225,255,119,0,1,0,141,204,67,9,102,209,204,60,143,209,82,9,141,209,67,9,141,204,82,9,39,204,204,1,107,209,60,204,141,209,67,9,25,209,209,12,141,211,145,9,1,208,32,3,3,211,211,208,135,204,62,0,209,211,0,0,141,211,145,9,1,209,32,3,3,211,211,209,102,204,211,11,143,204,83,9,141,204,83,9,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,211,145,9,1,209,32,3,94,204,211,209,143,204,85,9,141,211,85,9,135,204,21,0,211,0,0,0,1,211,43,4,1,209,0,0,1,208,0,0,2,210,0,0,16,59,21,0,2,205,0,0,22,59,21,0,1,207,0,0,135,204,60,0,211,209,208,210,205,207,0,0,1,207,44,4,1,205,20,0,1,210,2,0,2,208,0,0,50,73,21,0,2,209,0,0,194,121,22,0,1,211,0,0,135,204,60,0,207,205,210,208,209,211,0,0,1,211,45,4,1,209,1,0,1,208,8,0,2,210,0,0,38,59,21,0,2,205,0,0,52,59,21,0,141,207,145,9,1,203,176,0,3,207,207,203,135,204,60,0,211,209,208,210,205,207,0,0,141,207,145,9,1,205,176,0,94,204,207,205,143,204,86,9,141,204,145,9,1,207,32,3,1,205,0,0,97,204,207,205,141,205,145,9,1,207,32,3,3,205,205,207,1,207,0,0,109,205,4,207,141,207,145,9,1,205,32,3,3,207,207,205,1,205,0,0,109,207,8,205,1,207,32,0,135,205,26,0,207,0,0,0,143,205,87,9,141,205,145,9,1,207,32,3,141,204,87,9,97,205,207,204,141,204,145,9,1,207,32,3,3,204,204,207,2,207,0,0,32,0,0,128,109,204,8,207,141,207,145,9,1,204,32,3,3,207,207,204,1,204,25,0,109,207,4,204,141,207,87,9,0,204,207,0,143,204,143,9,2,204,0,0,63,59,21,0,143,204,146,9,141,207,143,9,25,204,207,25,143,204,147,9,141,204,143,9,141,207,146,9,78,207,207,0,83,204,207,0,141,204,143,9,25,207,204,1,143,207,143,9,141,204,146,9,25,207,204,1,143,207,146,9,141,207,143,9,141,204,147,9,54,207,207,204,228,95,0,0,141,207,87,9,1,204,0,0,107,207,25,204,141,207,86,9,106,204,207,56,143,204,88,9,141,204,88,9,34,204,204,2,121,204,97,0,141,207,86,9,25,207,207,12,102,204,207,11,143,204,90,9,141,207,86,9,106,204,207,16,143,204,91,9,141,205,90,9,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,91,9,0,207,205,0,119,0,4,0,141,205,90,9,19,205,205,200,0,207,205,0,0,204,207,0,143,204,92,9,141,204,92,9,32,204,204,25,121,204,67,0,141,207,86,9,106,204,207,12,143,204,93,9,141,204,90,9,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,207,93,9,141,205,87,9,1,210,25,0,135,204,61,0,207,205,210,0,143,204,99,9,141,204,99,9,32,204,204,0,121,204,50,0,119,0,56,0,141,204,93,9,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,83,120,204,2,0,119,0,42,0,141,204,86,9,25,82,204,12,141,204,90,9,19,204,204,200,0,154,204,0,141,210,87,9,0,204,210,0,143,204,27,1,26,204,154,1,143,204,95,9,25,204,82,1,143,204,96,9,141,204,95,9,32,204,204,0,120,204,34,0,141,210,27,1,25,204,210,1,143,204,97,9,141,210,96,9,78,204,210,0,143,204,107,1,141,210,97,9,78,204,210,0,143,204,98,9,141,204,107,1,41,204,204,24,42,204,204,24,141,210,98,9,41,210,210,24,42,210,210,24,45,204,204,210,160,97,0,0,141,204,96,9,0,82,204,0,141,204,95,9,0,154,204,0,141,210,97,9,0,204,210,0,143,204,27,1,119,0,225,255,119,0,1,0,141,210,86,9,102,204,210,60,143,204,100,9,141,204,86,9,141,210,100,9,39,210,210,1,107,204,60,210,141,204,86,9,25,204,204,12,141,205,145,9,1,207,32,3,3,205,205,207,135,210,62,0,204,205,0,0,141,205,145,9,1,204,32,3,3,205,205,204,102,210,205,11,143,210,101,9,141,210,101,9,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,205,145,9,1,204,32,3,94,210,205,204,143,210,102,9,141,205,102,9,135,210,21,0,205,0,0,0,1,205,46,4,1,204,2,0,1,207,8,0,2,208,0,0,89,59,21,0,2,209,0,0,103,59,21,0,141,211,145,9,1,203,176,0,3,211,211,203,135,210,60,0,205,204,207,208,209,211,0,0,141,211,145,9,1,209,176,0,94,210,211,209,143,210,103,9,141,210,145,9,1,211,32,3,1,209,0,0,97,210,211,209,141,209,145,9,1,211,32,3,3,209,209,211,1,211,0,0,109,209,4,211,141,211,145,9,1,209,32,3,3,211,211,209,1,209,0,0,109,211,8,209,1,211,32,0,135,209,26,0,211,0,0,0,143,209,104,9,141,209,145,9,1,211,32,3,141,210,104,9,97,209,211,210,141,210,145,9,1,211,32,3,3,210,210,211,2,211,0,0,32,0,0,128,109,210,8,211,141,211,145,9,1,210,32,3,3,211,211,210,1,210,25,0,109,211,4,210,141,211,104,9,0,210,211,0,143,210,143,9,2,210,0,0,114,59,21,0,143,210,146,9,141,211,143,9,25,210,211,25,143,210,147,9,141,210,143,9,141,211,146,9,78,211,211,0,83,210,211,0,141,210,143,9,25,211,210,1,143,211,143,9,141,210,146,9,25,211,210,1,143,211,146,9,141,211,143,9,141,210,147,9,54,211,211,210,12,99,0,0,141,211,104,9,1,210,0,0,107,211,25,210,141,211,103,9,106,210,211,56,143,210,106,9,141,210,106,9,34,210,210,2,121,210,97,0,141,211,103,9,25,211,211,12,102,210,211,11,143,210,107,9,141,211,103,9,106,210,211,16,143,210,108,9,141,209,107,9,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,108,9,0,211,209,0,119,0,4,0,141,209,107,9,19,209,209,200,0,211,209,0,0,210,211,0,143,210,109,9,141,210,109,9,32,210,210,25,121,210,67,0,141,211,103,9,106,210,211,12,143,210,110,9,141,210,107,9,41,210,210,24,42,210,210,24,34,210,210,0,121,210,11,0,141,211,110,9,141,209,104,9,1,208,25,0,135,210,61,0,211,209,208,0,143,210,115,9,141,210,115,9,32,210,210,0,121,210,50,0,119,0,56,0,141,210,110,9,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,76,120,210,2,0,119,0,42,0,141,210,103,9,25,83,210,12,141,210,107,9,19,210,210,200,0,155,210,0,141,208,104,9,0,210,208,0,143,210,28,1,26,210,155,1,143,210,111,9,25,210,83,1,143,210,112,9,141,210,111,9,32,210,210,0,120,210,34,0,141,208,28,1,25,210,208,1,143,210,113,9,141,208,112,9,78,210,208,0,143,210,108,1,141,208,113,9,78,210,208,0,143,210,114,9,141,210,108,1,41,210,210,24,42,210,210,24,141,208,114,9,41,208,208,24,42,208,208,24,45,210,210,208,200,100,0,0,141,210,112,9,0,83,210,0,141,210,111,9,0,155,210,0,141,208,113,9,0,210,208,0,143,210,28,1,119,0,225,255,119,0,1,0,141,208,103,9,102,210,208,60,143,210,116,9,141,210,103,9,141,208,116,9,39,208,208,1,107,210,60,208,141,210,103,9,25,210,210,12,141,209,145,9,1,211,32,3,3,209,209,211,135,208,62,0,210,209,0,0,141,209,145,9,1,210,32,3,3,209,209,210,102,208,209,11,143,208,117,9,141,208,117,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,210,32,3,94,208,209,210,143,208,119,9,141,209,119,9,135,208,21,0,209,0,0,0,135,208,63,0,143,208,120,9,141,208,120,9,1,209,0,16,19,208,208,209,32,208,208,0,120,208,5,0,2,208,0,0,6,224,53,2,1,209,1,0,83,208,209,0,141,209,120,9,1,208,0,32,19,209,209,208,32,209,209,0,120,209,5,0,2,209,0,0,7,224,53,2,1,208,1,0,83,209,208,0,141,209,192,8,78,208,209,0,143,208,121,9,141,208,121,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,210,96,2,94,208,209,210,143,208,122,9,141,209,122,9,135,208,21,0,209,0,0,0,141,209,216,8,78,208,209,0,143,208,123,9,141,208,123,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,210,120,2,94,208,209,210,143,208,124,9,141,209,124,9,135,208,21,0,209,0,0,0,141,209,145,9,102,208,209,11,143,208,125,9,141,208,125,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,209,145,9,82,208,209,0,143,208,126,9,141,209,126,9,135,208,21,0,209,0,0,0,141,209,94,7,78,208,209,0,143,208,127,9,141,208,127,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,210,240,2,94,208,209,210,143,208,128,9,141,209,128,9,135,208,21,0,209,0,0,0,141,209,175,6,78,208,209,0,143,208,129,9,141,208,129,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,210,0,3,94,208,209,210,143,208,131,9,141,209,131,9,135,208,21,0,209,0,0,0,2,209,0,0,40,156,79,0,82,208,209,0,143,208,132,9,141,209,132,9,25,209,209,72,102,208,209,11,143,208,133,9,141,208,133,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,132,9,106,208,209,76,143,208,134,9,141,209,134,9,0,208,209,0,143,208,135,9,119,0,5,0,141,209,133,9,19,209,209,200,0,208,209,0,143,208,135,9,141,209,135,9,32,208,209,0,143,208,136,9,141,208,136,9,120,208,92,1,141,209,145,9,1,210,104,4,3,209,209,210,141,210,132,9,25,210,210,72,135,208,64,0,209,210,0,0,141,208,145,9,1,210,176,0,1,209,0,0,97,208,210,209,141,209,145,9,1,210,176,0,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,176,0,3,210,210,209,1,209,0,0,109,210,8,209,141,209,145,9,1,210,0,0,109,209,112,210,141,210,145,9,25,210,210,112,1,209,0,0,109,210,4,209,141,209,145,9,25,209,209,112,1,210,0,0,109,209,8,210,141,209,145,9,1,208,176,0,3,209,209,208,135,210,4,0,209,0,0,0,141,209,145,9,25,209,209,112,135,210,5,0,209,0,0,0,141,209,145,9,25,209,209,112,102,210,209,11,143,210,137,9,141,209,145,9,106,210,209,112,143,210,138,9,141,209,145,9,25,209,209,112,106,210,209,4,143,210,139,9,141,208,137,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,138,9,0,209,208,0,119,0,4,0,141,208,145,9,25,208,208,112,0,209,208,0,0,210,209,0,143,210,140,9,141,208,137,9,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,139,9,0,209,208,0,119,0,4,0,141,208,137,9,19,208,208,200,0,209,208,0,0,210,209,0,143,210,141,9,141,209,145,9,1,208,176,0,3,209,209,208,141,208,140,9,141,211,141,9,135,210,6,0,209,208,211,0,141,211,145,9,1,208,176,0,3,211,211,208,25,210,211,11,143,210,178,1,141,211,178,1,78,210,211,0,143,210,179,1,141,211,145,9,1,208,176,0,94,210,211,208,143,210,180,1,141,208,179,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,180,1,0,211,208,0,119,0,5,0,141,208,145,9,1,209,176,0,3,208,208,209,0,211,208,0,0,210,211,0,143,210,181,1,141,211,181,1,2,208,0,0,238,116,22,0,135,210,7,0,211,208,0,0,143,210,182,1,141,210,182,1,1,208,0,0,52,210,210,208,88,106,0,0,141,208,182,1,135,210,8,0,208,0,0,0,141,208,145,9,1,211,104,4,3,208,208,211,25,210,208,11,143,210,191,1,141,208,191,1,78,210,208,0,143,210,192,1,141,208,192,1,41,208,208,24,42,208,208,24,34,210,208,0,143,210,193,1,141,208,145,9,1,211,104,4,94,210,208,211,143,210,194,1,141,211,193,1,121,211,4,0,141,211,194,1,0,208,211,0,119,0,5,0,141,211,145,9,1,209,104,4,3,211,211,209,0,208,211,0,0,210,208,0,143,210,195,1,141,208,178,1,78,210,208,0,143,210,196,1,141,208,196,1,41,208,208,24,42,208,208,24,34,210,208,0,143,210,197,1,141,208,145,9,1,211,176,0,94,210,208,211,143,210,198,1,141,211,197,1,121,211,4,0,141,211,198,1,0,208,211,0,119,0,5,0,141,211,145,9,1,209,176,0,3,211,211,209,0,208,211,0,0,210,208,0,143,210,199,1,141,210,145,9,1,208,64,3,141,211,199,1,97,210,208,211,141,208,145,9,1,210,64,3,3,208,208,210,25,211,208,4,143,211,142,9,141,211,142,9,1,208,0,0,85,211,208,0,141,211,195,1,141,210,195,1,141,209,145,9,1,207,64,3,3,209,209,207,135,208,65,0,211,210,209,0,2,209,0,0,172,59,21,0,135,208,9,0,209,0,0,0,1,209,1,0,135,208,10,0,209,0,0,0,2,209,0,0,40,156,79,0,82,208,209,0,143,208,183,1,141,209,178,1,78,208,209,0,143,208,184,1,141,209,145,9,1,210,176,0,94,208,209,210,143,208,185,1,141,210,184,1,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,185,1,0,209,210,0,119,0,5,0,141,210,145,9,1,211,176,0,3,210,210,211,0,209,210,0,0,208,209,0,143,208,186,1,141,209,183,1,141,210,186,1,1,211,0,0,135,208,11,0,209,210,211,0,143,208,187,1,141,208,187,1,121,208,79,0,141,211,145,9,1,210,104,4,3,211,211,210,25,208,211,11,143,208,191,1,141,211,191,1,78,208,211,0,143,208,192,1,141,211,192,1,41,211,211,24,42,211,211,24,34,208,211,0,143,208,193,1,141,211,145,9,1,210,104,4,94,208,211,210,143,208,194,1,141,210,193,1,121,210,4,0,141,210,194,1,0,211,210,0,119,0,5,0,141,210,145,9,1,209,104,4,3,210,210,209,0,211,210,0,0,208,211,0,143,208,195,1,141,211,178,1,78,208,211,0,143,208,196,1,141,211,196,1,41,211,211,24,42,211,211,24,34,208,211,0,143,208,197,1,141,211,145,9,1,210,176,0,94,208,211,210,143,208,198,1,141,210,197,1,121,210,4,0,141,210,198,1,0,211,210,0,119,0,5,0,141,210,145,9,1,209,176,0,3,210,210,209,0,211,210,0,0,208,211,0,143,208,199,1,141,208,145,9,1,211,64,3,141,210,199,1,97,208,211,210,141,211,145,9,1,208,64,3,3,211,211,208,25,210,211,4,143,210,142,9,141,210,142,9,1,211,0,0,85,210,211,0,141,210,195,1,141,208,195,1,141,209,145,9,1,207,64,3,3,209,209,207,135,211,65,0,210,208,209,0,2,209,0,0,172,59,21,0,135,211,9,0,209,0,0,0,1,209,1,0,135,211,10,0,209,0,0,0,119,0,36,0,141,209,178,1,78,211,209,0,143,211,188,1,141,209,145,9,1,208,176,0,94,211,209,208,143,211,189,1,141,208,188,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,189,1,0,209,208,0,119,0,5,0,141,208,145,9,1,210,176,0,3,208,208,210,0,209,208,0,0,211,209,0,143,211,190,1,141,211,145,9,1,209,56,3,141,208,190,1,97,211,209,208,2,209,0,0,140,59,21,0,141,211,145,9,1,210,56,3,3,211,211,210,135,208,12,0,209,211,0,0,1,211,1,0,135,208,10,0,211,0,0,0,141,211,132,9,25,211,211,96,25,208,211,11,143,208,200,1,141,211,200,1,78,208,211,0,143,208,201,1,141,208,201,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,211,132,9,106,208,211,100,143,208,203,1,141,211,203,1,0,208,211,0,143,208,204,1,119,0,5,0,141,211,201,1,19,211,211,200,0,208,211,0,143,208,204,1,141,211,204,1,32,208,211,0,143,208,205,1,141,208,205,1,120,208,132,2,141,208,145,9,1,211,176,0,1,209,0,0,97,208,211,209,141,209,145,9,1,211,176,0,3,209,209,211,1,211,0,0,109,209,4,211,141,211,145,9,1,209,176,0,3,211,211,209,1,209,0,0,109,211,8,209,141,209,145,9,1,211,0,0,109,209,112,211,141,211,145,9,25,211,211,112,1,209,0,0,109,211,4,209,141,209,145,9,25,209,209,112,1,211,0,0,109,209,8,211,141,211,145,9,1,209,0,0,85,211,209,0,141,209,145,9,1,211,0,0,109,209,4,211,141,211,145,9,1,209,0,0,109,211,8,209,141,209,145,9,1,211,6,0,107,209,11,211,141,211,145,9,2,209,0,0,115,24,22,0,78,209,209,0,83,211,209,0,141,209,145,9,2,211,0,0,115,24,22,0,102,211,211,1,107,209,1,211,141,211,145,9,2,209,0,0,115,24,22,0,102,209,209,2,107,211,2,209,141,209,145,9,2,211,0,0,115,24,22,0,102,211,211,3,107,209,3,211,141,211,145,9,2,209,0,0,115,24,22,0,102,209,209,4,107,211,4,209,141,209,145,9,2,211,0,0,115,24,22,0,102,211,211,5,107,209,5,211,141,211,145,9,1,209,0,0,107,211,6,209,141,211,132,9,141,208,145,9,135,209,25,0,211,208,0,0,143,209,206,1,141,208,145,9,102,209,208,11,143,209,207,1,141,209,207,1,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,208,145,9,82,209,208,0,143,209,208,1,141,208,208,1,135,209,21,0,208,0,0,0,141,209,206,1,1,208,0,0,45,209,209,208,160,110,0,0,2,208,0,0,239,59,21,0,135,209,9,0,208,0,0,0,1,208,1,0,135,209,10,0,208,0,0,0,141,208,206,1,82,209,208,0,143,209,209,1,141,208,209,1,82,209,208,0,143,209,210,1,141,209,145,9,1,208,120,2,1,211,0,0,97,209,208,211,141,211,145,9,1,208,120,2,3,211,211,208,1,208,0,0,109,211,4,208,141,208,145,9,1,211,120,2,3,208,208,211,1,211,0,0,109,208,8,211,141,211,145,9,1,208,120,2,3,211,211,208,1,208,8,0,107,211,11,208,141,208,145,9,1,211,120,2,2,209,0,0,99,97,112,116,97,208,211,209,141,209,145,9,1,211,120,2,3,209,209,211,2,211,0,0,117,114,101,115,109,209,4,211,141,211,145,9,1,209,120,2,3,211,211,209,1,209,0,0,107,211,8,209,141,211,210,1,19,211,211,200,141,208,145,9,141,210,206,1,141,207,145,9,1,204,120,2,3,207,207,204,135,209,66,0,211,208,210,207,141,211,145,9,25,211,211,112,141,207,145,9,135,209,62,0,211,207,0,0,141,207,145,9,102,209,207,11,143,209,212,1,141,209,212,1,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,207,145,9,82,209,207,0,143,209,213,1,141,207,213,1,135,209,21,0,207,0,0,0,141,207,145,9,1,211,120,2,3,207,207,211,102,209,207,11,143,209,214,1,141,209,214,1,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,207,145,9,1,211,120,2,94,209,207,211,143,209,215,1,141,207,215,1,135,209,21,0,207,0,0,0,141,207,145,9,25,207,207,112,102,209,207,11,143,209,216,1,141,207,145,9,25,207,207,112,106,209,207,4,143,209,218,1,141,211,216,1,41,211,211,24,42,211,211,24,34,211,211,0,121,211,4,0,141,211,218,1,0,207,211,0,119,0,4,0,141,211,216,1,19,211,211,200,0,207,211,0,0,209,207,0,143,209,219,1,141,209,219,1,32,209,209,14,121,209,23,0,141,207,145,9,25,207,207,112,1,211,0,0,1,210,255,255,2,208,0,0,224,59,21,0,1,204,14,0,135,209,44,0,207,211,210,208,204,0,0,0,143,209,220,1,141,209,220,1,32,209,209,0,120,209,2,0,119,0,8,0,2,204,0,0,239,59,21,0,135,209,9,0,204,0,0,0,1,204,1,0,135,209,10,0,204,0,0,0,141,204,145,9,1,208,176,0,3,204,204,208,2,208,0,0,17,149,22,0,135,209,67,0,204,208,0,0,141,208,145,9,1,204,176,0,3,208,208,204,1,204,47,0,135,209,68,0,208,204,0,0,141,204,145,9,25,204,204,112,102,209,204,11,143,209,221,1,141,204,145,9,106,209,204,112,143,209,222,1,141,204,145,9,25,204,204,112,106,209,204,4,143,209,224,1,141,208,221,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,222,1,0,204,208,0,119,0,4,0,141,208,145,9,25,208,208,112,0,204,208,0,0,209,204,0,143,209,225,1,141,208,221,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,224,1,0,204,208,0,119,0,4,0,141,208,221,1,19,208,208,200,0,204,208,0,0,209,204,0,143,209,226,1,141,204,145,9,1,208,176,0,3,204,204,208,141,208,225,1,141,210,226,1,135,209,6,0,204,208,210,0,141,210,145,9,1,208,176,0,3,210,210,208,25,209,210,11,143,209,227,1,141,210,227,1,78,209,210,0,143,209,228,1,141,210,145,9,1,208,176,0,94,209,210,208,143,209,229,1,141,208,228,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,229,1,0,210,208,0,119,0,5,0,141,208,145,9,1,204,176,0,3,208,208,204,0,210,208,0,0,209,210,0,143,209,230,1,141,210,230,1,141,208,145,9,1,204,144,2,3,208,208,204,135,209,69,0,210,208,0,0,141,208,145,9,1,210,144,2,3,208,208,210,106,209,208,12,143,209,231,1,141,209,231,1,1,208,0,64,19,209,209,208,32,209,209,0,120,209,90,0,141,208,200,1,78,209,208,0,143,209,232,1,141,208,132,9,106,209,208,96,143,209,233,1,141,210,232,1,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,233,1,0,208,210,0,119,0,4,0,141,210,132,9,25,210,210,96,0,208,210,0,0,209,208,0,143,209,234,1,141,208,227,1,78,209,208,0,143,209,235,1,141,208,145,9,1,210,176,0,94,209,208,210,143,209,236,1,141,210,235,1,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,236,1,0,208,210,0,119,0,5,0,141,210,145,9,1,204,176,0,3,210,210,204,0,208,210,0,0,209,208,0,143,209,238,1,141,209,145,9,1,208,72,3,141,210,238,1,97,209,208,210,141,210,145,9,1,208,72,3,3,210,210,208,1,208,0,0,109,210,4,208,141,210,234,1,141,209,234,1,141,204,145,9,1,211,72,3,3,204,204,211,135,208,65,0,210,209,204,0,141,204,200,1,78,208,204,0,143,208,239,1,141,204,132,9,106,208,204,96,143,208,240,1,141,209,239,1,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,240,1,0,204,209,0,119,0,4,0,141,209,132,9,25,209,209,96,0,204,209,0,0,208,204,0,143,208,241,1,141,208,145,9,1,204,80,3,141,209,241,1,97,208,204,209,2,204,0,0,8,60,21,0,141,208,145,9,1,210,80,3,3,208,208,210,135,209,12,0,204,208,0,0,1,208,1,0,135,209,10,0,208,0,0,0,141,208,145,9,1,204,176,0,3,208,208,204,2,204,0,0,210,224,53,2,135,209,67,0,208,204,0,0,141,204,145,9,1,208,176,0,3,204,204,208,135,209,4,0,204,0,0,0,141,204,145,9,25,204,204,112,102,209,204,11,143,209,242,1,141,204,145,9,106,209,204,112,143,209,243,1,141,204,145,9,25,204,204,112,106,209,204,4,143,209,244,1,141,208,242,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,243,1,0,204,208,0,119,0,4,0,141,208,145,9,25,208,208,112,0,204,208,0,0,209,204,0,143,209,245,1,141,208,242,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,244,1,0,204,208,0,119,0,4,0,141,208,242,1,19,208,208,200,0,204,208,0,0,209,204,0,143,209,246,1,141,204,145,9,1,208,176,0,3,204,204,208,141,208,245,1,141,210,246,1,135,209,6,0,204,208,210,0,141,210,145,9,1,208,176,0,3,210,210,208,135,209,70,0,210,0,0,0,141,210,227,1,78,209,210,0,143,209,247,1,141,210,145,9,1,208,176,0,94,209,210,208,143,209,248,1,141,208,247,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,248,1,0,210,208,0,119,0,5,0,141,208,145,9,1,204,176,0,3,208,208,204,0,210,208,0,0,209,210,0,143,209,249,1,141,210,249,1,141,208,145,9,1,204,144,2,3,208,208,204,135,209,69,0,210,208,0,0,141,208,145,9,1,210,144,2,3,208,208,210,106,209,208,12,143,209,250,1,141,209,250,1,1,208,0,64,19,209,209,208,32,209,209,0,121,209,37,0,141,208,227,1,78,209,208,0,143,209,251,1,141,208,145,9,1,210,176,0,94,209,208,210,143,209,253,1,141,210,251,1,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,253,1,0,208,210,0,119,0,5,0,141,210,145,9,1,204,176,0,3,210,210,204,0,208,210,0,0,209,208,0,143,209,254,1,141,209,145,9,1,208,88,3,141,210,254,1,97,209,208,210,2,208,0,0,35,60,21,0,141,209,145,9,1,204,88,3,3,209,209,204,135,210,12,0,208,209,0,0,1,209,1,0,135,210,10,0,209,0,0,0,119,0,90,0,141,209,200,1,78,210,209,0,143,210,255,1,141,209,132,9,106,210,209,96,143,210,0,2,141,208,255,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,0,2,0,209,208,0,119,0,4,0,141,208,132,9,25,208,208,96,0,209,208,0,0,210,209,0,143,210,1,2,141,209,227,1,78,210,209,0,143,210,2,2,141,209,145,9,1,208,176,0,94,210,209,208,143,210,3,2,141,208,2,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,3,2,0,209,208,0,119,0,5,0,141,208,145,9,1,204,176,0,3,208,208,204,0,209,208,0,0,210,209,0,143,210,5,2,141,210,145,9,1,209,96,3,141,208,5,2,97,210,209,208,141,208,145,9,1,209,96,3,3,208,208,209,1,209,0,0,109,208,4,209,141,208,1,2,141,210,1,2,141,204,145,9,1,211,96,3,3,204,204,211,135,209,65,0,208,210,204,0,141,204,200,1,78,209,204,0,143,209,6,2,141,204,132,9,106,209,204,96,143,209,7,2,141,210,6,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,7,2,0,204,210,0,119,0,4,0,141,210,132,9,25,210,210,96,0,204,210,0,0,209,204,0,143,209,8,2,141,209,145,9,1,204,104,3,141,210,8,2,97,209,204,210,2,204,0,0,8,60,21,0,141,209,145,9,1,208,104,3,3,209,209,208,135,210,12,0,204,209,0,0,1,209,1,0,135,210,10,0,209,0,0,0,141,209,132,9,25,209,209,84,25,210,209,11,143,210,9,2,141,209,9,2,78,210,209,0,143,210,10,2,141,210,10,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,209,132,9,106,210,209,88,143,210,12,2,141,209,12,2,0,210,209,0,143,210,13,2,119,0,5,0,141,209,10,2,19,209,209,200,0,210,209,0,143,210,13,2,141,209,13,2,32,210,209,0,143,210,14,2,141,210,14,2,120,210,187,1,141,210,145,9,1,209,176,0,1,204,0,0,97,210,209,204,141,204,145,9,1,209,176,0,3,204,204,209,1,209,0,0,109,204,4,209,141,209,145,9,1,204,176,0,3,209,209,204,1,204,0,0,109,209,8,204,141,204,145,9,1,209,0,0,109,204,112,209,141,209,145,9,25,209,209,112,1,204,0,0,109,209,4,204,141,204,145,9,25,204,204,112,1,209,0,0,109,204,8,209,141,204,145,9,25,204,204,112,2,210,0,0,75,60,21,0], eb + 20480);
  HEAPU8.set([135,209,67,0,204,210,0,0,141,210,145,9,1,204,176,0,3,210,210,204,2,204,0,0,17,149,22,0,135,209,67,0,210,204,0,0,141,204,145,9,1,210,176,0,3,204,204,210,1,210,47,0,135,209,68,0,204,210,0,0,141,210,145,9,25,210,210,112,102,209,210,11,143,209,15,2,141,210,145,9,106,209,210,112,143,209,16,2,141,210,145,9,25,210,210,112,106,209,210,4,143,209,17,2,141,204,15,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,16,2,0,210,204,0,119,0,4,0,141,204,145,9,25,204,204,112,0,210,204,0,0,209,210,0,143,209,18,2,141,204,15,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,17,2,0,210,204,0,119,0,4,0,141,204,15,2,19,204,204,200,0,210,204,0,0,209,210,0,143,209,19,2,141,210,145,9,1,204,176,0,3,210,210,204,141,204,18,2,141,208,19,2,135,209,6,0,210,204,208,0,141,208,145,9,1,204,176,0,3,208,208,204,25,209,208,11,143,209,20,2,141,208,20,2,78,209,208,0,143,209,21,2,141,208,145,9,1,204,176,0,94,209,208,204,143,209,22,2,141,204,21,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,22,2,0,208,204,0,119,0,5,0,141,204,145,9,1,210,176,0,3,204,204,210,0,208,204,0,0,209,208,0,143,209,23,2,141,208,23,2,141,204,145,9,1,210,144,2,3,204,204,210,135,209,69,0,208,204,0,0,141,204,145,9,1,208,144,2,3,204,204,208,106,209,204,12,143,209,24,2,141,209,24,2,1,204,0,64,19,209,209,204,32,209,209,0,120,209,90,0,141,204,9,2,78,209,204,0,143,209,26,2,141,204,132,9,106,209,204,84,143,209,27,2,141,208,26,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,27,2,0,204,208,0,119,0,4,0,141,208,132,9,25,208,208,84,0,204,208,0,0,209,204,0,143,209,28,2,141,204,20,2,78,209,204,0,143,209,29,2,141,204,145,9,1,208,176,0,94,209,204,208,143,209,30,2,141,208,29,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,30,2,0,204,208,0,119,0,5,0,141,208,145,9,1,210,176,0,3,208,208,210,0,204,208,0,0,209,204,0,143,209,31,2,141,209,145,9,1,204,112,3,141,208,31,2,97,209,204,208,141,208,145,9,1,204,112,3,3,208,208,204,1,204,0,0,109,208,4,204,141,208,28,2,141,209,28,2,141,210,145,9,1,211,112,3,3,210,210,211,135,204,65,0,208,209,210,0,141,210,9,2,78,204,210,0,143,204,32,2,141,210,132,9,106,204,210,84,143,204,33,2,141,209,32,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,33,2,0,210,209,0,119,0,4,0,141,209,132,9,25,209,209,84,0,210,209,0,0,204,210,0,143,204,34,2,141,204,145,9,1,210,120,3,141,209,34,2,97,204,210,209,2,210,0,0,8,60,21,0,141,204,145,9,1,208,120,3,3,204,204,208,135,209,12,0,210,204,0,0,1,204,1,0,135,209,10,0,204,0,0,0,141,204,145,9,1,210,176,0,3,204,204,210,2,210,0,0,210,224,53,2,135,209,67,0,204,210,0,0,141,210,145,9,1,204,176,0,3,210,210,204,135,209,4,0,210,0,0,0,141,210,145,9,25,210,210,112,102,209,210,11,143,209,35,2,141,210,145,9,106,209,210,112,143,209,36,2,141,210,145,9,25,210,210,112,106,209,210,4,143,209,37,2,141,204,35,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,36,2,0,210,204,0,119,0,4,0,141,204,145,9,25,204,204,112,0,210,204,0,0,209,210,0,143,209,38,2,141,204,35,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,37,2,0,210,204,0,119,0,4,0,141,204,35,2,19,204,204,200,0,210,204,0,0,209,210,0,143,209,40,2,141,210,145,9,1,204,176,0,3,210,210,204,141,204,38,2,141,208,40,2,135,209,6,0,210,204,208,0,141,208,145,9,1,204,176,0,3,208,208,204,135,209,70,0,208,0,0,0,141,208,20,2,78,209,208,0,143,209,41,2,141,208,145,9,1,204,176,0,94,209,208,204,143,209,42,2,141,204,41,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,42,2,0,208,204,0,119,0,5,0,141,204,145,9,1,210,176,0,3,204,204,210,0,208,204,0,0,209,208,0,143,209,43,2,141,208,43,2,141,204,145,9,1,210,144,2,3,204,204,210,135,209,69,0,208,204,0,0,141,204,145,9,1,208,144,2,3,204,204,208,106,209,204,12,143,209,44,2,141,209,44,2,1,204,0,64,19,209,209,204,32,209,209,0,121,209,37,0,141,204,20,2,78,209,204,0,143,209,45,2,141,204,145,9,1,208,176,0,94,209,204,208,143,209,47,2,141,208,45,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,47,2,0,204,208,0,119,0,5,0,141,208,145,9,1,210,176,0,3,208,208,210,0,204,208,0,0,209,204,0,143,209,48,2,141,209,145,9,1,204,128,3,141,208,48,2,97,209,204,208,2,204,0,0,80,60,21,0,141,209,145,9,1,210,128,3,3,209,209,210,135,208,12,0,204,209,0,0,1,209,1,0,135,208,10,0,209,0,0,0,119,0,90,0,141,209,9,2,78,208,209,0,143,208,49,2,141,209,132,9,106,208,209,84,143,208,50,2,141,204,49,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,50,2,0,209,204,0,119,0,4,0,141,204,132,9,25,204,204,84,0,209,204,0,0,208,209,0,143,208,51,2,141,209,20,2,78,208,209,0,143,208,52,2,141,209,145,9,1,204,176,0,94,208,209,204,143,208,53,2,141,204,52,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,53,2,0,209,204,0,119,0,5,0,141,204,145,9,1,210,176,0,3,204,204,210,0,209,204,0,0,208,209,0,143,208,54,2,141,208,145,9,1,209,136,3,141,204,54,2,97,208,209,204,141,204,145,9,1,209,136,3,3,204,204,209,1,209,0,0,109,204,4,209,141,204,51,2,141,208,51,2,141,210,145,9,1,211,136,3,3,210,210,211,135,209,65,0,204,208,210,0,141,210,9,2,78,209,210,0,143,209,55,2,141,210,132,9,106,209,210,84,143,209,56,2,141,208,55,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,56,2,0,210,208,0,119,0,4,0,141,208,132,9,25,208,208,84,0,210,208,0,0,209,210,0,143,209,57,2,141,209,145,9,1,210,144,3,141,208,57,2,97,209,210,208,2,210,0,0,8,60,21,0,141,209,145,9,1,204,144,3,3,209,209,204,135,208,12,0,210,209,0,0,1,209,1,0,135,208,10,0,209,0,0,0,141,208,145,9,1,209,176,0,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,176,0,3,209,209,208,25,209,209,4,1,208,0,0,109,209,4,208,141,208,145,9,1,209,176,0,3,208,208,209,1,209,3,0,107,208,11,209,141,209,145,9,1,208,176,0,2,210,0,0,136,79,21,0,78,210,210,0,95,209,208,210,141,210,145,9,1,208,176,0,3,210,210,208,2,208,0,0,136,79,21,0,102,208,208,1,107,210,1,208,141,208,145,9,1,210,176,0,3,208,208,210,2,210,0,0,136,79,21,0,102,210,210,2,107,208,2,210,141,210,145,9,1,208,176,0,3,210,210,208,1,208,0,0,107,210,3,208,141,210,132,9,141,209,145,9,1,204,176,0,3,209,209,204,135,208,25,0,210,209,0,0,143,208,59,2,141,209,145,9,1,210,176,0,3,209,209,210,102,208,209,11,143,208,60,2,141,208,60,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,210,176,0,94,208,209,210,143,208,61,2,141,209,61,2,135,208,21,0,209,0,0,0,2,209,0,0,40,156,79,0,82,208,209,0,143,208,62,2,141,209,62,2,1,210,154,0,90,208,209,210,143,208,63,2,141,208,63,2,41,208,208,24,42,208,208,24,32,208,208,0,121,208,64,0,141,208,145,9,1,209,176,0,3,208,208,209,1,209,10,0,107,208,11,209,141,208,145,9,1,210,176,0,3,209,208,210,143,209,143,9,2,209,0,0,47,30,21,0,143,209,146,9,141,210,143,9,25,209,210,10,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,232,127,0,0,141,210,145,9,1,209,176,0,3,210,210,209,1,209,0,0,107,210,10,209,141,210,59,2,141,208,145,9,1,204,176,0,3,208,208,204,135,209,27,0,210,208,0,0,143,209,64,2,141,208,145,9,1,210,176,0,3,208,208,210,102,209,208,11,143,209,65,2,141,209,65,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,208,145,9,1,210,176,0,94,209,208,210,143,209,66,2,141,208,66,2,135,209,21,0,208,0,0,0,141,209,64,2,121,209,6,0,1,209,131,1,143,209,144,9,119,0,3,0,1,209,131,1,143,209,144,9,141,209,144,9,1,208,131,1,45,209,209,208,56,129,0,0,141,209,145,9,1,208,96,4,1,210,21,0,97,209,208,210,141,210,145,9,1,208,96,4,3,210,210,208,1,208,0,0,109,210,4,208,141,210,145,9,1,209,96,4,3,210,210,209,2,209,0,0,121,60,21,0,141,204,145,9,1,211,152,3,3,204,204,211,135,208,18,0,210,209,204,0,2,204,0,0,76,18,71,0,78,208,204,0,143,208,67,2,141,208,67,2,41,208,208,24,42,208,208,24,32,208,208,0,120,208,2,0,119,0,2,0,135,208,71,0,141,208,145,9,1,204,176,0,1,209,0,0,97,208,204,209,141,209,145,9,1,204,176,0,3,209,209,204,1,204,0,0,109,209,4,204,141,204,145,9,1,209,176,0,3,204,204,209,1,209,0,0,109,204,8,209,141,209,145,9,1,204,176,0,3,209,209,204,1,204,8,0,107,209,11,204,141,204,145,9,1,209,176,0,2,208,0,0,77,97,105,110,97,204,209,208,141,208,145,9,1,209,176,0,3,208,208,209,2,209,0,0,77,101,110,117,109,208,4,209,141,209,145,9,1,208,176,0,3,209,209,208,1,208,0,0,107,209,8,208,2,209,0,0,172,208,221,0,1,204,1,0,141,210,145,9,1,211,176,0,3,210,210,211,135,208,72,0,209,204,210,0,143,208,69,2,141,210,145,9,1,204,176,0,3,210,210,204,102,208,210,11,143,208,70,2,141,208,70,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,204,176,0,94,208,210,204,143,208,71,2,141,210,71,2,135,208,21,0,210,0,0,0,141,208,145,9,1,210,176,0,1,204,0,0,97,208,210,204,141,204,145,9,1,210,176,0,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,176,0,3,210,210,204,1,204,0,0,109,210,8,204,141,204,145,9,1,210,176,0,3,204,204,210,1,210,4,0,107,204,11,210,141,210,145,9,1,204,176,0,2,208,0,0,77,97,105,110,97,210,204,208,141,208,145,9,1,204,176,0,3,208,208,204,1,204,0,0,107,208,4,204,141,208,69,2,106,204,208,56,143,204,72,2,141,204,72,2,34,204,204,2,121,204,97,0,141,208,69,2,25,208,208,12,102,204,208,11,143,204,73,2,141,208,69,2,106,204,208,16,143,204,74,2,141,210,73,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,74,2,0,208,210,0,119,0,4,0,141,210,73,2,19,210,210,200,0,208,210,0,0,204,208,0,143,204,76,2,141,204,76,2,32,204,204,4,121,204,67,0,141,208,69,2,106,204,208,12,143,204,77,2,141,204,73,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,13,0,141,208,77,2,141,210,145,9,1,209,176,0,3,210,210,209,1,209,4,0,135,204,61,0,208,210,209,0,143,204,82,2,141,204,82,2,32,204,204,0,121,204,48,0,119,0,54,0,141,204,77,2,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,77,120,204,2,0,119,0,40,0,141,204,69,2,25,27,204,12,141,204,73,2,19,204,204,200,0,99,204,0,141,204,145,9,1,209,176,0,3,172,204,209,26,209,99,1,143,209,78,2,25,209,27,1,143,209,79,2,141,209,78,2,32,209,209,0,120,209,32,0,25,209,172,1,143,209,80,2,141,204,79,2,78,209,204,0,143,209,52,1,141,204,80,2,78,209,204,0,143,209,81,2,141,209,52,1,41,209,209,24,42,209,209,24,141,204,81,2,41,204,204,24,42,204,204,24,45,209,209,204,24,132,0,0,141,209,79,2,0,27,209,0,141,209,78,2,0,99,209,0,141,209,80,2,0,172,209,0,119,0,227,255,119,0,1,0,141,204,69,2,102,209,204,60,143,209,83,2,141,209,69,2,141,204,83,2,39,204,204,1,107,209,60,204,141,209,69,2,25,209,209,12,141,210,145,9,1,208,176,0,3,210,210,208,135,204,62,0,209,210,0,0,141,210,145,9,1,209,176,0,3,210,210,209,102,204,210,11,143,204,84,2,141,204,84,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,209,176,0,94,204,210,209,143,204,85,2,141,210,85,2,135,204,21,0,210,0,0,0,141,204,145,9,1,210,176,0,1,209,0,0,97,204,210,209,141,209,145,9,1,210,176,0,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,176,0,3,210,210,209,1,209,0,0,109,210,8,209,1,210,16,0,135,209,26,0,210,0,0,0,143,209,86,2,141,209,145,9,1,210,176,0,141,204,86,2,97,209,210,204,141,204,145,9,1,210,176,0,3,204,204,210,2,210,0,0,16,0,0,128,109,204,8,210,141,210,145,9,1,204,176,0,3,210,210,204,1,204,11,0,109,210,4,204,141,210,86,2,0,204,210,0,143,204,143,9,2,204,0,0,178,86,21,0,143,204,146,9,141,210,143,9,25,204,210,11,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,64,133,0,0,141,210,86,2,1,204,0,0,107,210,11,204,2,210,0,0,172,208,221,0,1,209,1,0,141,208,145,9,1,211,176,0,3,208,208,211,135,204,72,0,210,209,208,0,143,204,88,2,141,208,145,9,1,209,176,0,3,208,208,209,102,204,208,11,143,204,89,2,141,204,89,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,209,176,0,94,204,208,209,143,204,90,2,141,208,90,2,135,204,21,0,208,0,0,0,141,204,145,9,1,208,176,0,1,209,0,0,97,204,208,209,141,209,145,9,1,208,176,0,3,209,209,208,1,208,0,0,109,209,4,208,141,208,145,9,1,209,176,0,3,208,208,209,1,209,0,0,109,208,8,209,141,209,145,9,1,208,176,0,3,209,209,208,1,208,8,0,107,209,11,208,141,208,145,9,1,209,176,0,2,204,0,0,83,101,110,100,97,208,209,204,141,204,145,9,1,209,176,0,3,204,204,209,2,209,0,0,32,75,101,121,109,204,4,209,141,209,145,9,1,204,176,0,3,209,209,204,1,204,0,0,107,209,8,204,141,209,88,2,106,204,209,56,143,204,91,2,141,204,91,2,34,204,204,2,121,204,100,0,141,209,88,2,25,209,209,12,102,204,209,11,143,204,92,2,141,209,88,2,106,204,209,16,143,204,94,2,141,208,92,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,94,2,0,209,208,0,119,0,4,0,141,208,92,2,19,208,208,200,0,209,208,0,0,204,209,0,143,204,95,2,141,204,95,2,32,204,204,8,121,204,70,0,141,209,88,2,106,204,209,12,143,204,96,2,141,204,92,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,13,0,141,209,96,2,141,208,145,9,1,210,176,0,3,208,208,210,1,210,8,0,135,204,61,0,209,208,210,0,143,204,102,2,141,204,102,2,32,204,204,0,121,204,51,0,119,0,57,0,141,204,96,2,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,83,120,204,2,0,119,0,43,0,141,204,88,2,25,84,204,12,141,204,92,2,19,204,204,200,0,156,204,0,141,210,145,9,1,208,176,0,3,204,210,208,143,204,29,1,26,204,156,1,143,204,98,2,25,204,84,1,143,204,99,2,141,204,98,2,32,204,204,0,120,204,34,0,141,208,29,1,25,204,208,1,143,204,100,2,141,208,99,2,78,204,208,0,143,204,109,1,141,208,100,2,78,204,208,0,143,204,101,2,141,204,109,1,41,204,204,24,42,204,204,24,141,208,101,2,41,208,208,24,42,208,208,24,45,204,204,208,252,135,0,0,141,204,99,2,0,84,204,0,141,204,98,2,0,156,204,0,141,208,100,2,0,204,208,0,143,204,29,1,119,0,225,255,119,0,1,0,141,208,88,2,102,204,208,60,143,204,103,2,141,204,88,2,141,208,103,2,39,208,208,1,107,204,60,208,141,204,88,2,25,204,204,12,141,210,145,9,1,209,176,0,3,210,210,209,135,208,62,0,204,210,0,0,141,210,145,9,1,204,176,0,3,210,210,204,102,208,210,11,143,208,104,2,141,208,104,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,204,176,0,94,208,210,204,143,208,105,2,141,210,105,2,135,208,21,0,210,0,0,0,141,208,145,9,1,210,176,0,3,208,208,210,1,210,0,0,109,208,8,210,141,210,145,9,1,208,176,0,3,210,210,208,1,208,7,0,107,210,11,208,141,208,145,9,1,210,176,0,2,204,0,0,190,86,21,0,78,204,204,0,95,208,210,204,141,204,145,9,1,210,176,0,3,204,204,210,2,210,0,0,190,86,21,0,102,210,210,1,107,204,1,210,141,210,145,9,1,204,176,0,3,210,210,204,2,204,0,0,190,86,21,0,102,204,204,2,107,210,2,204,141,204,145,9,1,210,176,0,3,204,204,210,2,210,0,0,190,86,21,0,102,210,210,3,107,204,3,210,141,210,145,9,1,204,176,0,3,210,210,204,2,204,0,0,190,86,21,0,102,204,204,4,107,210,4,204,141,204,145,9,1,210,176,0,3,204,204,210,2,210,0,0,190,86,21,0,102,210,210,5,107,204,5,210,141,210,145,9,1,204,176,0,3,210,210,204,2,204,0,0,190,86,21,0,102,204,204,6,107,210,6,204,141,204,145,9,1,210,176,0,3,204,204,210,1,210,0,0,107,204,7,210,2,204,0,0,172,208,221,0,1,208,1,0,141,209,145,9,1,211,176,0,3,209,209,211,135,210,72,0,204,208,209,0,143,210,106,2,141,209,145,9,1,208,176,0,3,209,209,208,102,210,209,11,143,210,107,2,141,210,107,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,209,145,9,1,208,176,0,94,210,209,208,143,210,108,2,141,209,108,2,135,210,21,0,209,0,0,0,141,210,145,9,1,209,176,0,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,176,0,3,209,209,210,25,209,209,4,1,210,0,0,109,209,4,210,141,210,145,9,1,209,176,0,3,210,210,209,1,209,3,0,107,210,11,209,141,209,145,9,1,210,176,0,2,208,0,0,166,60,21,0,78,208,208,0,95,209,210,208,141,208,145,9,1,210,176,0,3,208,208,210,2,210,0,0,166,60,21,0,102,210,210,1,107,208,1,210,141,210,145,9,1,208,176,0,3,210,210,208,2,208,0,0,166,60,21,0,102,208,208,2,107,210,2,208,141,208,145,9,1,210,176,0,3,208,208,210,1,210,0,0,107,208,3,210,141,208,106,2,106,210,208,56,143,210,110,2,141,210,110,2,34,210,210,2,121,210,108,0,141,208,106,2,25,208,208,12,102,210,208,11,143,210,112,2,141,208,106,2,106,210,208,16,143,210,113,2,141,209,112,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,113,2,0,208,209,0,119,0,4,0,141,209,112,2,19,209,209,200,0,208,209,0,0,210,208,0,143,210,114,2,141,210,114,2,32,210,210,3,121,210,78,0,141,208,106,2,106,210,208,12,143,210,115,2,141,210,112,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,13,0,141,208,115,2,141,209,145,9,1,204,176,0,3,209,209,204,1,204,3,0,135,210,61,0,208,209,204,0,143,210,122,2,141,210,122,2,32,210,210,0,121,210,59,0,119,0,65,0,141,204,145,9,1,209,176,0,94,210,204,209,143,210,116,2,141,210,116,2,19,210,210,200,41,210,210,24,42,210,210,24,141,204,115,2,19,204,204,200,41,204,204,24,42,204,204,24,52,210,210,204,132,139,0,0,119,0,43,0,141,210,106,2,25,85,210,12,141,210,112,2,19,210,210,200,0,157,210,0,141,204,145,9,1,209,176,0,3,210,204,209,143,210,30,1,26,210,157,1,143,210,117,2,25,210,85,1,143,210,118,2,141,210,117,2,32,210,210,0,120,210,34,0,141,209,30,1,25,210,209,1,143,210,119,2,141,209,118,2,78,210,209,0,143,210,110,1,141,209,119,2,78,210,209,0,143,210,120,2,141,210,110,1,41,210,210,24,42,210,210,24,141,209,120,2,41,209,209,24,42,209,209,24,45,210,210,209,40,140,0,0,141,210,118,2,0,85,210,0,141,210,117,2,0,157,210,0,141,209,119,2,0,210,209,0,143,210,30,1,119,0,225,255,119,0,1,0,141,209,106,2,102,210,209,60,143,210,123,2,141,210,106,2,141,209,123,2,39,209,209,1,107,210,60,209,141,210,106,2,25,210,210,12,141,204,145,9,1,208,176,0,3,204,204,208,135,209,62,0,210,204,0,0,141,204,145,9,1,210,176,0,3,204,204,210,102,209,204,11,143,209,124,2,141,209,124,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,204,145,9,1,210,176,0,94,209,204,210,143,209,125,2,141,204,125,2,135,209,21,0,204,0,0,0,141,209,145,9,1,204,176,0,1,210,0,0,97,209,204,210,141,210,145,9,1,204,176,0,3,210,210,204,1,204,0,0,109,210,4,204,141,204,145,9,1,210,176,0,3,204,204,210,1,210,0,0,109,204,8,210,1,204,16,0,135,210,26,0,204,0,0,0,143,210,126,2,141,210,145,9,1,204,176,0,141,209,126,2,97,210,204,209,141,209,145,9,1,204,176,0,3,209,209,204,2,204,0,0,16,0,0,128,109,209,8,204,141,204,145,9,1,209,176,0,3,204,204,209,1,209,11,0,109,204,4,209,141,204,126,2,0,209,204,0,143,209,143,9,2,209,0,0,198,86,21,0,143,209,146,9,141,204,143,9,25,209,204,11,143,209,147,9,141,209,143,9,141,204,146,9,78,204,204,0,83,209,204,0,141,209,143,9,25,204,209,1,143,204,143,9,141,209,146,9,25,204,209,1,143,204,146,9,141,204,143,9,141,209,147,9,54,204,204,209,80,141,0,0,141,204,126,2,1,209,0,0,107,204,11,209,2,204,0,0,172,208,221,0,1,210,1,0,141,208,145,9,1,211,176,0,3,208,208,211,135,209,72,0,204,210,208,0,143,209,128,2,141,208,145,9,1,210,176,0,3,208,208,210,102,209,208,11,143,209,129,2,141,209,129,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,208,145,9,1,210,176,0,94,209,208,210,143,209,130,2,141,208,130,2,135,209,21,0,208,0,0,0,141,209,145,9,1,208,176,0,1,210,0,0,97,209,208,210,141,210,145,9,1,208,176,0,3,210,210,208,1,208,0,0,109,210,4,208,141,208,145,9,1,210,176,0,3,208,208,210,1,210,0,0,109,208,8,210,141,210,145,9,1,208,176,0,3,210,210,208,1,208,8,0,107,210,11,208,141,208,145,9,1,210,176,0,2,209,0,0,67,80,85,32,97,208,210,209,141,209,145,9,1,210,176,0,3,209,209,210,2,210,0,0,99,111,114,101,109,209,4,210,141,210,145,9,1,209,176,0,3,210,210,209,1,209,0,0,107,210,8,209,141,210,128,2,106,209,210,56,143,209,132,2,141,209,132,2,34,209,209,2,121,209,100,0,141,210,128,2,25,210,210,12,102,209,210,11,143,209,133,2,141,210,128,2,106,209,210,16,143,209,135,2,141,208,133,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,135,2,0,210,208,0,119,0,4,0,141,208,133,2,19,208,208,200,0,210,208,0,0,209,210,0,143,209,136,2,141,209,136,2,32,209,209,8,121,209,70,0,141,210,128,2,106,209,210,12,143,209,137,2,141,209,133,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,13,0,141,210,137,2,141,208,145,9,1,204,176,0,3,208,208,204,1,204,8,0,135,209,61,0,210,208,204,0,143,209,142,2,141,209,142,2,32,209,209,0,121,209,51,0,119,0,57,0,141,209,137,2,19,209,209,200,41,209,209,24,42,209,209,24,32,209,209,67,120,209,2,0,119,0,43,0,141,209,128,2,25,86,209,12,141,209,133,2,19,209,209,200,0,158,209,0,141,204,145,9,1,208,176,0,3,209,204,208,143,209,31,1,26,209,158,1,143,209,138,2,25,209,86,1,143,209,139,2,141,209,138,2,32,209,209,0,120,209,34,0,141,208,31,1,25,209,208,1,143,209,140,2,141,208,139,2,78,209,208,0,143,209,111,1,141,208,140,2,78,209,208,0,143,209,141,2,141,209,111,1,41,209,209,24,42,209,209,24,141,208,141,2,41,208,208,24,42,208,208,24,45,209,209,208,12,144,0,0,141,209,139,2,0,86,209,0,141,209,138,2,0,158,209,0,141,208,140,2,0,209,208,0,143,209,31,1,119,0,225,255,119,0,1,0,141,208,128,2,102,209,208,60,143,209,143,2,141,209,128,2,141,208,143,2,39,208,208,1,107,209,60,208,141,209,128,2,25,209,209,12,141,204,145,9,1,210,176,0,3,204,204,210,135,208,62,0,209,204,0,0,141,204,145,9,1,209,176,0,3,204,204,209,102,208,204,11,143,208,144,2,141,208,144,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,204,145,9,1,209,176,0,94,208,204,209,143,208,146,2,141,204,146,2,135,208,21,0,204,0,0,0,141,208,145,9,1,204,176,0,1,209,0,0,97,208,204,209,141,209,145,9,1,204,176,0,3,209,209,204,1,204,0,0,109,209,4,204,141,204,145,9,1,209,176,0,3,204,204,209,1,209,0,0,109,204,8,209,1,204,16,0,135,209,26,0,204,0,0,0,143,209,147,2,141,209,145,9,1,204,176,0,141,208,147,2,97,209,204,208,141,208,145,9,1,204,176,0,3,208,208,204,2,204,0,0,16,0,0,128,109,208,8,204,141,204,145,9,1,208,176,0,3,204,204,208,1,208,11,0,109,204,4,208,141,204,147,2,0,208,204,0,143,208,143,9,2,208,0,0,210,86,21,0,143,208,146,9,141,204,143,9,25,208,204,11,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,52,145,0,0,141,204,147,2,1,208,0,0,107,204,11,208,2,204,0,0,172,208,221,0,1,209,1,0,141,210,145,9,1,211,176,0,3,210,210,211,135,208,72,0,204,209,210,0,143,208,148,2,141,210,145,9,1,209,176,0,3,210,210,209,102,208,210,11,143,208,149,2,141,208,149,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,209,176,0,94,208,210,209,143,208,151,2,141,210,151,2,135,208,21,0,210,0,0,0,141,208,145,9,1,210,176,0,1,209,0,0,97,208,210,209,141,209,145,9,1,210,176,0,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,176,0,3,210,210,209,1,209,0,0,109,210,8,209,141,209,145,9,1,210,176,0,3,209,209,210,1,210,8,0,107,209,11,210,141,210,145,9,1,209,176,0,2,208,0,0,67,80,85,32,97,210,209,208,141,208,145,9,1,209,176,0,3,208,208,209,2,209,0,0,116,121,112,101,109,208,4,209,141,209,145,9,1,208,176,0,3,209,209,208,1,208,0,0,107,209,8,208,141,209,148,2,106,208,209,56,143,208,152,2,141,208,152,2,34,208,208,2,121,208,100,0,141,209,148,2,25,209,209,12,102,208,209,11,143,208,154,2,141,209,148,2,106,208,209,16,143,208,155,2,141,210,154,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,155,2,0,209,210,0,119,0,4,0,141,210,154,2,19,210,210,200,0,209,210,0,0,208,209,0,143,208,156,2,141,208,156,2,32,208,208,8,121,208,70,0,141,209,148,2,106,208,209,12,143,208,157,2,141,208,154,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,13,0,141,209,157,2,141,210,145,9,1,204,176,0,3,210,210,204,1,204,8,0,135,208,61,0,209,210,204,0,143,208,162,2,141,208,162,2,32,208,208,0,121,208,51,0,119,0,57,0,141,208,157,2,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,67,120,208,2,0,119,0,43,0,141,208,148,2,25,87,208,12,141,208,154,2,19,208,208,200,0,159,208,0,141,204,145,9,1,210,176,0,3,208,204,210,143,208,32,1,26,208,159,1,143,208,158,2,25,208,87,1,143,208,159,2,141,208,158,2,32,208,208,0,120,208,34,0,141,210,32,1,25,208,210,1,143,208,160,2,141,210,159,2,78,208,210,0,143,208,112,1,141,210,160,2,78,208,210,0,143,208,161,2,141,208,112,1,41,208,208,24,42,208,208,24,141,210,161,2,41,210,210,24,42,210,210,24,45,208,208,210,240,147,0,0,141,208,159,2,0,87,208,0,141,208,158,2,0,159,208,0,141,210,160,2,0,208,210,0,143,208,32,1,119,0,225,255,119,0,1,0,141,210,148,2,102,208,210,60,143,208,163,2,141,208,148,2,141,210,163,2,39,210,210,1,107,208,60,210,141,208,148,2,25,208,208,12,141,204,145,9,1,209,176,0,3,204,204,209,135,210,62,0,208,204,0,0,141,204,145,9,1,208,176,0,3,204,204,208,102,210,204,11,143,210,164,2,141,210,164,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,204,145,9,1,208,176,0,94,210,204,208,143,210,165,2,141,204,165,2,135,210,21,0,204,0,0,0,141,210,145,9,1,204,176,0,1,208,0,0,97,210,204,208,141,208,145,9,1,204,176,0,3,208,208,204,1,204,0,0,109,208,4,204,141,204,145,9,1,208,176,0,3,204,204,208,1,208,0,0,109,204,8,208,141,208,145,9,1,204,176,0,3,208,208,204,1,204,9,0,107,208,11,204,141,208,145,9,1,210,176,0,3,204,208,210,143,204,143,9,2,204,0,0,222,86,21,0,143,204,146,9,141,210,143,9,25,204,210,9,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,228,148,0,0,141,210,145,9,1,204,176,0,3,210,210,204,1,204,0,0,107,210,9,204,2,210,0,0,172,208,221,0,1,208,1,0,141,209,145,9,1,211,176,0,3,209,209,211,135,204,72,0,210,208,209,0,143,204,166,2,141,209,145,9,1,208,176,0,3,209,209,208,102,204,209,11,143,204,167,2,141,204,167,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,208,176,0,94,204,209,208,143,204,169,2,141,209,169,2,135,204,21,0,209,0,0,0,141,204,145,9,1,209,176,0,1,208,0,0,97,204,209,208,141,208,145,9,1,209,176,0,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,176,0,3,209,209,208,1,208,0,0,109,209,8,208,141,208,145,9,1,209,176,0,3,208,208,209,1,209,5,0,107,208,11,209,141,209,145,9,1,208,176,0,2,204,0,0,170,60,21,0,78,204,204,0,95,209,208,204,141,204,145,9,1,208,176,0,3,204,204,208,2,208,0,0,170,60,21,0,102,208,208,1,107,204,1,208,141,208,145,9,1,204,176,0,3,208,208,204,2,204,0,0,170,60,21,0,102,204,204,2,107,208,2,204,141,204,145,9,1,208,176,0,3,204,204,208,2,208,0,0,170,60,21,0,102,208,208,3,107,204,3,208,141,208,145,9,1,204,176,0,3,208,208,204,2,204,0,0,170,60,21,0,102,204,204,4,107,208,4,204,141,204,145,9,1,208,176,0,3,204,204,208,1,208,0,0,107,204,5,208,141,204,166,2,106,208,204,56,143,208,170,2,141,208,170,2,34,208,208,2,121,208,108,0,141,204,166,2,25,204,204,12,102,208,204,11,143,208,171,2,141,204,166,2,106,208,204,16,143,208,173,2,141,209,171,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,173,2,0,204,209,0,119,0,4,0,141,209,171,2,19,209,209,200,0,204,209,0,0,208,204,0,143,208,174,2,141,208,174,2,32,208,208,5,121,208,78,0,141,204,166,2,106,208,204,12,143,208,175,2,141,208,171,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,13,0,141,204,175,2,141,209,145,9,1,210,176,0,3,209,209,210,1,210,5,0,135,208,61,0,204,209,210,0,143,208,181,2,141,208,181,2,32,208,208,0,121,208,59,0,119,0,65,0,141,210,145,9,1,209,176,0,94,208,210,209,143,208,176,2,141,208,176,2,19,208,208,200,41,208,208,24,42,208,208,24,141,210,175,2,19,210,210,200,41,210,210,24,42,210,210,24,52,208,208,210,128,151,0,0,119,0,43,0,141,208,166,2,25,88,208,12,141,208,171,2,19,208,208,200,0,160,208,0,141,210,145,9,1,209,176,0,3,208,210,209,143,208,33,1,26,208,160,1,143,208,177,2,25,208,88,1,143,208,178,2,141,208,177,2,32,208,208,0,120,208,34,0,141,209,33,1,25,208,209,1,143,208,179,2,141,209,178,2,78,208,209,0,143,208,113,1,141,209,179,2,78,208,209,0,143,208,180,2,141,208,113,1,41,208,208,24,42,208,208,24,141,209,180,2,41,209,209,24,42,209,209,24,45,208,208,209,36,152,0,0,141,208,178,2,0,88,208,0,141,208,177,2,0,160,208,0,141,209,179,2,0,208,209,0,143,208,33,1,119,0,225,255,119,0,1,0,141,209,166,2,102,208,209,60,143,208,183,2,141,208,166,2,141,209,183,2,39,209,209,1,107,208,60,209,141,208,166,2,25,208,208,12,141,210,145,9,1,204,176,0,3,210,210,204,135,209,62,0,208,210,0,0,141,210,145,9,1,208,176,0,3,210,210,208,102,209,210,11,143,209,184,2,141,209,184,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,210,145,9,1,208,176,0,94,209,210,208,143,209,185,2,141,210,185,2,135,209,21,0,210,0,0,0,141,209,145,9,1,210,176,0,1,208,0,0,97,209,210,208,141,208,145,9,1,210,176,0,3,208,208,210,1,210,0,0,109,208,4,210,141,210,145,9,1,208,176,0,3,210,210,208,1,208,0,0,109,210,8,208,1,210,32,0,135,208,26,0,210,0,0,0,143,208,186,2,141,208,145,9,1,210,176,0,141,209,186,2,97,208,210,209,141,209,145,9,1,210,176,0,3,209,209,210,2,210,0,0,32,0,0,128,109,209,8,210,141,210,145,9,1,209,176,0,3,210,210,209,1,209,18,0,109,210,4,209,141,210,186,2,0,209,210,0,143,209,143,9,2,209,0,0,232,86,21,0,143,209,146,9,141,210,143,9,25,209,210,18,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,76,153,0,0,141,210,186,2,1,209,0,0,107,210,18,209,2,210,0,0,172,208,221,0,1,208,1,0,141,204,145,9,1,211,176,0,3,204,204,211,135,209,72,0,210,208,204,0,143,209,187,2,141,204,145,9,1,208,176,0,3,204,204,208,102,209,204,11,143,209,188,2,141,209,188,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,204,145,9,1,208,176,0,94,209,204,208,143,209,189,2,141,204,189,2,135,209,21,0,204,0,0,0,141,209,145,9,1,204,176,0,1,208,0,0,97,209,204,208,141,208,145,9,1,204,176,0,3,208,208,204,1,204,0,0,109,208,4,204,141,204,145,9,1,208,176,0,3,204,204,208,1,208,0,0,109,204,8,208,141,208,145,9,1,204,176,0,3,208,208,204,1,204,9,0,107,208,11,204,141,208,145,9,1,209,176,0,3,204,208,209,143,204,143,9,2,204,0,0,176,60,21,0,143,204,146,9,141,209,143,9,25,204,209,9,143,204,147,9,141,204,143,9,141,209,146,9,78,209,209,0,83,204,209,0,141,204,143,9,25,209,204,1,143,209,143,9,141,204,146,9,25,209,204,1,143,209,146,9,141,209,143,9,141,204,147,9,54,209,209,204,108,154,0,0,141,209,145,9,1,204,176,0,3,209,209,204,1,204,0,0,107,209,9,204,141,209,187,2,106,204,209,56,143,204,190,2,141,204,190,2,34,204,204,2,121,204,108,0,141,209,187,2,25,209,209,12,102,204,209,11,143,204,192,2,141,209,187,2,106,204,209,16,143,204,193,2,141,208,192,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,193,2,0,209,208,0,119,0,4,0,141,208,192,2,19,208,208,200,0,209,208,0,0,204,209,0,143,204,194,2,141,204,194,2,32,204,204,9,121,204,78,0,141,209,187,2,106,204,209,12,143,204,195,2,141,204,192,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,13,0,141,209,195,2,141,208,145,9,1,210,176,0,3,208,208,210,1,210,9,0,135,204,61,0,209,208,210,0,143,204,202,2,141,204,202,2,32,204,204,0,121,204,59,0,119,0,65,0,141,210,145,9,1,208,176,0,94,204,210,208,143,204,196,2,141,204,196,2,19,204,204,200,41,204,204,24,42,204,204,24,141,210,195,2,19,210,210,200,41,210,210,24,42,210,210,24,52,204,204,210,184,155,0,0,119,0,43,0,141,204,187,2,25,89,204,12,141,204,192,2,19,204,204,200,0,161,204,0,141,210,145,9,1,208,176,0,3,204,210,208,143,204,34,1,26,204,161,1,143,204,198,2,25,204,89,1,143,204,199,2,141,204,198,2,32,204,204,0,120,204,34,0,141,208,34,1,25,204,208,1,143,204,200,2,141,208,199,2,78,204,208,0,143,204,114,1,141,208,200,2,78,204,208,0,143,204,201,2,141,204,114,1,41,204,204,24,42,204,204,24,141,208,201,2,41,208,208,24,42,208,208,24,45,204,204,208,92,156,0,0,141,204,199,2,0,89,204,0,141,204,198,2,0,161,204,0,141,208,200,2,0,204,208,0,143,204,34,1,119,0,225,255,119,0,1,0,141,208,187,2,102,204,208,60,143,204,203,2,141,204,187,2,141,208,203,2,39,208,208,1,107,204,60,208,141,204,187,2,25,204,204,12,141,210,145,9,1,209,176,0,3,210,210,209,135,208,62,0,204,210,0,0,141,210,145,9,1,204,176,0,3,210,210,204,102,208,210,11,143,208,204,2,141,208,204,2,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,204,176,0,94,208,210,204,143,208,205,2,141,210,205,2,135,208,21,0,210,0,0,0,141,208,145,9,1,210,176,0,1,204,0,0,97,208,210,204,141,204,145,9,1,210,176,0,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,176,0,3,210,210,204,1,204,0,0,109,210,8,204,1,210,16,0,135,204,26,0,210,0,0,0,143,204,206,2,141,204,145,9,1,210,176,0,141,208,206,2,97,204,210,208,141,208,145,9,1,210,176,0,3,208,208,210,2,210,0,0,16,0,0,128,109,208,8,210,141,210,145,9,1,208,176,0,3,210,210,208,1,208,11,0,109,210,4,208,141,210,206,2,0,208,210,0,143,208,143,9,2,208,0,0,7,89,21,0,143,208,146,9,141,210,143,9,25,208,210,11,143,208,147,9,141,208,143,9,141,210,146,9,78,210,210,0,83,208,210,0,141,208,143,9,25,210,208,1,143,210,143,9,141,208,146,9,25,210,208,1,143,210,146,9,141,210,143,9,141,208,147,9,54,210,210,208,132,157,0,0,141,210,206,2,1,208,0,0,107,210,11,208,2,210,0,0,172,208,221,0,1,204,0,0,141,209,145,9,1,211,176,0,3,209,209,211,135,208,72,0,210,204,209,0,143,208,208,2,141,208,145,9,25,208,208,112,1,209,0,0,109,208,4,209,141,209,145,9,25,209,209,112,25,209,209,4,1,208,0,0,109,209,4,208,141,208,145,9,25,208,208,112,1,209,3,0,107,208,11,209,141,209,145,9,2,208,0,0,186,60,21,0,78,208,208,0,107,209,112,208,141,208,145,9,25,208,208,112,2,209,0,0,186,60,21,0,102,209,209,1,107,208,1,209,141,209,145,9,25,209,209,112,2,208,0,0,186,60,21,0,102,208,208,2,107,209,2,208,141,208,145,9,25,208,208,112,1,209,0,0,107,208,3,209,141,208,208,2,106,209,208,56,143,209,210,2,141,209,210,2,34,209,209,2,121,209,105,0,141,208,208,2,25,208,208,12,102,209,208,11,143,209,211,2,141,208,208,2,106,209,208,16,143,209,212,2,141,204,211,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,212,2,0,208,204,0,119,0,4,0,141,204,211,2,19,204,204,200,0,208,204,0,0,209,208,0,143,209,213,2,141,209,213,2,32,209,209,3,121,209,75,0,141,208,208,2,106,209,208,12,143,209,214,2,141,209,211,2,41,209,209,24,42,209,209,24,34,209,209,0,121,209,12,0,141,208,214,2,141,204,145,9,25,204,204,112,1,210,3,0,135,209,61,0,208,204,210,0,143,209,221,2,141,209,221,2,32,209,209,0,121,209,57,0,119,0,63,0,141,210,145,9,106,209,210,112,143,209,215,2,141,209,215,2,19,209,209,200,41,209,209,24,42,209,209,24,141,210,214,2,19,210,210,200,41,210,210,24,42,210,210,24,52,209,209,210,108,159,0,0,119,0,42,0,141,209,208,2,25,90,209,12,141,209,211,2,19,209,209,200,0,162,209,0,141,210,145,9,25,209,210,112,143,209,35,1,26,209,162,1,143,209,216,2,25,209,90,1,143,209,217,2,141,209,216,2,32,209,209,0,120,209,34,0,141,210,35,1,25,209,210,1,143,209,219,2,141,210,217,2,78,209,210,0,143,209,115,1,141,210,219,2,78,209,210,0,143,209,220,2,141,209,115,1,41,209,209,24,42,209,209,24,141,210,220,2,41,210,210,24,42,210,210,24,45,209,209,210,12,160,0,0,141,209,217,2,0,90,209,0,141,209,216,2,0,162,209,0,141,210,219,2], eb + 30720);
  HEAPU8.set([0,209,210,0,143,209,35,1,119,0,225,255,119,0,1,0,141,210,208,2,102,209,210,60,143,209,222,2,141,209,208,2,141,210,222,2,39,210,210,1,107,209,60,210,141,209,208,2,25,209,209,12,141,204,145,9,25,204,204,112,135,210,62,0,209,204,0,0,141,210,208,2,1,204,168,0,109,210,64,204,141,210,145,9,25,210,210,112,102,204,210,11,143,204,223,2,141,204,223,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,106,204,210,112,143,204,225,2,141,210,225,2,135,204,21,0,210,0,0,0,141,210,145,9,1,209,176,0,3,210,210,209,102,204,210,11,143,204,226,2,141,204,226,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,209,176,0,94,204,210,209,143,204,227,2,141,210,227,2,135,204,21,0,210,0,0,0,1,204,1,0,143,204,46,1,141,204,145,9,141,210,46,1,97,204,201,210,141,204,145,9,1,209,176,0,3,204,204,209,2,209,0,0,124,80,21,0,141,208,145,9,3,208,208,201,135,210,73,0,204,209,208,0,141,210,145,9,1,208,48,1,141,209,46,1,97,210,208,209,141,208,145,9,25,208,208,112,2,210,0,0,190,60,21,0,141,204,145,9,1,211,48,1,3,204,204,211,135,209,73,0,208,210,204,0,141,209,145,9,1,204,144,2,1,210,0,0,97,209,204,210,141,210,145,9,1,204,144,2,3,210,210,204,1,204,0,0,109,210,4,204,141,204,145,9,1,210,144,2,3,204,204,210,1,210,0,0,109,204,8,210,141,204,145,9,1,209,176,0,3,204,204,209,135,210,41,0,204,0,0,0,143,210,231,2,1,210,239,255,141,204,231,2,48,210,210,204,168,161,0,0,1,210,240,1,143,210,144,9,119,0,116,1,141,210,231,2,35,210,210,11,121,210,20,0,141,210,145,9,1,204,144,2,3,210,210,204,141,204,231,2,19,204,204,200,107,210,11,204,141,204,231,2,32,204,204,0,121,204,5,0,141,204,145,9,1,210,144,2,3,24,204,210,119,0,36,0,141,210,145,9,1,204,144,2,3,14,210,204,1,204,244,1,143,204,144,9,119,0,30,0,141,210,231,2,25,210,210,16,38,210,210,240,135,204,26,0,210,0,0,0,143,204,233,2,141,204,145,9,1,210,144,2,141,209,233,2,97,204,210,209,141,209,145,9,1,210,144,2,3,209,209,210,141,210,231,2,25,210,210,16,38,210,210,240,2,204,0,0,0,0,0,128,20,210,210,204,109,209,8,210,141,210,145,9,1,209,144,2,3,210,210,209,141,209,231,2,109,210,4,209,141,209,233,2,0,14,209,0,1,209,244,1,143,209,144,9,141,209,144,9,1,210,244,1,45,209,209,210,168,162,0,0,1,209,0,0,143,209,144,9,141,210,145,9,1,204,176,0,3,210,210,204,141,204,231,2,135,209,43,0,14,210,204,0,0,24,14,0,141,204,231,2,3,209,24,204,143,209,234,2,141,209,234,2,1,204,0,0,83,209,204,0,2,209,0,0,172,208,221,0,1,210,0,0,141,208,145,9,1,211,144,2,3,208,208,211,135,204,72,0,209,210,208,0,143,204,235,2,141,204,145,9,1,208,0,0,85,204,208,0,141,208,145,9,1,204,0,0,109,208,4,204,141,204,145,9,1,208,0,0,109,204,8,208,141,204,145,9,25,204,204,112,135,208,41,0,204,0,0,0,143,208,236,2,1,208,239,255,141,204,236,2,48,208,208,204,56,163,0,0,1,208,246,1,143,208,144,9,119,0,16,1,141,208,236,2,35,208,208,11,121,208,16,0,141,208,145,9,141,204,236,2,19,204,204,200,107,208,11,204,141,204,236,2,32,204,204,0,121,204,4,0,141,204,145,9,0,25,204,0,119,0,30,0,141,204,145,9,0,15,204,0,1,204,250,1,143,204,144,9,119,0,25,0,141,208,236,2,25,208,208,16,38,208,208,240,135,204,26,0,208,0,0,0,143,204,237,2,141,204,145,9,141,208,237,2,85,204,208,0,141,208,145,9,141,204,236,2,25,204,204,16,38,204,204,240,2,210,0,0,0,0,0,128,20,204,204,210,109,208,8,204,141,204,145,9,141,208,236,2,109,204,4,208,141,208,237,2,0,15,208,0,1,208,250,1,143,208,144,9,141,208,144,9,1,204,250,1,45,208,208,204,16,164,0,0,1,208,0,0,143,208,144,9,141,204,145,9,25,204,204,112,141,210,236,2,135,208,43,0,15,204,210,0,0,25,15,0,141,210,236,2,3,208,25,210,143,208,238,2,141,208,238,2,1,210,0,0,83,208,210,0,141,208,235,2,106,210,208,56,143,210,240,2,141,210,240,2,34,210,210,2,121,210,154,0,141,208,235,2,25,208,208,12,102,210,208,11,143,210,241,2,141,208,235,2,106,210,208,16,143,210,242,2,141,204,241,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,242,2,0,208,204,0,119,0,4,0,141,204,241,2,19,204,204,200,0,208,204,0,0,210,208,0,143,210,244,2,141,208,145,9,102,210,208,11,143,210,245,2,141,208,145,9,106,210,208,4,143,210,246,2,141,204,245,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,246,2,0,208,204,0,119,0,4,0,141,204,245,2,19,204,204,200,0,208,204,0,0,210,208,0,143,210,247,2,141,210,244,2,141,208,247,2,45,210,210,208,136,166,0,0,141,208,235,2,106,210,208,12,143,210,248,2,141,204,241,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,248,2,0,208,204,0,119,0,4,0,141,204,235,2,25,204,204,12,0,208,204,0,0,210,208,0,143,210,249,2,141,208,145,9,82,210,208,0,143,210,250,2,141,208,245,2,41,208,208,24,42,208,208,24,34,208,208,0,141,204,250,2,141,209,145,9,125,210,208,204,209,0,0,0,143,210,252,2,141,210,241,2,41,210,210,24,42,210,210,24,34,210,210,0,121,210,14,0,141,210,244,2,32,210,210,0,120,210,75,0,141,209,249,2,141,204,252,2,141,208,244,2,135,210,61,0,209,204,208,0,143,210,3,3,141,210,3,3,32,210,210,0,121,210,59,0,119,0,65,0,141,210,244,2,32,210,210,0,120,210,62,0,141,208,252,2,78,210,208,0,143,210,253,2,141,210,253,2,41,210,210,24,42,210,210,24,141,208,248,2,19,208,208,200,41,208,208,24,42,208,208,24,52,210,210,208,228,165,0,0,119,0,42,0,141,210,235,2,25,91,210,12,141,210,241,2,19,210,210,200,0,163,210,0,141,208,252,2,0,210,208,0,143,210,36,1,26,210,163,1,143,210,254,2,25,210,91,1,143,210,255,2,141,210,254,2,32,210,210,0,120,210,34,0,141,208,36,1,25,210,208,1,143,210,0,3,141,208,255,2,78,210,208,0,143,210,116,1,141,208,0,3,78,210,208,0,143,210,2,3,141,210,116,1,41,210,210,24,42,210,210,24,141,208,2,3,41,208,208,24,42,208,208,24,45,210,210,208,132,166,0,0,141,210,255,2,0,91,210,0,141,210,254,2,0,163,210,0,141,208,0,3,0,210,208,0,143,210,36,1,119,0,225,255,119,0,1,0,141,208,235,2,102,210,208,60,143,210,4,3,141,210,235,2,141,208,4,3,39,208,208,1,107,210,60,208,141,210,235,2,25,210,210,12,141,204,145,9,135,208,62,0,210,204,0,0,141,208,235,2,1,204,168,0,109,208,64,204,141,208,145,9,102,204,208,11,143,204,5,3,141,204,5,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,82,204,208,0,143,204,6,3,141,208,6,3,135,204,21,0,208,0,0,0,141,208,145,9,1,210,144,2,3,208,208,210,102,204,208,11,143,204,7,3,141,204,7,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,210,144,2,94,204,208,210,143,204,8,3,141,208,8,3,135,204,21,0,208,0,0,0,141,208,46,1,25,204,208,1,143,204,9,3,141,204,9,3,35,204,204,11,121,204,5,0,141,208,9,3,0,204,208,0,143,204,46,1,119,0,93,254,1,204,238,1,143,204,144,9,119,0,1,0,141,204,144,9,1,208,238,1,45,204,204,208,92,180,1,0,141,204,145,9,1,208,48,1,1,210,0,0,97,204,208,210,141,210,145,9,1,208,48,1,3,210,210,208,1,208,0,0,109,210,4,208,141,208,145,9,1,210,48,1,3,208,208,210,1,210,0,0,109,208,8,210,1,208,16,0,135,210,26,0,208,0,0,0,143,210,228,2,141,210,145,9,1,208,48,1,141,204,228,2,97,210,208,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,16,0,0,128,109,204,8,208,141,208,145,9,1,204,48,1,3,208,208,204,1,204,15,0,109,208,4,204,141,208,228,2,0,204,208,0,143,204,143,9,2,204,0,0,251,86,21,0,143,204,146,9,141,208,143,9,25,204,208,15,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,44,168,0,0,141,208,228,2,1,204,0,0,107,208,15,204,2,208,0,0,172,208,221,0,1,210,1,0,141,209,145,9,1,211,48,1,3,209,209,211,135,204,72,0,208,210,209,0,143,204,229,2,141,209,145,9,1,210,48,1,3,209,209,210,102,204,209,11,143,204,230,2,141,204,230,2,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,210,48,1,94,204,209,210,143,204,10,3,141,209,10,3,135,204,21,0,209,0,0,0,141,204,145,9,1,209,48,1,1,210,0,0,97,204,209,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,48,1,3,209,209,210,1,210,0,0,109,209,8,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,6,0,107,210,11,209,141,209,145,9,1,210,48,1,2,204,0,0,199,60,21,0,78,204,204,0,95,209,210,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,199,60,21,0,102,210,210,1,107,204,1,210,141,210,145,9,1,204,48,1,3,210,210,204,2,204,0,0,199,60,21,0,102,204,204,2,107,210,2,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,199,60,21,0,102,210,210,3,107,204,3,210,141,210,145,9,1,204,48,1,3,210,210,204,2,204,0,0,199,60,21,0,102,204,204,4,107,210,4,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,199,60,21,0,102,210,210,5,107,204,5,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,0,0,107,210,6,204,141,210,229,2,106,204,210,56,143,204,11,3,141,204,11,3,34,204,204,2,121,204,108,0,141,210,229,2,25,210,210,12,102,204,210,11,143,204,13,3,141,210,229,2,106,204,210,16,143,204,14,3,141,209,13,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,14,3,0,210,209,0,119,0,4,0,141,209,13,3,19,209,209,200,0,210,209,0,0,204,210,0,143,204,15,3,141,204,15,3,32,204,204,6,121,204,78,0,141,210,229,2,106,204,210,12,143,204,17,3,141,204,13,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,13,0,141,210,17,3,141,209,145,9,1,208,48,1,3,209,209,208,1,208,6,0,135,204,61,0,210,209,208,0,143,204,24,3,141,204,24,3,32,204,204,0,121,204,59,0,119,0,65,0,141,208,145,9,1,209,48,1,94,204,208,209,143,204,18,3,141,204,18,3,19,204,204,200,41,204,204,24,42,204,204,24,141,208,17,3,19,208,208,200,41,208,208,24,42,208,208,24,52,204,204,208,220,170,0,0,119,0,43,0,141,204,229,2,25,92,204,12,141,204,13,3,19,204,204,200,0,164,204,0,141,208,145,9,1,209,48,1,3,204,208,209,143,204,37,1,26,204,164,1,143,204,19,3,25,204,92,1,143,204,20,3,141,204,19,3,32,204,204,0,120,204,34,0,141,209,37,1,25,204,209,1,143,204,21,3,141,209,20,3,78,204,209,0,143,204,117,1,141,209,21,3,78,204,209,0,143,204,23,3,141,204,117,1,41,204,204,24,42,204,204,24,141,209,23,3,41,209,209,24,42,209,209,24,45,204,204,209,128,171,0,0,141,204,20,3,0,92,204,0,141,204,19,3,0,164,204,0,141,209,21,3,0,204,209,0,143,204,37,1,119,0,225,255,119,0,1,0,141,209,229,2,102,204,209,60,143,204,25,3,141,204,229,2,141,209,25,3,39,209,209,1,107,204,60,209,141,204,229,2,25,204,204,12,141,208,145,9,1,210,48,1,3,208,208,210,135,209,62,0,204,208,0,0,141,208,145,9,1,204,48,1,3,208,208,204,102,209,208,11,143,209,26,3,141,209,26,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,208,145,9,1,204,48,1,94,209,208,204,143,209,27,3,141,208,27,3,135,209,21,0,208,0,0,0,141,209,145,9,1,208,48,1,1,204,0,0,97,209,208,204,141,204,145,9,1,208,48,1,3,204,204,208,1,208,0,0,109,204,4,208,141,208,145,9,1,204,48,1,3,208,208,204,1,204,0,0,109,208,8,204,1,208,16,0,135,204,26,0,208,0,0,0,143,204,28,3,141,204,145,9,1,208,48,1,141,209,28,3,97,204,208,209,141,209,145,9,1,208,48,1,3,209,209,208,2,208,0,0,16,0,0,128,109,209,8,208,141,208,145,9,1,209,48,1,3,208,208,209,1,209,13,0,109,208,4,209,141,208,28,3,0,209,208,0,143,209,143,9,2,209,0,0,155,89,21,0,143,209,146,9,141,208,143,9,25,209,208,13,143,209,147,9,141,209,143,9,141,208,146,9,78,208,208,0,83,209,208,0,141,209,143,9,25,208,209,1,143,208,143,9,141,209,146,9,25,208,209,1,143,208,146,9,141,208,143,9,141,209,147,9,54,208,208,209,168,172,0,0,141,208,28,3,1,209,0,0,107,208,13,209,2,208,0,0,172,208,221,0,1,204,0,0,141,210,145,9,1,211,48,1,3,210,210,211,135,209,72,0,208,204,210,0,143,209,29,3,141,209,145,9,1,210,0,0,97,209,201,210,141,210,145,9,3,210,210,201,1,209,0,0,109,210,4,209,141,209,145,9,3,209,209,201,1,210,0,0,109,209,8,210,1,209,16,0,135,210,26,0,209,0,0,0,143,210,30,3,141,210,145,9,141,209,30,3,97,210,201,209,141,209,145,9,3,209,209,201,2,210,0,0,16,0,0,128,109,209,8,210,141,210,145,9,3,210,210,201,1,209,12,0,109,210,4,209,141,210,30,3,0,209,210,0,143,209,143,9,2,209,0,0,206,60,21,0,143,209,146,9,141,210,143,9,25,209,210,12,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,160,173,0,0,141,210,30,3,1,209,0,0,107,210,12,209,141,210,29,3,106,209,210,56,143,209,31,3,141,209,31,3,34,209,209,2,121,209,97,0,141,210,29,3,25,210,210,12,102,209,210,11,143,209,33,3,141,210,29,3,106,209,210,16,143,209,34,3,141,204,33,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,34,3,0,210,204,0,119,0,4,0,141,204,33,3,19,204,204,200,0,210,204,0,0,209,210,0,143,209,35,3,141,209,35,3,32,209,209,12,121,209,67,0,141,210,29,3,106,209,210,12,143,209,36,3,141,209,33,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,11,0,141,210,36,3,141,204,30,3,1,208,12,0,135,209,61,0,210,204,208,0,143,209,42,3,141,209,42,3,32,209,209,0,121,209,50,0,119,0,56,0,141,209,36,3,19,209,209,200,41,209,209,24,42,209,209,24,32,209,209,70,120,209,2,0,119,0,42,0,141,209,29,3,25,93,209,12,141,209,33,3,19,209,209,200,0,165,209,0,141,208,30,3,0,209,208,0,143,209,38,1,26,209,165,1,143,209,37,3,25,209,93,1,143,209,38,3,141,209,37,3,32,209,209,0,120,209,34,0,141,208,38,1,25,209,208,1,143,209,39,3,141,208,38,3,78,209,208,0,143,209,118,1,141,208,39,3,78,209,208,0,143,209,40,3,141,209,118,1,41,209,209,24,42,209,209,24,141,208,40,3,41,208,208,24,42,208,208,24,45,209,209,208,92,175,0,0,141,209,38,3,0,93,209,0,141,209,37,3,0,165,209,0,141,208,39,3,0,209,208,0,143,209,38,1,119,0,225,255,119,0,1,0,141,208,29,3,102,209,208,60,143,209,43,3,141,209,29,3,141,208,43,3,39,208,208,1,107,209,60,208,141,209,29,3,25,209,209,12,141,204,145,9,3,204,204,201,135,208,62,0,209,204,0,0,141,208,29,3,1,204,169,0,109,208,64,204,141,208,145,9,3,208,208,201,102,204,208,11,143,204,44,3,141,204,44,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,94,204,208,201,143,204,45,3,141,208,45,3,135,204,21,0,208,0,0,0,141,208,145,9,1,209,48,1,3,208,208,209,102,204,208,11,143,204,47,3,141,204,47,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,209,48,1,94,204,208,209,143,204,48,3,141,208,48,3,135,204,21,0,208,0,0,0,2,204,0,0,163,206,21,0,1,208,0,0,52,204,204,208,160,182,0,0,1,204,0,0,143,204,47,1,2,204,0,0,163,206,21,0,143,204,55,3,141,204,145,9,1,208,0,0,97,204,201,208,141,208,145,9,3,208,208,201,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,201,1,208,0,0,109,204,8,208,1,204,16,0,135,208,26,0,204,0,0,0,143,208,53,3,141,208,145,9,141,204,53,3,97,208,201,204,141,204,145,9,3,204,204,201,2,208,0,0,16,0,0,128,109,204,8,208,141,208,145,9,3,208,208,201,1,204,11,0,109,208,4,204,141,208,53,3,0,204,208,0,143,204,143,9,2,204,0,0,27,87,21,0,143,204,146,9,141,208,143,9,25,204,208,11,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,216,176,0,0,141,208,53,3,1,204,0,0,107,208,11,204,141,208,145,9,1,209,48,1,3,208,208,209,141,209,145,9,3,209,209,201,141,210,55,3,135,204,74,0,208,209,210,0,141,210,145,9,3,210,210,201,102,204,210,11,143,204,56,3,141,204,56,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,201,143,204,57,3,141,210,57,3,135,204,21,0,210,0,0,0,2,210,0,0,172,208,221,0,1,209,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,204,72,0,210,209,208,0,143,204,58,3,2,208,0,0,48,91,14,0,141,209,47,1,41,209,209,3,3,208,208,209,25,204,208,4,143,204,59,3,141,208,59,3,82,204,208,0,143,204,60,3,141,204,145,9,1,208,0,0,97,204,201,208,141,208,145,9,3,208,208,201,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,201,1,208,0,0,109,204,8,208,141,204,60,3,135,208,41,0,204,0,0,0,143,208,61,3,1,208,239,255,141,204,61,3,55,208,208,204,144,182,0,0,141,208,61,3,35,208,208,11,121,208,17,0,141,208,145,9,3,208,208,201,141,204,61,3,19,204,204,200,107,208,11,204,141,204,61,3,32,204,204,0,121,204,4,0,141,204,145,9,3,26,204,201,119,0,32,0,141,204,145,9,3,16,204,201,1,204,46,2,143,204,144,9,119,0,27,0,141,208,61,3,25,208,208,16,38,208,208,240,135,204,26,0,208,0,0,0,143,204,62,3,141,204,145,9,141,208,62,3,97,204,201,208,141,208,145,9,3,208,208,201,141,204,61,3,25,204,204,16,38,204,204,240,2,209,0,0,0,0,0,128,20,204,204,209,109,208,8,204,141,204,145,9,3,204,204,201,141,208,61,3,109,204,4,208,141,208,62,3,0,16,208,0,1,208,46,2,143,208,144,9,141,208,144,9,1,204,46,2,45,208,208,204,240,178,0,0,1,208,0,0,143,208,144,9,141,204,60,3,141,209,61,3,135,208,43,0,16,204,209,0,0,26,16,0,141,209,61,3,3,208,26,209,143,208,63,3,141,208,63,3,1,209,0,0,83,208,209,0,141,208,58,3,106,209,208,56,143,209,64,3,141,209,64,3,34,209,209,2,121,209,160,0,141,208,58,3,25,208,208,12,102,209,208,11,143,209,66,3,141,208,58,3,106,209,208,16,143,209,67,3,141,204,66,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,67,3,0,208,204,0,119,0,4,0,141,204,66,3,19,204,204,200,0,208,204,0,0,209,208,0,143,209,68,3,141,208,145,9,3,208,208,201,102,209,208,11,143,209,69,3,141,208,145,9,3,208,208,201,106,209,208,4,143,209,71,3,141,204,69,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,71,3,0,208,204,0,119,0,4,0,141,204,69,3,19,204,204,200,0,208,204,0,0,209,208,0,143,209,72,3,141,209,68,3,141,208,72,3,45,209,209,208,128,181,0,0,141,208,58,3,106,209,208,12,143,209,73,3,141,204,66,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,73,3,0,208,204,0,119,0,4,0,141,204,58,3,25,204,204,12,0,208,204,0,0,209,208,0,143,209,74,3,141,208,145,9,94,209,208,201,143,209,75,3,141,204,69,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,75,3,0,208,204,0,119,0,4,0,141,204,145,9,3,204,204,201,0,208,204,0,0,209,208,0,143,209,76,3,141,209,66,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,14,0,141,209,68,3,32,209,209,0,120,209,75,0,141,208,74,3,141,204,76,3,141,210,68,3,135,209,61,0,208,204,210,0,143,209,83,3,141,209,83,3,32,209,209,0,121,209,59,0,119,0,65,0,141,209,68,3,32,209,209,0,120,209,62,0,141,210,76,3,78,209,210,0,143,209,78,3,141,209,78,3,41,209,209,24,42,209,209,24,141,210,73,3,19,210,210,200,41,210,210,24,42,210,210,24,52,209,209,210,220,180,0,0,119,0,42,0,141,209,58,3,25,94,209,12,141,209,66,3,19,209,209,200,0,166,209,0,141,210,76,3,0,209,210,0,143,209,39,1,26,209,166,1,143,209,79,3,25,209,94,1,143,209,80,3,141,209,79,3,32,209,209,0,120,209,34,0,141,210,39,1,25,209,210,1,143,209,81,3,141,210,80,3,78,209,210,0,143,209,119,1,141,210,81,3,78,209,210,0,143,209,82,3,141,209,119,1,41,209,209,24,42,209,209,24,141,210,82,3,41,210,210,24,42,210,210,24,45,209,209,210,124,181,0,0,141,209,80,3,0,94,209,0,141,209,79,3,0,166,209,0,141,210,81,3,0,209,210,0,143,209,39,1,119,0,225,255,119,0,1,0,141,210,58,3,102,209,210,60,143,209,84,3,141,209,58,3,141,210,84,3,39,210,210,1,107,209,60,210,141,209,58,3,25,209,209,12,141,204,145,9,3,204,204,201,135,210,62,0,209,204,0,0,141,210,58,3,1,204,170,0,109,210,64,204,141,210,145,9,3,210,210,201,102,204,210,11,143,204,85,3,141,204,85,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,201,143,204,86,3,141,210,86,3,135,204,21,0,210,0,0,0,141,210,145,9,1,209,48,1,3,210,210,209,102,204,210,11,143,204,87,3,141,204,87,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,209,48,1,94,204,210,209,143,204,88,3,141,210,88,3,135,204,21,0,210,0,0,0,141,210,47,1,25,204,210,1,143,204,89,3,2,210,0,0,48,91,14,0,141,209,89,3,41,209,209,3,94,204,210,209,143,204,90,3,141,204,90,3,1,210,0,0,52,204,204,210,160,182,0,0,141,210,89,3,0,204,210,0,143,204,47,1,141,210,90,3,0,204,210,0,143,204,55,3,119,0,111,254,141,210,145,9,3,210,210,201,135,204,42,0,210,0,0,0,141,204,145,9,1,210,48,1,1,209,0,0,97,204,210,209,141,209,145,9,1,210,48,1,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,0,0,109,210,8,209,1,210,16,0,135,209,26,0,210,0,0,0,143,209,50,3,141,209,145,9,1,210,48,1,141,204,50,3,97,209,210,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,16,0,0,128,109,204,8,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,15,0,109,210,4,204,141,210,50,3,0,204,210,0,143,204,143,9,2,204,0,0,72,87,21,0,143,204,146,9,141,210,143,9,25,204,210,15,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,72,183,0,0,141,210,50,3,1,204,0,0,107,210,15,204,2,210,0,0,172,208,221,0,1,209,1,0,141,208,145,9,1,211,48,1,3,208,208,211,135,204,72,0,210,209,208,0,143,204,51,3,141,208,145,9,1,209,48,1,3,208,208,209,102,204,208,11,143,204,52,3,141,204,52,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,209,48,1,94,204,208,209,143,204,91,3,141,208,91,3,135,204,21,0,208,0,0,0,141,204,145,9,1,208,48,1,1,209,0,0,97,204,208,209,141,209,145,9,1,208,48,1,3,209,209,208,1,208,0,0,109,209,4,208,141,208,145,9,1,209,48,1,3,208,208,209,1,209,0,0,109,208,8,209,1,208,16,0,135,209,26,0,208,0,0,0,143,209,92,3,141,209,145,9,1,208,48,1,141,204,92,3,97,209,208,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,16,0,0,128,109,204,8,208,141,208,145,9,1,204,48,1,3,208,208,204,1,204,13,0,109,208,4,204,141,208,92,3,0,204,208,0,143,204,143,9,2,204,0,0,219,60,21,0,143,204,146,9,141,208,143,9,25,204,208,13,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,156,184,0,0,141,208,92,3,1,204,0,0,107,208,13,204,141,208,51,3,106,204,208,56,143,204,94,3,141,204,94,3,34,204,204,2,121,204,97,0,141,208,51,3,25,208,208,12,102,204,208,11,143,204,95,3,141,208,51,3,106,204,208,16,143,204,96,3,141,209,95,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,96,3,0,208,209,0,119,0,4,0,141,209,95,3,19,209,209,200,0,208,209,0,0,204,208,0,143,204,98,3,141,204,98,3,32,204,204,13,121,204,67,0,141,208,51,3,106,204,208,12,143,204,99,3,141,204,95,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,208,99,3,141,209,92,3,1,210,13,0,135,204,61,0,208,209,210,0,143,204,104,3,141,204,104,3,32,204,204,0,121,204,50,0,119,0,56,0,141,204,99,3,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,67,120,204,2,0,119,0,42,0,141,204,51,3,25,95,204,12,141,204,95,3,19,204,204,200,0,167,204,0,141,210,92,3,0,204,210,0,143,204,40,1,26,204,167,1,143,204,100,3,25,204,95,1,143,204,101,3,141,204,100,3,32,204,204,0,120,204,34,0,141,210,40,1,25,204,210,1,143,204,102,3,141,210,101,3,78,204,210,0,143,204,120,1,141,210,102,3,78,204,210,0,143,204,103,3,141,204,120,1,41,204,204,24,42,204,204,24,141,210,103,3,41,210,210,24,42,210,210,24,45,204,204,210,88,186,0,0,141,204,101,3,0,95,204,0,141,204,100,3,0,167,204,0,141,210,102,3,0,204,210,0,143,204,40,1,119,0,225,255,119,0,1,0,141,210,51,3,102,204,210,60,143,204,105,3,141,204,51,3,141,210,105,3,39,210,210,1,107,204,60,210,141,204,51,3,25,204,204,12,141,209,145,9,1,208,48,1,3,209,209,208,135,210,62,0,204,209,0,0,141,209,145,9,1,204,48,1,3,209,209,204,102,210,209,11,143,210,106,3,141,210,106,3,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,209,145,9,1,204,48,1,94,210,209,204,143,210,107,3,141,209,107,3,135,210,21,0,209,0,0,0,141,210,145,9,1,209,48,1,1,204,0,0,97,210,209,204,141,204,145,9,1,209,48,1,3,204,204,209,1,209,0,0,109,204,4,209,141,209,145,9,1,204,48,1,3,209,209,204,1,204,0,0,109,209,8,204,1,209,16,0,135,204,26,0,209,0,0,0,143,204,108,3,141,204,145,9,1,209,48,1,141,210,108,3,97,204,209,210,141,210,145,9,1,209,48,1,3,210,210,209,2,209,0,0,16,0,0,128,109,210,8,209,141,209,145,9,1,210,48,1,3,209,209,210,1,210,13,0,109,209,4,210,141,209,108,3,0,210,209,0,143,210,143,9,2,210,0,0,101,88,21,0,143,210,146,9,141,209,143,9,25,210,209,13,143,210,147,9,141,210,143,9,141,209,146,9,78,209,209,0,83,210,209,0,141,210,143,9,25,209,210,1,143,209,143,9,141,210,146,9,25,209,210,1,143,209,146,9,141,209,143,9,141,210,147,9,54,209,209,210,128,187,0,0,141,209,108,3,1,210,0,0,107,209,13,210,2,209,0,0,172,208,221,0,1,204,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,210,72,0,209,204,208,0,143,210,109,3,141,210,145,9,1,208,0,0,97,210,201,208,141,208,145,9,3,208,208,201,1,210,0,0,109,208,4,210,141,210,145,9,3,210,210,201,1,208,0,0,109,210,8,208,1,210,32,0,135,208,26,0,210,0,0,0,143,208,110,3,141,208,145,9,141,210,110,3,97,208,201,210,141,210,145,9,3,210,210,201,2,208,0,0,32,0,0,128,109,210,8,208,141,208,145,9,3,208,208,201,1,210,28,0,109,208,4,210,141,208,110,3,0,210,208,0,143,210,143,9,2,210,0,0,233,60,21,0,143,210,146,9,141,208,143,9,25,210,208,28,143,210,147,9,141,210,143,9,141,208,146,9,78,208,208,0,83,210,208,0,141,210,143,9,25,208,210,1,143,208,143,9,141,210,146,9,25,208,210,1,143,208,146,9,141,208,143,9,141,210,147,9,54,208,208,210,120,188,0,0,141,208,110,3,1,210,0,0,107,208,28,210,141,208,109,3,106,210,208,56,143,210,112,3,141,210,112,3,34,210,210,2,121,210,97,0,141,208,109,3,25,208,208,12,102,210,208,11,143,210,113,3,141,208,109,3,106,210,208,16,143,210,114,3,141,204,113,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,114,3,0,208,204,0,119,0,4,0,141,204,113,3,19,204,204,200,0,208,204,0,0,210,208,0,143,210,115,3,141,210,115,3,32,210,210,28,121,210,67,0,141,208,109,3,106,210,208,12,143,210,117,3,141,210,113,3,41,210,210,24,42,210,210,24,34,210,210,0,121,210,11,0,141,208,117,3,141,204,110,3,1,209,28,0,135,210,61,0,208,204,209,0,143,210,123,3,141,210,123,3,32,210,210,0,121,210,50,0,119,0,56,0,141,210,117,3,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,65,120,210,2,0,119,0,42,0,141,210,109,3,25,96,210,12,141,210,113,3,19,210,210,200,0,168,210,0,141,209,110,3,0,210,209,0,143,210,41,1,26,210,168,1,143,210,118,3,25,210,96,1,143,210,119,3,141,210,118,3,32,210,210,0,120,210,34,0,141,209,41,1,25,210,209,1,143,210,120,3,141,209,119,3,78,210,209,0,143,210,121,1,141,209,120,3,78,210,209,0,143,210,121,3,141,210,121,1,41,210,210,24,42,210,210,24,141,209,121,3,41,209,209,24,42,209,209,24,45,210,210,209,52,190,0,0,141,210,119,3,0,96,210,0,141,210,118,3,0,168,210,0,141,209,120,3,0,210,209,0,143,210,41,1,119,0,225,255,119,0,1,0,141,209,109,3,102,210,209,60,143,210,124,3,141,210,109,3,141,209,124,3,39,209,209,1,107,210,60,209,141,210,109,3,25,210,210,12,141,204,145,9,3,204,204,201,135,209,62,0,210,204,0,0,141,209,109,3,1,204,171,0,109,209,64,204,141,209,145,9,3,209,209,201,102,204,209,11,143,204,125,3,141,204,125,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,209,145,9,94,204,209,201,143,204,126,3,141,209,126,3,135,204,21,0,209,0,0,0,141,209,145,9,1,210,48,1,3,209,209,210,102,204,209,11,143,204,128,3,141,204,128,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,210,48,1,94,204,209,210,143,204,129,3,141,209,129,3,135,204,21,0,209,0,0,0,141,204,145,9,1,209,48,1,3,204,204,209,1,209,10,0,107,204,11,209,141,204,145,9,1,210,48,1,3,209,204,210,143,209,143,9,2,209,0,0,115,88,21,0,143,209,146,9,141,210,143,9,25,209,210,10,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,52,191,0,0,141,210,145,9,1,209,48,1,3,210,210,209,1,209,0,0,107,210,10,209,2,210,0,0,172,208,221,0,1,204,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,209,72,0,210,204,208,0,143,209,130,3,141,209,145,9,3,209,209,201,1,208,10,0,107,209,11,208,141,209,145,9,3,208,209,201,143,208,143,9,2,208,0,0,6,61,21,0,143,208,146,9,141,209,143,9,25,208,209,10,143,208,147,9,141,208,143,9,141,209,146,9,78,209,209,0,83,208,209,0,141,208,143,9,25,209,208,1,143,209,143,9,141,208,146,9,25,209,208,1,143,209,146,9,141,209,143,9,141,208,147,9,54,209,209,208,216,191,0,0,141,209,145,9,3,209,209,201,1,208,0,0,107,209,10,208,141,209,130,3,106,208,209,56,143,208,131,3,141,208,131,3,34,208,208,2,121,208,105,0,141,209,130,3,25,209,209,12,102,208,209,11,143,208,132,3,141,209,130,3,106,208,209,16,143,208,133,3,141,204,132,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,133,3,0,209,204,0,119,0,4,0,141,204,132,3,19,204,204,200,0,209,204,0,0,208,209,0,143,208,134,3,141,208,134,3,32,208,208,10,121,208,75,0,141,209,130,3,106,208,209,12,143,208,136,3,141,208,132,3,41,208,208,24,42,208,208,24,34,208,208,0,121,208,12,0,141,209,136,3,141,204,145,9,3,204,204,201,1,210,10,0,135,208,61,0,209,204,210,0,143,208,143,3,141,208,143,3,32,208,208,0,121,208,57,0,119,0,63,0,141,210,145,9,94,208,210,201,143,208,137,3,141,208,137,3,19,208,208,200,41,208,208,24,42,208,208,24,141,210,136,3,19,210,210,200,41,210,210,24,42,210,210,24,52,208,208,210,24,193,0,0,119,0,42,0,141,208,130,3,25,97,208,12,141,208,132,3,19,208,208,200,0,169,208,0,141,210,145,9,3,208,210,201,143,208,42,1,26,208,169,1,143,208,138,3,25,208,97,1,143,208,139,3,141,208,138,3,32,208,208,0,120,208,34,0,141,210,42,1,25,208,210,1,143,208,141,3,141,210,139,3,78,208,210,0,143,208,122,1,141,210,141,3,78,208,210,0,143,208,142,3,141,208,122,1,41,208,208,24,42,208,208,24,141,210,142,3,41,210,210,24,42,210,210,24,45,208,208,210,184,193,0,0,141,208,139,3,0,97,208,0,141,208,138,3,0,169,208,0,141,210,141,3,0,208,210,0,143,208,42,1,119,0,225,255,119,0,1,0,141,210,130,3,102,208,210,60,143,208,144,3,141,208,130,3,141,210,144,3,39,210,210,1,107,208,60,210,141,208,130,3,25,208,208,12,141,204,145,9,3,204,204,201,135,210,62,0,208,204,0,0,141,210,130,3,1,204,172,0,109,210,64,204,141,210,145,9,3,210,210,201,102,204,210,11,143,204,145,3,141,204,145,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,201,143,204,147,3,141,210,147,3,135,204,21,0,210,0,0,0,141,210,145,9,1,208,48,1,3,210,210,208,102,204,210,11,143,204,148,3,141,204,148,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,208,48,1,94,204,210,208,143,204,149,3,141,210,149,3,135,204,21,0,210,0,0,0,141,204,145,9,1,210,48,1,1,208,0,0,97,204,210,208,141,208,145,9,1,210,48,1,3,208,208,210,1,210,0,0,109,208,4,210,141,210,145,9,1,208,48,1,3,210,210,208,1,208,0,0,109,210,8,208,1,210,16,0,135,208,26,0,210,0,0,0,143,208,150,3,141,208,145,9,1,210,48,1,141,204,150,3,97,208,210,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,16,0,0,128,109,204,8,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,15,0,109,210,4,204,141,210,150,3,0,204,210,0,143,204,143,9,2,204,0,0,11,87,21,0,143,204,146,9,141,210,143,9,25,204,210,15,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,36,195,0,0,141,210,150,3,1,204,0,0,107,210,15,204,2,210,0,0,172,208,221,0,1,208,1,0,141,209,145,9,1,211,48,1,3,209,209,211,135,204,72,0,210,208,209,0,143,204,151,3,141,209,145,9,1,208,48,1,3,209,209,208,102,204,209,11,143,204,153,3,141,204,153,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,208,48,1,94,204,209,208,143,204,154,3,141,209,154,3,135,204,21,0,209,0,0,0,141,204,145,9,1,209,48,1,1,208,0,0,97,204,209,208,141,208,145,9,1,209,48,1,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,48,1,3,209,209,208,1,208,0,0,109,209,8,208,141,208,145,9,1,209,48,1,3,208,208,209,1,209,6,0,107,208,11,209,141,209,145,9,1,208,48,1,2,204,0,0,17,61,21,0,78,204,204,0,95,209,208,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,17,61,21,0,102,208,208,1,107,204,1,208,141,208,145,9,1,204,48,1,3,208,208,204,2,204,0,0,17,61,21,0,102,204,204,2,107,208,2,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,17,61,21,0,102,208,208,3,107,204,3,208,141,208,145,9,1,204,48,1,3,208,208,204,2,204,0,0,17,61,21,0,102,204,204,4,107,208,4,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,17,61,21,0,102,208,208,5,107,204,5,208,141,208,145,9,1,204,48,1,3,208,208,204,1,204,0,0,107,208,6,204,141,208,151,3,106,204,208,56,143,204,155,3,141,204,155,3,34,204,204,2,121,204,108,0,141,208,151,3,25,208,208,12,102,204,208,11,143,204,156,3,141,208,151,3,106,204,208,16,143,204,157,3,141,209,156,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,157,3,0,208,209,0,119,0,4,0,141,209,156,3,19,209,209,200,0,208,209,0,0,204,208,0,143,204,158,3,141,204,158,3,32,204,204,6,121,204,78,0,141,208,151,3,106,204,208,12,143,204,159,3,141,204,156,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,13,0,141,208,159,3,141,209,145,9,1,210,48,1,3,209,209,210,1,210,6,0,135,204,61,0,208,209,210,0,143,204,166,3,141,204,166,3,32,204,204,0,121,204,59,0,119,0,65,0,141,210,145,9,1,209,48,1,94,204,210,209,143,204,160,3,141,204,160,3,19,204,204,200,41,204,204,24,42,204,204,24,141,210,159,3,19,210,210,200,41,210,210,24,42,210,210,24,52,204,204,210,212,197,0,0,119,0,43,0,141,204,151,3,25,98,204,12,141,204,156,3,19,204,204,200,0,170,204,0,141,210,145,9,1,209,48,1,3,204,210,209,143,204,43,1,26,204,170,1,143,204,162,3,25,204,98,1,143,204,163,3,141,204,162,3,32,204,204,0,120,204,34,0,141,209,43,1,25,204,209,1,143,204,164,3,141,209,163,3,78,204,209,0,143,204,123,1,141,209,164,3,78,204,209,0,143,204,165,3,141,204,123,1,41,204,204,24,42,204,204,24,141,209,165,3,41,209,209,24,42,209,209,24,45,204,204,209,120,198,0,0,141,204,163,3,0,98,204,0,141,204,162,3,0,170,204,0,141,209,164,3,0,204,209,0,143,204,43,1,119,0,225,255,119,0,1,0,141,209,151,3,102,204,209,60,143,204,167,3,141,204,151,3,141,209,167,3,39,209,209,1,107,204,60,209,141,204,151,3,25,204,204,12,141,210,145,9,1,208,48,1,3,210,210,208,135,209,62,0,204,210,0,0,141,210,145,9,1,204,48,1,3,210,210,204,102,209,210,11,143,209,168,3,141,209,168,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,210,145,9,1,204,48,1,94,209,210,204,143,209,169,3,141,210,169,3,135,209,21,0,210,0,0,0,141,209,145,9,1,210,48,1,1,204,0,0,97,209,210,204,141,204,145,9,1,210,48,1,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,0,0,109,210,8,204,1,210,16,0,135,204,26,0,210,0,0,0,143,204,170,3,141,204,145,9,1,210,48,1,141,209,170,3,97,204,210,209,141,209,145,9,1,210,48,1,3,209,209,210,2,210,0,0,16,0,0,128,109,209,8,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,14,0,109,210,4,209,141,210,170,3,0,209,210,0,143,209,143,9,2,209,0,0,248,88,21,0,143,209,146,9,141,210,143,9,25,209,210,14,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,160,199,0,0,141,210,170,3,1,209,0,0,107,210,14,209,2,210,0,0,172,208,221,0,1,204,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,209,72,0], eb + 40960);
  HEAPU8.set([210,204,208,0,143,209,172,3,141,209,145,9,3,209,209,201,1,208,0,0,109,209,8,208,141,208,145,9,3,208,208,201,1,209,7,0,107,208,11,209,141,209,145,9,2,208,0,0,24,61,21,0,78,208,208,0,95,209,201,208,141,208,145,9,3,208,208,201,2,209,0,0,24,61,21,0,102,209,209,1,107,208,1,209,141,209,145,9,3,209,209,201,2,208,0,0,24,61,21,0,102,208,208,2,107,209,2,208,141,208,145,9,3,208,208,201,2,209,0,0,24,61,21,0,102,209,209,3,107,208,3,209,141,209,145,9,3,209,209,201,2,208,0,0,24,61,21,0,102,208,208,4,107,209,4,208,141,208,145,9,3,208,208,201,2,209,0,0,24,61,21,0,102,209,209,5,107,208,5,209,141,209,145,9,3,209,209,201,2,208,0,0,24,61,21,0,102,208,208,6,107,209,6,208,141,208,145,9,3,208,208,201,1,209,0,0,107,208,7,209,141,208,172,3,106,209,208,56,143,209,173,3,141,209,173,3,34,209,209,2,121,209,102,0,141,208,172,3,25,208,208,12,102,209,208,11,143,209,174,3,141,208,172,3,106,209,208,16,143,209,176,3,141,204,174,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,176,3,0,208,204,0,119,0,4,0,141,204,174,3,19,204,204,200,0,208,204,0,0,209,208,0,143,209,177,3,141,209,177,3,32,209,209,7,121,209,72,0,141,208,172,3,106,209,208,12,143,209,178,3,141,209,174,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,12,0,141,208,178,3,141,204,145,9,3,204,204,201,1,210,7,0,135,209,61,0,208,204,210,0,143,209,185,3,141,209,185,3,32,209,209,0,121,209,54,0,119,0,60,0,141,210,145,9,94,209,210,201,143,209,179,3,141,209,179,3,19,209,209,200,41,209,209,24,42,209,209,24,141,210,178,3,19,210,210,200,41,210,210,24,42,210,210,24,52,209,209,210,212,201,0,0,119,0,39,0,141,209,172,3,25,29,209,12,141,209,174,3,19,209,209,200,0,101,209,0,141,209,145,9,3,174,209,201,26,209,101,1,143,209,181,3,25,209,29,1,143,209,182,3,141,209,181,3,32,209,209,0,120,209,32,0,25,209,174,1,143,209,183,3,141,210,182,3,78,209,210,0,143,209,54,1,141,210,183,3,78,209,210,0,143,209,184,3,141,209,54,1,41,209,209,24,42,209,209,24,141,210,184,3,41,210,210,24,42,210,210,24,45,209,209,210,104,202,0,0,141,209,182,3,0,29,209,0,141,209,181,3,0,101,209,0,141,209,183,3,0,174,209,0,119,0,227,255,119,0,1,0,141,210,172,3,102,209,210,60,143,209,187,3,141,209,172,3,141,210,187,3,39,210,210,1,107,209,60,210,141,209,172,3,25,209,209,12,141,204,145,9,3,204,204,201,135,210,62,0,209,204,0,0,141,210,172,3,1,204,173,0,109,210,64,204,141,210,145,9,3,210,210,201,102,204,210,11,143,204,188,3,141,204,188,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,201,143,204,189,3,141,210,189,3,135,204,21,0,210,0,0,0,141,210,145,9,1,209,48,1,3,210,210,209,102,204,210,11,143,204,190,3,141,204,190,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,209,48,1,94,204,210,209,143,204,191,3,141,210,191,3,135,204,21,0,210,0,0,0,141,204,145,9,1,210,48,1,1,209,0,0,97,204,210,209,141,209,145,9,1,210,48,1,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,0,0,109,210,8,209,1,210,16,0,135,209,26,0,210,0,0,0,143,209,193,3,141,209,145,9,1,210,48,1,141,204,193,3,97,209,210,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,16,0,0,128,109,204,8,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,15,0,109,210,4,204,141,210,193,3,0,204,210,0,143,204,143,9,2,204,0,0,113,53,21,0,143,204,146,9,141,210,143,9,25,204,210,15,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,212,203,0,0,141,210,193,3,1,204,0,0,107,210,15,204,2,210,0,0,172,208,221,0,1,209,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,204,72,0,210,209,208,0,143,204,194,3,141,204,145,9,1,208,0,0,97,204,201,208,141,208,145,9,3,208,208,201,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,201,1,208,0,0,109,204,8,208,141,208,145,9,3,208,208,201,1,204,8,0,107,208,11,204,141,204,145,9,2,208,0,0,68,105,114,101,97,204,201,208,141,208,145,9,3,208,208,201,2,204,0,0,99,116,51,68,109,208,4,204,141,204,145,9,3,204,204,201,1,208,0,0,107,204,8,208,141,204,194,3,106,208,204,56,143,208,195,3,141,208,195,3,34,208,208,2,121,208,95,0,141,204,194,3,25,204,204,12,102,208,204,11,143,208,196,3,141,204,194,3,106,208,204,16,143,208,197,3,141,209,196,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,197,3,0,204,209,0,119,0,4,0,141,209,196,3,19,209,209,200,0,204,209,0,0,208,204,0,143,208,199,3,141,208,199,3,32,208,208,8,121,208,65,0,141,204,194,3,106,208,204,12,143,208,200,3,141,208,196,3,41,208,208,24,42,208,208,24,34,208,208,0,121,208,12,0,141,204,200,3,141,209,145,9,3,209,209,201,1,210,8,0,135,208,61,0,204,209,210,0,143,208,206,3,141,208,206,3,32,208,208,0,121,208,47,0,119,0,53,0,141,208,200,3,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,68,120,208,2,0,119,0,39,0,141,208,194,3,25,30,208,12,141,208,196,3,19,208,208,200,0,102,208,0,141,208,145,9,3,175,208,201,26,208,102,1,143,208,201,3,25,208,30,1,143,208,202,3,141,208,201,3,32,208,208,0,120,208,32,0,25,208,175,1,143,208,204,3,141,210,202,3,78,208,210,0,143,208,55,1,141,210,204,3,78,208,210,0,143,208,205,3,141,208,55,1,41,208,208,24,42,208,208,24,141,210,205,3,41,210,210,24,42,210,210,24,45,208,208,210,28,206,0,0,141,208,202,3,0,30,208,0,141,208,201,3,0,102,208,0,141,208,204,3,0,175,208,0,119,0,227,255,119,0,1,0,141,210,194,3,102,208,210,60,143,208,207,3,141,208,194,3,141,210,207,3,39,210,210,1,107,208,60,210,141,208,194,3,25,208,208,12,141,209,145,9,3,209,209,201,135,210,62,0,208,209,0,0,141,210,194,3,1,209,173,0,109,210,64,209,141,210,145,9,3,210,210,201,102,209,210,11,143,209,208,3,141,209,208,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,210,145,9,94,209,210,201,143,209,210,3,141,210,210,3,135,209,21,0,210,0,0,0,141,210,145,9,1,208,48,1,3,210,210,208,102,209,210,11,143,209,211,3,141,209,211,3,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,210,145,9,1,208,48,1,94,209,210,208,143,209,212,3,141,210,212,3,135,209,21,0,210,0,0,0,141,209,145,9,1,210,48,1,1,208,0,0,97,209,210,208,141,208,145,9,1,210,48,1,3,208,208,210,1,210,0,0,109,208,4,210,141,210,145,9,1,208,48,1,3,210,210,208,1,208,0,0,109,210,8,208,1,210,16,0,135,208,26,0,210,0,0,0,143,208,213,3,141,208,145,9,1,210,48,1,141,209,213,3,97,208,210,209,141,209,145,9,1,210,48,1,3,209,209,210,2,210,0,0,16,0,0,128,109,209,8,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,13,0,109,210,4,209,141,210,213,3,0,209,210,0,143,209,143,9,2,209,0,0,32,61,21,0,143,209,146,9,141,210,143,9,25,209,210,13,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,136,207,0,0,141,210,213,3,1,209,0,0,107,210,13,209,2,210,0,0,172,208,221,0,1,208,0,0,141,204,145,9,1,211,48,1,3,204,204,211,135,209,72,0,210,208,204,0,143,209,214,3,141,209,145,9,1,204,0,0,97,209,201,204,141,204,145,9,3,204,204,201,1,209,0,0,109,204,4,209,141,209,145,9,3,209,209,201,1,204,0,0,109,209,8,204,141,204,145,9,3,204,204,201,1,209,6,0,107,204,11,209,141,209,145,9,2,204,0,0,46,61,21,0,78,204,204,0,95,209,201,204,141,204,145,9,3,204,204,201,2,209,0,0,46,61,21,0,102,209,209,1,107,204,1,209,141,209,145,9,3,209,209,201,2,204,0,0,46,61,21,0,102,204,204,2,107,209,2,204,141,204,145,9,3,204,204,201,2,209,0,0,46,61,21,0,102,209,209,3,107,204,3,209,141,209,145,9,3,209,209,201,2,204,0,0,46,61,21,0,102,204,204,4,107,209,4,204,141,204,145,9,3,204,204,201,2,209,0,0,46,61,21,0,102,209,209,5,107,204,5,209,141,209,145,9,3,209,209,201,1,204,0,0,107,209,6,204,141,209,214,3,106,204,209,56,143,204,215,3,141,204,215,3,34,204,204,2,121,204,102,0,141,209,214,3,25,209,209,12,102,204,209,11,143,204,216,3,141,209,214,3,106,204,209,16,143,204,218,3,141,208,216,3,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,218,3,0,209,208,0,119,0,4,0,141,208,216,3,19,208,208,200,0,209,208,0,0,204,209,0,143,204,219,3,141,204,219,3,32,204,204,6,121,204,72,0,141,209,214,3,106,204,209,12,143,204,220,3,141,204,216,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,12,0,141,209,220,3,141,208,145,9,3,208,208,201,1,210,6,0,135,204,61,0,209,208,210,0,143,204,227,3,141,204,227,3,32,204,204,0,121,204,54,0,119,0,60,0,141,210,145,9,94,204,210,201,143,204,221,3,141,204,221,3,19,204,204,200,41,204,204,24,42,204,204,24,141,210,220,3,19,210,210,200,41,210,210,24,42,210,210,24,52,204,204,210,192,209,0,0,119,0,39,0,141,204,214,3,25,31,204,12,141,204,216,3,19,204,204,200,0,103,204,0,141,204,145,9,3,176,204,201,26,204,103,1,143,204,223,3,25,204,31,1,143,204,224,3,141,204,223,3,32,204,204,0,120,204,32,0,25,204,176,1,143,204,225,3,141,210,224,3,78,204,210,0,143,204,56,1,141,210,225,3,78,204,210,0,143,204,226,3,141,204,56,1,41,204,204,24,42,204,204,24,141,210,226,3,41,210,210,24,42,210,210,24,45,204,204,210,84,210,0,0,141,204,224,3,0,31,204,0,141,204,223,3,0,103,204,0,141,204,225,3,0,176,204,0,119,0,227,255,119,0,1,0,141,210,214,3,102,204,210,60,143,204,228,3,141,204,214,3,141,210,228,3,39,210,210,1,107,204,60,210,141,204,214,3,25,204,204,12,141,208,145,9,3,208,208,201,135,210,62,0,204,208,0,0,141,210,214,3,1,208,173,0,109,210,64,208,141,210,145,9,3,210,210,201,102,208,210,11,143,208,230,3,141,208,230,3,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,210,145,9,94,208,210,201,143,208,231,3,141,210,231,3,135,208,21,0,210,0,0,0,141,210,145,9,1,204,48,1,3,210,210,204,102,208,210,11,143,208,232,3,141,208,232,3,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,204,48,1,94,208,210,204,143,208,233,3,141,210,233,3,135,208,21,0,210,0,0,0,141,208,145,9,1,210,48,1,1,204,0,0,97,208,210,204,141,204,145,9,1,210,48,1,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,0,0,109,210,8,204,1,210,16,0,135,204,26,0,210,0,0,0,143,204,234,3,141,204,145,9,1,210,48,1,141,208,234,3,97,204,210,208,141,208,145,9,1,210,48,1,3,208,208,210,2,210,0,0,16,0,0,128,109,208,8,210,141,210,145,9,1,208,48,1,3,210,210,208,1,208,15,0,109,210,4,208,141,210,234,3,0,208,210,0,143,208,143,9,2,208,0,0,53,61,21,0,143,208,146,9,141,210,143,9,25,208,210,15,143,208,147,9,141,208,143,9,141,210,146,9,78,210,210,0,83,208,210,0,141,208,143,9,25,210,208,1,143,210,143,9,141,208,146,9,25,210,208,1,143,210,146,9,141,210,143,9,141,208,147,9,54,210,210,208,192,211,0,0,141,210,234,3,1,208,0,0,107,210,15,208,2,210,0,0,172,208,221,0,1,204,0,0,141,209,145,9,1,211,48,1,3,209,209,211,135,208,72,0,210,204,209,0,143,208,235,3,141,208,145,9,1,209,0,0,97,208,201,209,141,209,145,9,3,209,209,201,1,208,0,0,109,209,4,208,141,208,145,9,3,208,208,201,1,209,0,0,109,208,8,209,141,209,145,9,3,209,209,201,1,208,9,0,107,209,11,208,141,209,145,9,3,208,209,201,143,208,143,9,2,208,0,0,69,61,21,0,143,208,146,9,141,209,143,9,25,208,209,9,143,208,147,9,141,208,143,9,141,209,146,9,78,209,209,0,83,208,209,0,141,208,143,9,25,209,208,1,143,209,143,9,141,208,146,9,25,209,208,1,143,209,146,9,141,209,143,9,141,208,147,9,54,209,209,208,136,212,0,0,141,209,145,9,3,209,209,201,1,208,0,0,107,209,9,208,141,209,235,3,106,208,209,56,143,208,236,3,141,208,236,3,34,208,208,2,121,208,102,0,141,209,235,3,25,209,209,12,102,208,209,11,143,208,237,3,141,209,235,3,106,208,209,16,143,208,238,3,141,204,237,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,238,3,0,209,204,0,119,0,4,0,141,204,237,3,19,204,204,200,0,209,204,0,0,208,209,0,143,208,239,3,141,208,239,3,32,208,208,9,121,208,72,0,141,209,235,3,106,208,209,12,143,208,240,3,141,208,237,3,41,208,208,24,42,208,208,24,34,208,208,0,121,208,12,0,141,209,240,3,141,204,145,9,3,204,204,201,1,210,9,0,135,208,61,0,209,204,210,0,143,208,247,3,141,208,247,3,32,208,208,0,121,208,54,0,119,0,60,0,141,210,145,9,94,208,210,201,143,208,241,3,141,208,241,3,19,208,208,200,41,208,208,24,42,208,208,24,141,210,240,3,19,210,210,200,41,210,210,24,42,210,210,24,52,208,208,210,200,213,0,0,119,0,39,0,141,208,235,3,25,32,208,12,141,208,237,3,19,208,208,200,0,104,208,0,141,208,145,9,3,177,208,201,26,208,104,1,143,208,243,3,25,208,32,1,143,208,244,3,141,208,243,3,32,208,208,0,120,208,32,0,25,208,177,1,143,208,245,3,141,210,244,3,78,208,210,0,143,208,57,1,141,210,245,3,78,208,210,0,143,208,246,3,141,208,57,1,41,208,208,24,42,208,208,24,141,210,246,3,41,210,210,24,42,210,210,24,45,208,208,210,92,214,0,0,141,208,244,3,0,32,208,0,141,208,243,3,0,104,208,0,141,208,245,3,0,177,208,0,119,0,227,255,119,0,1,0,141,210,235,3,102,208,210,60,143,208,249,3,141,208,235,3,141,210,249,3,39,210,210,1,107,208,60,210,141,208,235,3,25,208,208,12,141,204,145,9,3,204,204,201,135,210,62,0,208,204,0,0,141,210,235,3,1,204,173,0,109,210,64,204,141,210,145,9,3,210,210,201,102,204,210,11,143,204,250,3,141,204,250,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,201,143,204,251,3,141,210,251,3,135,204,21,0,210,0,0,0,141,210,145,9,1,208,48,1,3,210,210,208,102,204,210,11,143,204,252,3,141,204,252,3,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,208,48,1,94,204,210,208,143,204,253,3,141,210,253,3,135,204,21,0,210,0,0,0,141,204,145,9,1,210,48,1,1,208,0,0,97,204,210,208,141,208,145,9,1,210,48,1,3,208,208,210,1,210,0,0,109,208,4,210,141,210,145,9,1,208,48,1,3,210,210,208,1,208,0,0,109,210,8,208,1,210,16,0,135,208,26,0,210,0,0,0,143,208,254,3,141,208,145,9,1,210,48,1,141,204,254,3,97,208,210,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,16,0,0,128,109,204,8,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,14,0,109,210,4,204,141,210,254,3,0,204,210,0,143,204,143,9,2,204,0,0,39,87,21,0,143,204,146,9,141,210,143,9,25,204,210,14,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,200,215,0,0,141,210,254,3,1,204,0,0,107,210,14,204,2,210,0,0,172,208,221,0,1,208,1,0,141,209,145,9,1,211,48,1,3,209,209,211,135,204,72,0,210,208,209,0,143,204,255,3,141,209,145,9,1,208,48,1,3,209,209,208,102,204,209,11,143,204,0,4,141,204,0,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,208,48,1,94,204,209,208,143,204,1,4,141,209,1,4,135,204,21,0,209,0,0,0,141,204,145,9,1,209,48,1,1,208,0,0,97,204,209,208,141,208,145,9,1,209,48,1,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,48,1,3,209,209,208,1,208,0,0,109,209,8,208,141,208,145,9,1,209,48,1,3,208,208,209,1,209,6,0,107,208,11,209,141,209,145,9,1,208,48,1,2,204,0,0,79,61,21,0,78,204,204,0,95,209,208,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,79,61,21,0,102,208,208,1,107,204,1,208,141,208,145,9,1,204,48,1,3,208,208,204,2,204,0,0,79,61,21,0,102,204,204,2,107,208,2,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,79,61,21,0,102,208,208,3,107,204,3,208,141,208,145,9,1,204,48,1,3,208,208,204,2,204,0,0,79,61,21,0,102,204,204,4,107,208,4,204,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,79,61,21,0,102,208,208,5,107,204,5,208,141,208,145,9,1,204,48,1,3,208,208,204,1,204,0,0,107,208,6,204,141,208,255,3,106,204,208,56,143,204,2,4,141,204,2,4,34,204,204,2,121,204,105,0,141,208,255,3,25,208,208,12,102,204,208,11,143,204,3,4,141,208,255,3,106,204,208,16,143,204,4,4,141,209,3,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,4,4,0,208,209,0,119,0,4,0,141,209,3,4,19,209,209,200,0,208,209,0,0,204,208,0,143,204,5,4,141,204,5,4,32,204,204,6,121,204,75,0,141,208,255,3,106,204,208,12,143,204,6,4,141,204,3,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,13,0,141,208,6,4,141,209,145,9,1,210,48,1,3,209,209,210,1,210,6,0,135,204,61,0,208,209,210,0,143,204,13,4,141,204,13,4,32,204,204,0,121,204,56,0,119,0,62,0,141,210,145,9,1,209,48,1,94,204,210,209,143,204,7,4,141,204,7,4,19,204,204,200,41,204,204,24,42,204,204,24,141,210,6,4,19,210,210,200,41,210,210,24,42,210,210,24,52,204,204,210,120,218,0,0,119,0,40,0,141,204,255,3,25,33,204,12,141,204,3,4,19,204,204,200,0,105,204,0,141,204,145,9,1,210,48,1,3,178,204,210,26,210,105,1,143,210,9,4,25,210,33,1,143,210,10,4,141,210,9,4,32,210,210,0,120,210,32,0,25,210,178,1,143,210,11,4,141,204,10,4,78,210,204,0,143,210,58,1,141,204,11,4,78,210,204,0,143,210,12,4,141,210,58,1,41,210,210,24,42,210,210,24,141,204,12,4,41,204,204,24,42,204,204,24,45,210,210,204,16,219,0,0,141,210,10,4,0,33,210,0,141,210,9,4,0,105,210,0,141,210,11,4,0,178,210,0,119,0,227,255,119,0,1,0,141,204,255,3,102,210,204,60,143,210,14,4,141,210,255,3,141,204,14,4,39,204,204,1,107,210,60,204,141,210,255,3,25,210,210,12,141,209,145,9,1,208,48,1,3,209,209,208,135,204,62,0,210,209,0,0,141,209,145,9,1,210,48,1,3,209,209,210,102,204,209,11,143,204,16,4,141,204,16,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,210,48,1,94,204,209,210,143,204,17,4,141,209,17,4,135,204,21,0,209,0,0,0,141,204,145,9,1,209,48,1,1,210,0,0,97,204,209,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,48,1,3,209,209,210,1,210,0,0,109,209,8,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,8,0,107,210,11,209,141,209,145,9,1,210,48,1,2,204,0,0,118,115,121,110,97,209,210,204,141,204,145,9,1,210,48,1,3,204,204,210,2,210,0,0,99,95,111,110,109,204,4,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,0,0,107,210,8,204,2,210,0,0,172,208,221,0,1,209,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,204,72,0,210,209,208,0,143,204,18,4,141,204,145,9,1,208,0,0,97,204,201,208,141,208,145,9,3,208,208,201,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,201,1,208,0,0,109,204,8,208,141,208,145,9,3,208,208,201,1,204,2,0,107,208,11,204,141,204,145,9,1,208,79,110,96,204,201,208,141,208,145,9,3,208,208,201,1,204,0,0,107,208,2,204,141,208,18,4,106,204,208,56,143,204,20,4,141,204,20,4,34,204,204,2,121,204,102,0,141,208,18,4,25,208,208,12,102,204,208,11,143,204,21,4,141,208,18,4,106,204,208,16,143,204,22,4,141,209,21,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,22,4,0,208,209,0,119,0,4,0,141,209,21,4,19,209,209,200,0,208,209,0,0,204,208,0,143,204,23,4,141,204,23,4,32,204,204,2,121,204,72,0,141,208,18,4,106,204,208,12,143,204,24,4,141,204,21,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,12,0,141,208,24,4,141,209,145,9,3,209,209,201,1,210,2,0,135,204,61,0,208,209,210,0,143,204,31,4,141,204,31,4,32,204,204,0,121,204,54,0,119,0,60,0,141,210,145,9,94,204,210,201,143,204,25,4,141,204,25,4,19,204,204,200,41,204,204,24,42,204,204,24,141,210,24,4,19,210,210,200,41,210,210,24,42,210,210,24,52,204,204,210,144,221,0,0,119,0,39,0,141,204,18,4,25,34,204,12,141,204,21,4,19,204,204,200,0,106,204,0,141,204,145,9,3,179,204,201,26,204,106,1,143,204,27,4,25,204,34,1,143,204,28,4,141,204,27,4,32,204,204,0,120,204,32,0,25,204,179,1,143,204,29,4,141,210,28,4,78,204,210,0,143,204,59,1,141,210,29,4,78,204,210,0,143,204,30,4,141,204,59,1,41,204,204,24,42,204,204,24,141,210,30,4,41,210,210,24,42,210,210,24,45,204,204,210,36,222,0,0,141,204,28,4,0,34,204,0,141,204,27,4,0,106,204,0,141,204,29,4,0,179,204,0,119,0,227,255,119,0,1,0,141,210,18,4,102,204,210,60,143,204,32,4,141,204,18,4,141,210,32,4,39,210,210,1,107,204,60,210,141,204,18,4,25,204,204,12,141,209,145,9,3,209,209,201,135,210,62,0,204,209,0,0,141,210,18,4,1,209,174,0,109,210,64,209,141,210,145,9,3,210,210,201,102,209,210,11,143,209,33,4,141,209,33,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,210,145,9,94,209,210,201,143,209,34,4,141,210,34,4,135,209,21,0,210,0,0,0,141,210,145,9,1,204,48,1,3,210,210,204,102,209,210,11,143,209,35,4,141,209,35,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,210,145,9,1,204,48,1,94,209,210,204,143,209,36,4,141,210,36,4,135,209,21,0,210,0,0,0,141,209,145,9,1,210,48,1,1,204,0,0,97,209,210,204,141,204,145,9,1,210,48,1,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,0,0,109,210,8,204,1,210,16,0,135,204,26,0,210,0,0,0,143,204,37,4,141,204,145,9,1,210,48,1,141,209,37,4,97,204,210,209,141,209,145,9,1,210,48,1,3,209,209,210,2,210,0,0,16,0,0,128,109,209,8,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,11,0,109,210,4,209,141,210,37,4,0,209,210,0,143,209,143,9,2,209,0,0,54,178,21,0,143,209,146,9,141,210,143,9,25,209,210,11,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,144,223,0,0,141,210,37,4,1,209,0,0,107,210,11,209,2,210,0,0,172,208,221,0,1,204,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,209,72,0,210,204,208,0,143,209,39,4,141,209,145,9,1,208,0,0,97,209,201,208,141,208,145,9,3,208,208,201,1,209,0,0,109,208,4,209,141,209,145,9,3,209,209,201,1,208,0,0,109,209,8,208,141,208,145,9,3,208,208,201,1,209,5,0,107,208,11,209,141,209,145,9,2,208,0,0,86,61,21,0,78,208,208,0,95,209,201,208,141,208,145,9,3,208,208,201,2,209,0,0,86,61,21,0,102,209,209,1,107,208,1,209,141,209,145,9,3,209,209,201,2,208,0,0,86,61,21,0,102,208,208,2,107,209,2,208,141,208,145,9,3,208,208,201,2,209,0,0,86,61,21,0,102,209,209,3,107,208,3,209,141,209,145,9,3,209,209,201,2,208,0,0,86,61,21,0,102,208,208,4,107,209,4,208,141,208,145,9,3,208,208,201,1,209,0,0,107,208,5,209,141,208,39,4,106,209,208,56,143,209,40,4,141,209,40,4,34,209,209,2,121,209,102,0,141,208,39,4,25,208,208,12,102,209,208,11,143,209,41,4,141,208,39,4,106,209,208,16,143,209,42,4,141,204,41,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,42,4,0,208,204,0,119,0,4,0,141,204,41,4,19,204,204,200,0,208,204,0,0,209,208,0,143,209,43,4,141,209,43,4,32,209,209,5,121,209,72,0,141,208,39,4,106,209,208,12,143,209,44,4,141,209,41,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,12,0,141,208,44,4,141,204,145,9,3,204,204,201,1,210,5,0,135,209,61,0,208,204,210,0,143,209,51,4,141,209,51,4,32,209,209,0,121,209,54,0,119,0,60,0,141,210,145,9,94,209,210,201,143,209,45,4,141,209,45,4,19,209,209,200,41,209,209,24,42,209,209,24,141,210,44,4,19,210,210,200,41,210,210,24,42,210,210,24,52,209,209,210,176,225,0,0,119,0,39,0,141,209,39,4,25,35,209,12,141,209,41,4,19,209,209,200,0,107,209,0,141,209,145,9,3,180,209,201,26,209,107,1,143,209,47,4,25,209,35,1,143,209,48,4,141,209,47,4,32,209,209,0,120,209,32,0,25,209,180,1,143,209,49,4,141,210,48,4,78,209,210,0,143,209,60,1,141,210,49,4,78,209,210,0,143,209,50,4,141,209,60,1,41,209,209,24,42,209,209,24,141,210,50,4,41,210,210,24,42,210,210,24,45,209,209,210,68,226,0,0,141,209,48,4,0,35,209,0,141,209,47,4,0,107,209,0,141,209,49,4,0,180,209,0,119,0,227,255,119,0,1,0,141,210,39,4,102,209,210,60,143,209,52,4,141,209,39,4,141,210,52,4,39,210,210,1,107,209,60,210,141,209,39,4,25,209,209,12,141,204,145,9,3,204,204,201,135,210,62,0,209,204,0,0,141,210,39,4,1,204,174,0,109,210,64,204,141,210,145,9,3,210,210,201,102,204,210,11,143,204,53,4,141,204,53,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,201,143,204,54,4,141,210,54,4,135,204,21,0,210,0,0,0,141,210,145,9,1,209,48,1,3,210,210,209,102,204,210,11,143,204,55,4,141,204,55,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,209,48,1,94,204,210,209,143,204,56,4,141,210,56,4,135,204,21,0,210,0,0,0,141,204,145,9,1,210,48,1,3,204,204,210,1,210,10,0,107,204,11,210,141,204,145,9,1,209,48,1,3,210,204,209,143,210,143,9,2,210,0,0,66,178,21,0,143,210,146,9,141,209,143,9,25,210,209,10,143,210,147,9,141,210,143,9,141,209,146,9,78,209,209,0,83,210,209,0,141,210,143,9,25,209,210,1,143,209,143,9,141,210,146,9,25,209,210,1,143,209,146,9,141,209,143,9,141,210,147,9,54,209,209,210,68,227,0,0,141,209,145,9,1,210,48,1,3,209,209,210,1,210,0,0,107,209,10,210,2,209,0,0,172,208,221,0,1,204,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,210,72,0,209,204,208,0,143,210,58,4,141,210,145,9,1,208,0,0,97,210,201,208,141,208,145,9,3,208,208,201,1,210,0,0,109,208,4,210,141,210,145,9,3,210,210,201,1,208,0,0,109,210,8,208,141,208,145,9,3,208,208,201,1,210,4,0,107,208,11,210,141,210,145,9,2,208,0,0,72,111,115,116,97,210,201,208,141,208,145,9,3,208,208,201,1,210,0,0,107,208,4,210,141,208,58,4,106,210,208,56,143,210,59,4,141,210,59,4,34,210,210,2,121,210,95,0,141,208,58,4,25,208,208,12,102,210,208,11,143,210,60,4,141,208,58,4,106,210,208,16,143,210,61,4,141,204,60,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,61,4,0,208,204,0,119,0,4,0,141,204,60,4,19,204,204,200,0,208,204,0,0,210,208,0,143,210,62,4,141,210,62,4,32,210,210,4,121,210,65,0,141,208,58,4,106,210,208,12,143,210,63,4,141,210,60,4,41,210,210,24,42,210,210,24,34,210,210,0,121,210,12,0,141,208,63,4,141,204,145,9,3,204,204,201,1,209,4,0,135,210,61,0,208,204,209,0,143,210,69,4,141,210,69,4,32,210,210,0,121,210,47,0,119,0,53,0,141,210,63,4,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,72,120,210,2,0,119,0,39,0,141,210,58,4,25,36,210,12,141,210,60,4,19,210,210,200,0,108,210,0,141,210,145,9,3,181,210,201,26,210,108,1,143,210,65,4,25,210,36,1,143,210,66,4,141,210,65,4,32,210,210,0,120,210,32,0,25,210,181,1,143,210,67,4,141,209,66,4,78,210,209,0,143,210,61,1,141,209,67,4,78,210,209,0,143,210,68,4,141,210,61,1,41,210,210,24,42,210,210,24,141,209,68,4,41,209,209,24,42,209,209,24,45,210,210,209,128,229,0,0,141,210,66,4,0,36,210,0,141,210,65,4,0,108,210,0,141,210,67,4,0,181,210,0,119,0,227,255,119,0,1,0,141,209,58,4,102,210,209,60,143,210,70,4,141,210,58,4,141,209,70,4,39,209,209,1,107,210,60,209,141,210,58,4,25,210,210,12,141,204,145,9,3,204,204,201,135,209,62,0,210,204,0,0,141,209,58,4,1,204,174,0,109,209,64,204,141,209,145,9,3,209,209,201,102,204,209,11,143,204,72,4,141,204,72,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,209,145,9,94,204,209,201,143,204,73,4,141,209,73,4,135,204,21,0,209,0,0,0,141,209,145,9,1,210,48,1,3,209,209,210,102,204,209,11,143,204,74,4,141,204,74,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,210,48,1,94,204,209,210,143,204,75,4,141,209,75,4,135,204,21,0,209,0,0,0,141,204,145,9,1,209,48,1,1,210,0,0,97,204,209,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,48,1,3,209,209,210,1,210,0,0,109,209,8,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,9,0,107,210,11,209,141,210,145,9,1,204,48,1,3,209,210,204,143,209,143,9,2,209,0,0,44,178,21,0,143,209,146,9,141,204,143,9,25,209,204,9,143,209,147,9,141,209,143,9,141,204,146,9,78,204,204,0,83,209,204,0,141,209,143,9,25,204,209,1,143,204,143,9,141,209,146,9,25,204,209,1,143,204,146,9,141,204,143,9,141,209,147,9,54,204,204,209,184,230,0,0,141,204,145,9,1,209,48,1,3,204,204,209,1,209,0,0,107,204,9,209,2,204,0,0,172,208,221,0,1,210,0,0,141,208,145,9,1,211,48,1,3,208,208,211,135,209,72,0,204,210,208,0,143,209,77,4,141,209,145,9,3,209,209,201,1,208,0,0,109,209,4,208,141,208,145,9,3,208,208,201,25,208,208,4,1,209,0,0,109,208,4,209,141,209,145,9,3,209,209,201,1,208,3,0,107,209,11,208,141,208,145,9,2,209,0,0,186,60,21,0,78,209,209,0,95,208,201,209,141,209,145,9,3,209,209,201,2,208,0,0,186,60,21,0,102,208,208,1,107,209,1,208,141,208,145,9,3,208,208,201,2,209,0,0,186,60,21,0,102,209,209,2,107,208,2,209,141,209,145,9,3,209,209,201,1,208,0,0,107,209,3,208,141,209,77,4,106,208,209,56,143,208,78,4,141,208,78,4,34,208,208,2,121,208,102,0,141,209,77,4,25,209,209,12,102,208,209,11,143,208,79,4,141,209,77,4,106,208,209,16,143,208,80,4,141,210,79,4,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,80,4,0,209,210,0,119,0,4,0,141,210,79,4,19,210,210,200,0,209,210,0,0,208,209,0,143,208,81,4,141,208,81,4,32,208,208,3,121,208,72,0,141,209,77,4,106,208,209,12,143,208,83,4,141,208,79,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,12,0,141,209,83,4,141,210,145,9,3,210,210,201,1,204,3,0,135,208,61,0,209,210,204,0,143,208,90,4,141,208,90,4,32,208,208,0,121,208,54,0,119,0,60,0,141,204,145,9,94,208,204,201,143,208,84,4,141,208,84,4,19,208,208,200,41,208,208,24,42,208,208,24,141,204,83,4,19,204,204,200,41,204,204,24,42,204,204,24,52,208,208,204,168,232,0,0,119,0,39,0,141,208,77,4,25,37,208,12,141,208,79,4,19,208,208,200,0,109,208,0,141,208,145,9,3,182,208,201,26,208,109,1,143,208,85,4,25,208,37,1,143,208,86,4,141,208,85,4,32,208,208,0,120,208,32,0,25,208,182,1,143,208,87,4,141,204,86,4,78,208,204,0,143,208,62,1,141,204,87,4,78,208,204,0,143,208,89,4,141,208,62,1,41,208,208,24,42,208,208,24,141,204,89,4,41,204,204,24,42,204,204,24,45,208,208,204,60,233,0,0,141,208,86,4,0,37,208,0,141,208,85,4,0,109,208,0,141,208,87,4,0,182,208,0,119,0,227,255,119,0,1,0,141,204,77,4,102,208,204,60,143,208,91,4,141,208,77,4,141,204,91,4,39,204,204,1,107,208,60,204,141,208,77,4,25,208,208,12,141,210,145,9,3,210,210,201,135,204,62,0,208,210,0,0,141,204,77,4,1,210,174,0,109,204,64,210,141,204,145,9,3,204,204,201,102,210,204,11,143,210,92,4,141,210,92,4,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,204,145,9,94,210,204,201,143,210,93,4,141,204,93,4,135,210,21,0,204,0,0,0,141,204,145,9,1,208,48,1,3,204,204,208,102,210,204,11,143,210,95,4,141,210,95,4,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,204,145,9,1,208,48,1,94,210,204,208,143,210,96,4,141,204,96,4,135,210,21,0,204,0,0,0,141,210,145,9,1,204,48,1,1,208,0,0,97,210,204,208,141,208,145,9,1,204,48,1,3,208,208,204,1,204,0,0,109,208,4,204,141,204,145,9,1,208,48,1,3,204,204,208,1,208,0,0,109,204,8,208,1,204,32,0,135,208,26,0,204,0,0,0,143,208,97,4,141,208,145,9,1,204,48,1,141,210,97,4,97,208,204,210,141,210,145,9,1,204,48,1,3,210,210,204,2,204,0,0,32,0,0,128,109,210,8,204,141,204,145,9,1,210,48,1,3,204,204,210,1,210,18,0,109,204,4,210,141,204,97,4,0,210,204,0,143,210,143,9,2,210,0,0,92,61,21,0,143,210,146,9,141,204,143,9,25,210,204,18,143,210,147,9,141,210,143,9,141,204,146,9,78,204,204,0,83,210,204,0,141,210,143,9,25,204,210,1,143,204,143,9,141,210,146,9,25,204,210,1,143,204,146,9,141,204,143,9,141,210,147,9,54,204,204,210,168,234,0,0,141,204,97,4,1,210,0,0,107,204,18,210,2,204,0,0,172,208,221,0,1,208,0,0,141,209,145,9,1,211,48,1,3,209,209,211,135,210,72,0,204,208,209,0,143,210,98,4,141,210,145,9,1,209,0,0,97,210,201,209,141,209,145,9,3,209,209,201,1,210,0,0,109,209,4,210,141,210,145,9,3,210,210,201,1,209,0,0,109,210,8,209,1,210,16,0,135,209,26,0,210,0,0,0,143,209,99,4,141,209,145,9,141,210,99,4,97,209,201,210,141,210,145,9,3,210,210,201,2,209,0,0,16,0,0,128,109,210,8,209,141,209,145,9,3,209,209,201,1,210,12,0,109,209,4,210,141,209,99,4,0,210,209,0,143,210,143,9,2,210,0,0,111,61,21,0,143,210,146,9,141,209,143,9,25,210,209,12,143,210,147,9,141,210,143,9,141,209,146,9,78,209,209,0,83,210,209,0,141,210,143,9,25,209,210,1,143,209,143,9,141,210,146,9,25,209,210,1,143,209,146,9,141,209,143,9,141,210,147,9,54,209,209,210,160,235,0,0,141,209,99,4,1,210,0,0,107,209,12,210,141,209,98,4,106,210,209,56,143,210,100,4,141,210,100,4,34,210,210,2,121,210,94,0,141,209,98,4,25,209,209,12,102,210,209,11,143,210,101,4,141,209,98,4,106,210,209,16,143,210,103,4,141,208,101,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,103,4,0,209,208,0,119,0,4,0,141,208,101,4,19,208,208,200,0,209,208,0,0,210,209,0,143,210,104,4,141,210,104,4,32,210,210,12,121,210,64,0,141,209,98,4,106,210,209,12,143,210,105,4,141,210,101,4,41,210,210,24,42,210,210,24,34,210,210,0,121,210,11,0,141,209,105,4,141,208,99,4,1,204,12,0,135,210,61,0,209,208,204,0,143,210,110,4,141,210,110,4,32,210,210,0,121,210,47,0,119,0,53,0,141,210,105,4,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,83,120,210,2,0,119,0,39,0,141,210,98,4,25,38,210,12,141,210,101,4,19,210,210,200,0,110,210,0,141,210,99,4,0,183,210,0,26,210,110,1,143,210,106,4,25,210,38,1,143,210,107,4,141,210,106,4,32,210,210,0,120,210,32,0,25,210,183,1,143,210,108,4,141,204,107,4,78,210,204,0,143,210,63,1,141,204,108,4,78,210,204,0,143,210,109,4,141,210,63,1,41,210,210,24,42,210,210,24,141,204,109,4,41,204,204,24,42,204,204,24,45,210,210,204,80,237,0,0,141,210,107,4,0,38,210,0,141,210,106,4,0,110,210,0,141,210,108,4,0,183,210,0,119,0,227,255,119,0,1,0,141,204,98,4,102,210,204,60,143,210,111,4,141,210,98,4,141,204,111,4,39,204,204,1,107,210,60,204,141,210,98,4,25,210,210,12,141,208,145,9,3,208,208,201,135,204,62,0,210,208,0,0,141,204,98,4,1,208,175,0,109,204,64,208,141,204,145,9,3,204,204,201,102,208,204,11,143,208,112,4,141,208,112,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,204,145,9,94,208,204,201,143,208,113,4,141,204,113,4,135,208,21,0,204,0,0,0,141,204,145,9,1,210,48,1,3,204,204,210,102,208,204,11,143,208,114,4,141,208,114,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,204,145,9,1,210,48,1,94,208,204,210,143,208,115,4,141,204,115,4,135,208,21,0,204,0,0,0,141,208,145,9,1,204,48,1,1,210,0,0,97,208,204,210,141,210,145,9,1,204,48,1,3,210,210,204,1,204,0,0,109,210,4,204,141,204,145,9,1,210,48,1,3,204,204,210,1,210,0,0,109,204,8,210,1,204,32,0,135,210,26,0,204,0,0,0,143,210,116,4,141,210,145,9,1,204,48,1,141,208,116,4,97,210,204,208,141,208,145,9,1,204,48,1,3,208,208,204,2,204,0,0,32,0,0,128,109,208,8,204,141,204,145,9,1,208,48,1,3,204,204,208,1,208,17,0,109,204,4,208,141,204,116,4,0,208,204,0,143,208,143,9,2,208,0,0,54,87,21,0,143,208,146,9,141,204,143,9,25,208,204,17,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,188,238,0,0,141,204,116,4,1,208,0,0,107,204,17,208,2,204,0,0,172,208,221,0,1,210,1,0,141,209,145,9,1,211,48,1,3,209,209,211,135,208,72,0,204,210,209,0,143,208,119,4,141,209,145,9,1,210,48,1,3,209,209,210,102,208,209,11,143,208,120,4,141,208,120,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,210,48,1,94,208,209,210,143,208,121,4,141,209,121,4,135,208,21,0,209,0,0,0,141,208,145,9,1,209,48,1,1,210,0,0,97,208,209,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,48,1,3,209,209,210,1,210,0,0,109,209,8,210,141,210,145,9,1,209,48,1,3,210,210,209,1,209,8,0,107,210,11,209,141,209,145,9,1,210,48,1,2,208,0,0,79,118,101,114,97,209,210,208,141,208,145,9,1,210,48,1,3,208,208,210,2,210,0,0,115,99,97,110,109,208,4,210,141,210,145,9,1,208,48,1,3,210,210,208,1,208,0,0,107,210,8,208,141,210,119,4,106,208,210,56,143,208,123,4], eb + 51200);
  HEAPU8.set([141,208,123,4,34,208,208,2,121,208,97,0,141,210,119,4,25,210,210,12,102,208,210,11,143,208,124,4,141,210,119,4,106,208,210,16,143,208,125,4,141,209,124,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,125,4,0,210,209,0,119,0,4,0,141,209,124,4,19,209,209,200,0,210,209,0,0,208,210,0,143,208,126,4,141,208,126,4,32,208,208,8,121,208,67,0,141,210,119,4,106,208,210,12,143,208,127,4,141,208,124,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,13,0,141,210,127,4,141,209,145,9,1,204,48,1,3,209,209,204,1,204,8,0,135,208,61,0,210,209,204,0,143,208,133,4,141,208,133,4,32,208,208,0,121,208,48,0,119,0,54,0,141,208,127,4,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,79,120,208,2,0,119,0,40,0,141,208,119,4,25,39,208,12,141,208,124,4,19,208,208,200,0,111,208,0,141,208,145,9,1,204,48,1,3,184,208,204,26,204,111,1,143,204,128,4,25,204,39,1,143,204,129,4,141,204,128,4,32,204,204,0,120,204,32,0,25,204,184,1,143,204,131,4,141,208,129,4,78,204,208,0,143,204,64,1,141,208,131,4,78,204,208,0,143,204,132,4,141,204,64,1,41,204,204,24,42,204,204,24,141,208,132,4,41,208,208,24,42,208,208,24,45,204,204,208,108,241,0,0,141,204,129,4,0,39,204,0,141,204,128,4,0,111,204,0,141,204,131,4,0,184,204,0,119,0,227,255,119,0,1,0,141,208,119,4,102,204,208,60,143,204,134,4,141,204,119,4,141,208,134,4,39,208,208,1,107,204,60,208,141,204,119,4,25,204,204,12,141,209,145,9,1,210,48,1,3,209,209,210,135,208,62,0,204,209,0,0,141,209,145,9,1,204,48,1,3,209,209,204,102,208,209,11,143,208,135,4,141,208,135,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,209,145,9,1,204,48,1,94,208,209,204,143,208,137,4,141,209,137,4,135,208,21,0,209,0,0,0,141,208,145,9,1,209,48,1,3,208,208,209,1,209,10,0,107,208,11,209,141,208,145,9,1,204,48,1,3,209,208,204,143,209,143,9,2,209,0,0,126,88,21,0,143,209,146,9,141,204,143,9,25,209,204,10,143,209,147,9,141,209,143,9,141,204,146,9,78,204,204,0,83,209,204,0,141,209,143,9,25,204,209,1,143,204,143,9,141,209,146,9,25,204,209,1,143,204,146,9,141,204,143,9,141,209,147,9,54,204,204,209,40,242,0,0,141,204,145,9,1,209,48,1,3,204,204,209,1,209,0,0,107,204,10,209,2,204,0,0,172,208,221,0,1,208,0,0,141,210,145,9,1,211,48,1,3,210,210,211,135,209,72,0,204,208,210,0,143,209,138,4,141,209,145,9,3,209,209,201,1,210,0,0,109,209,4,210,141,210,145,9,3,210,210,201,25,210,210,4,1,209,0,0,109,210,4,209,141,209,145,9,3,209,209,201,1,210,3,0,107,209,11,210,141,210,145,9,2,209,0,0,186,60,21,0,78,209,209,0,95,210,201,209,141,209,145,9,3,209,209,201,2,210,0,0,186,60,21,0,102,210,210,1,107,209,1,210,141,210,145,9,3,210,210,201,2,209,0,0,186,60,21,0,102,209,209,2,107,210,2,209,141,209,145,9,3,209,209,201,1,210,0,0,107,209,3,210,141,209,138,4,106,210,209,56,143,210,139,4,141,210,139,4,34,210,210,2,121,210,102,0,141,209,138,4,25,209,209,12,102,210,209,11,143,210,140,4,141,209,138,4,106,210,209,16,143,210,141,4,141,208,140,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,141,4,0,209,208,0,119,0,4,0,141,208,140,4,19,208,208,200,0,209,208,0,0,210,209,0,143,210,142,4,141,210,142,4,32,210,210,3,121,210,72,0,141,209,138,4,106,210,209,12,143,210,143,4,141,210,140,4,41,210,210,24,42,210,210,24,34,210,210,0,121,210,12,0,141,209,143,4,141,208,145,9,3,208,208,201,1,204,3,0,135,210,61,0,209,208,204,0,143,210,149,4,141,210,149,4,32,210,210,0,121,210,54,0,119,0,60,0,141,204,145,9,94,210,204,201,143,210,144,4,141,210,144,4,19,210,210,200,41,210,210,24,42,210,210,24,141,204,143,4,19,204,204,200,41,204,204,24,42,204,204,24,52,210,210,204,24,244,0,0,119,0,39,0,141,210,138,4,25,40,210,12,141,210,140,4,19,210,210,200,0,112,210,0,141,210,145,9,3,185,210,201,26,210,112,1,143,210,145,4,25,210,40,1,143,210,146,4,141,210,145,4,32,210,210,0,120,210,32,0,25,210,185,1,143,210,147,4,141,204,146,4,78,210,204,0,143,210,65,1,141,204,147,4,78,210,204,0,143,210,148,4,141,210,65,1,41,210,210,24,42,210,210,24,141,204,148,4,41,204,204,24,42,204,204,24,45,210,210,204,172,244,0,0,141,210,146,4,0,40,210,0,141,210,145,4,0,112,210,0,141,210,147,4,0,185,210,0,119,0,227,255,119,0,1,0,141,204,138,4,102,210,204,60,143,210,150,4,141,210,138,4,141,204,150,4,39,204,204,1,107,210,60,204,141,210,138,4,25,210,210,12,141,208,145,9,3,208,208,201,135,204,62,0,210,208,0,0,141,204,138,4,1,208,176,0,109,204,64,208,141,204,145,9,3,204,204,201,102,208,204,11,143,208,152,4,141,208,152,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,204,145,9,94,208,204,201,143,208,153,4,141,204,153,4,135,208,21,0,204,0,0,0,141,204,145,9,1,210,48,1,3,204,204,210,102,208,204,11,143,208,154,4,141,208,154,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,204,145,9,1,210,48,1,94,208,204,210,143,208,155,4,141,204,155,4,135,208,21,0,204,0,0,0,1,208,1,0,143,208,48,1,141,208,145,9,1,204,160,3,141,210,48,1,97,208,204,210,141,204,145,9,1,208,48,1,3,204,204,208,2,208,0,0,62,29,21,0,141,209,145,9,1,211,160,3,3,209,209,211,135,210,73,0,204,208,209,0,141,210,145,9,141,209,48,1,97,210,202,209,141,210,145,9,3,210,210,201,2,208,0,0,124,61,21,0,141,204,145,9,3,204,204,202,135,209,73,0,210,208,204,0,141,209,145,9,1,204,176,0,1,208,0,0,97,209,204,208,141,208,145,9,1,204,176,0,3,208,208,204,1,204,0,0,109,208,4,204,141,204,145,9,1,208,176,0,3,204,204,208,1,208,0,0,109,204,8,208,141,204,145,9,1,209,48,1,3,204,204,209,135,208,41,0,204,0,0,0,143,208,160,4,1,208,239,255,141,204,160,4,48,208,208,204,72,246,0,0,1,208,17,3,143,208,144,9,119,0,126,1,141,208,160,4,35,208,208,11,121,208,20,0,141,208,145,9,1,204,176,0,3,208,208,204,141,204,160,4,19,204,204,200,107,208,11,204,141,204,160,4,32,204,204,0,121,204,5,0,141,204,145,9,1,208,176,0,3,19,204,208,119,0,36,0,141,208,145,9,1,204,176,0,3,9,208,204,1,204,21,3,143,204,144,9,119,0,30,0,141,208,160,4,25,208,208,16,38,208,208,240,135,204,26,0,208,0,0,0,143,204,161,4,141,204,145,9,1,208,176,0,141,209,161,4,97,204,208,209,141,209,145,9,1,208,176,0,3,209,209,208,141,208,160,4,25,208,208,16,38,208,208,240,2,204,0,0,0,0,0,128,20,208,208,204,109,209,8,208,141,208,145,9,1,209,176,0,3,208,208,209,141,209,160,4,109,208,4,209,141,209,161,4,0,9,209,0,1,209,21,3,143,209,144,9,141,209,144,9,1,208,21,3,45,209,209,208,72,247,0,0,1,209,0,0,143,209,144,9,141,208,145,9,1,204,48,1,3,208,208,204,141,204,160,4,135,209,43,0,9,208,204,0,0,19,9,0,141,204,160,4,3,209,19,204,143,209,162,4,141,209,162,4,1,204,0,0,83,209,204,0,2,209,0,0,172,208,221,0,1,208,0,0,141,210,145,9,1,211,176,0,3,210,210,211,135,204,72,0,209,208,210,0,143,204,164,4,141,204,145,9,1,210,0,0,109,204,112,210,141,210,145,9,25,210,210,112,1,204,0,0,109,210,4,204,141,204,145,9,25,204,204,112,1,210,0,0,109,204,8,210,141,204,145,9,3,204,204,201,135,210,41,0,204,0,0,0,143,210,165,4,1,210,239,255,141,204,165,4,48,210,210,204,224,247,0,0,1,210,23,3,143,210,144,9,119,0,24,1,141,210,165,4,35,210,210,11,121,210,17,0,141,210,145,9,25,210,210,112,141,204,165,4,19,204,204,200,107,210,11,204,141,204,165,4,32,204,204,0,121,204,4,0,141,204,145,9,25,20,204,112,119,0,32,0,141,204,145,9,25,10,204,112,1,204,27,3,143,204,144,9,119,0,27,0,141,210,165,4,25,210,210,16,38,210,210,240,135,204,26,0,210,0,0,0,143,204,166,4,141,204,145,9,141,210,166,4,109,204,112,210,141,210,145,9,25,210,210,112,141,204,165,4,25,204,204,16,38,204,204,240,2,208,0,0,0,0,0,128,20,204,204,208,109,210,8,204,141,204,145,9,25,204,204,112,141,210,165,4,109,204,4,210,141,210,166,4,0,10,210,0,1,210,27,3,143,210,144,9,141,210,144,9,1,204,27,3,45,210,210,204,196,248,0,0,1,210,0,0,143,210,144,9,141,204,145,9,3,204,204,201,141,208,165,4,135,210,43,0,10,204,208,0,0,20,10,0,141,208,165,4,3,210,20,208,143,210,167,4,141,210,167,4,1,208,0,0,83,210,208,0,141,210,164,4,106,208,210,56,143,208,168,4,141,208,168,4,34,208,208,2,121,208,157,0,141,210,164,4,25,210,210,12,102,208,210,11,143,208,169,4,141,210,164,4,106,208,210,16,143,208,170,4,141,204,169,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,170,4,0,210,204,0,119,0,4,0,141,204,169,4,19,204,204,200,0,210,204,0,0,208,210,0,143,208,172,4,141,210,145,9,25,210,210,112,102,208,210,11,143,208,173,4,141,210,145,9,25,210,210,112,106,208,210,4,143,208,174,4,141,204,173,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,174,4,0,210,204,0,119,0,4,0,141,204,173,4,19,204,204,200,0,210,204,0,0,208,210,0,143,208,175,4,141,208,172,4,141,210,175,4,45,208,208,210,72,251,0,0,141,210,164,4,106,208,210,12,143,208,176,4,141,204,169,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,176,4,0,210,204,0,119,0,4,0,141,204,164,4,25,204,204,12,0,210,204,0,0,208,210,0,143,208,177,4,141,210,145,9,106,208,210,112,143,208,179,4,141,204,173,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,179,4,0,210,204,0,119,0,4,0,141,204,145,9,25,204,204,112,0,210,204,0,0,208,210,0,143,208,180,4,141,208,169,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,14,0,141,208,172,4,32,208,208,0,120,208,72,0,141,210,177,4,141,204,180,4,141,209,172,4,135,208,61,0,210,204,209,0,143,208,187,4,141,208,187,4,32,208,208,0,121,208,56,0,119,0,62,0,141,208,172,4,32,208,208,0,120,208,59,0,141,209,180,4,78,208,209,0,143,208,181,4,141,208,181,4,41,208,208,24,42,208,208,24,141,209,176,4,19,209,209,200,41,209,209,24,42,209,209,24,52,208,208,209,176,250,0,0,119,0,39,0,141,208,164,4,25,41,208,12,141,208,169,4,19,208,208,200,0,113,208,0,141,208,180,4,0,186,208,0,26,208,113,1,143,208,182,4,25,208,41,1,143,208,183,4,141,208,182,4,32,208,208,0,120,208,32,0,25,208,186,1,143,208,185,4,141,209,183,4,78,208,209,0,143,208,66,1,141,209,185,4,78,208,209,0,143,208,186,4,141,208,66,1,41,208,208,24,42,208,208,24,141,209,186,4,41,209,209,24,42,209,209,24,45,208,208,209,68,251,0,0,141,208,183,4,0,41,208,0,141,208,182,4,0,113,208,0,141,208,185,4,0,186,208,0,119,0,227,255,119,0,1,0,141,209,164,4,102,208,209,60,143,208,188,4,141,208,164,4,141,209,188,4,39,209,209,1,107,208,60,209,141,208,164,4,25,208,208,12,141,204,145,9,25,204,204,112,135,209,62,0,208,204,0,0,141,209,164,4,1,204,176,0,109,209,64,204,141,209,145,9,25,209,209,112,102,204,209,11,143,204,189,4,141,204,189,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,209,145,9,106,204,209,112,143,204,190,4,141,209,190,4,135,204,21,0,209,0,0,0,141,209,145,9,1,208,176,0,3,209,209,208,102,204,209,11,143,204,191,4,141,204,191,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,209,145,9,1,208,176,0,94,204,209,208,143,204,192,4,141,209,192,4,135,204,21,0,209,0,0,0,141,209,48,1,25,204,209,1,143,204,193,4,141,204,193,4,35,204,204,11,121,204,5,0,141,209,193,4,0,204,209,0,143,204,48,1,119,0,83,254,1,204,15,3,143,204,144,9,119,0,1,0,141,204,144,9,1,209,15,3,45,204,204,209,16,180,1,0,141,204,145,9,1,209,0,0,97,204,202,209,141,209,145,9,3,209,209,202,1,204,0,0,109,209,4,204,141,204,145,9,3,204,204,202,1,209,0,0,109,204,8,209,1,204,16,0,135,209,26,0,204,0,0,0,143,209,156,4,141,209,145,9,141,204,156,4,97,209,202,204,141,204,145,9,3,204,204,202,2,209,0,0,16,0,0,128,109,204,8,209,141,209,145,9,3,209,209,202,1,204,13,0,109,209,4,204,141,209,156,4,0,204,209,0,143,204,143,9,2,204,0,0,88,87,21,0,143,204,146,9,141,209,143,9,25,204,209,13,143,204,147,9,141,204,143,9,141,209,146,9,78,209,209,0,83,204,209,0,141,204,143,9,25,209,204,1,143,209,143,9,141,204,146,9,25,209,204,1,143,209,146,9,141,209,143,9,141,204,147,9,54,209,209,204,220,252,0,0,141,209,156,4,1,204,0,0,107,209,13,204,2,209,0,0,172,208,221,0,1,208,1,0,141,210,145,9,3,210,210,202,135,204,72,0,209,208,210,0,143,204,157,4,141,210,145,9,3,210,210,202,102,204,210,11,143,204,158,4,141,204,158,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,202,143,204,194,4,141,210,194,4,135,204,21,0,210,0,0,0,141,204,145,9,1,210,0,0,97,204,202,210,141,210,145,9,3,210,210,202,1,204,0,0,109,210,4,204,141,204,145,9,3,204,204,202,1,210,0,0,109,204,8,210,141,210,145,9,3,210,210,202,1,204,5,0,107,210,11,204,141,204,145,9,2,210,0,0,157,2,22,0,78,210,210,0,95,204,202,210,141,210,145,9,3,210,210,202,2,204,0,0,157,2,22,0,102,204,204,1,107,210,1,204,141,204,145,9,3,204,204,202,2,210,0,0,157,2,22,0,102,210,210,2,107,204,2,210,141,210,145,9,3,210,210,202,2,204,0,0,157,2,22,0,102,204,204,3,107,210,3,204,141,204,145,9,3,204,204,202,2,210,0,0,157,2,22,0,102,210,210,4,107,204,4,210,141,210,145,9,3,210,210,202,1,204,0,0,107,210,5,204,141,210,157,4,106,204,210,56,143,204,196,4,141,204,196,4,34,204,204,2,121,204,102,0,141,210,157,4,25,210,210,12,102,204,210,11,143,204,197,4,141,210,157,4,106,204,210,16,143,204,198,4,141,208,197,4,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,198,4,0,210,208,0,119,0,4,0,141,208,197,4,19,208,208,200,0,210,208,0,0,204,210,0,143,204,199,4,141,204,199,4,32,204,204,5,121,204,72,0,141,210,157,4,106,204,210,12,143,204,200,4,141,204,197,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,12,0,141,210,200,4,141,208,145,9,3,208,208,202,1,209,5,0,135,204,61,0,210,208,209,0,143,204,207,4,141,204,207,4,32,204,204,0,121,204,54,0,119,0,60,0,141,209,145,9,94,204,209,202,143,204,201,4,141,204,201,4,19,204,204,200,41,204,204,24,42,204,204,24,141,209,200,4,19,209,209,200,41,209,209,24,42,209,209,24,52,204,204,209,52,255,0,0,119,0,39,0,141,204,157,4,25,42,204,12,141,204,197,4,19,204,204,200,0,114,204,0,141,204,145,9,3,187,204,202,26,204,114,1,143,204,202,4,25,204,42,1,143,204,203,4,141,204,202,4,32,204,204,0,120,204,32,0,25,204,187,1,143,204,205,4,141,209,203,4,78,204,209,0,143,204,67,1,141,209,205,4,78,204,209,0,143,204,206,4,141,204,67,1,41,204,204,24,42,204,204,24,141,209,206,4,41,209,209,24,42,209,209,24,45,204,204,209,200,255,0,0,141,204,203,4,0,42,204,0,141,204,202,4,0,114,204,0,141,204,205,4,0,187,204,0,119,0,227,255,119,0,1,0,141,209,157,4,102,204,209,60,143,204,208,4,141,204,157,4,141,209,208,4,39,209,209,1,107,204,60,209,141,204,157,4,25,204,204,12,141,208,145,9,3,208,208,202,135,209,62,0,204,208,0,0,141,208,145,9,3,208,208,202,102,209,208,11,143,209,209,4,141,209,209,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,208,145,9,94,209,208,202,143,209,210,4,141,208,210,4,135,209,21,0,208,0,0,0,141,209,145,9,1,208,0,0,97,209,202,208,141,208,145,9,3,208,208,202,1,209,0,0,109,208,4,209,141,209,145,9,3,209,209,202,1,208,0,0,109,209,8,208,1,209,16,0,135,208,26,0,209,0,0,0,143,208,211,4,141,208,145,9,141,209,211,4,97,208,202,209,141,209,145,9,3,209,209,202,2,208,0,0,16,0,0,128,109,209,8,208,141,208,145,9,3,208,208,202,1,209,13,0,109,208,4,209,141,208,211,4,0,209,208,0,143,209,143,9,2,209,0,0,122,169,21,0,143,209,146,9,141,208,143,9,25,209,208,13,143,209,147,9,141,209,143,9,141,208,146,9,78,208,208,0,83,209,208,0,141,209,143,9,25,208,209,1,143,208,143,9,141,209,146,9,25,208,209,1,143,208,146,9,141,208,143,9,141,209,147,9,54,208,208,209,204,0,1,0,141,208,211,4,1,209,0,0,107,208,13,209,2,208,0,0,172,208,221,0,1,204,0,0,141,210,145,9,3,210,210,202,135,209,72,0,208,204,210,0,143,209,212,4,141,209,145,9,1,210,160,3,1,204,0,0,97,209,210,204,141,204,145,9,1,210,160,3,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,160,3,3,210,210,204,1,204,0,0,109,210,8,204,1,210,16,0,135,204,26,0,210,0,0,0,143,204,213,4,141,204,145,9,1,210,160,3,141,209,213,4,97,204,210,209,141,209,145,9,1,210,160,3,3,209,209,210,2,210,0,0,16,0,0,128,109,209,8,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,14,0,109,210,4,209,141,210,213,4,0,209,210,0,143,209,143,9,2,209,0,0,128,61,21,0,143,209,146,9,141,210,143,9,25,209,210,14,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,216,1,1,0,141,210,213,4,1,209,0,0,107,210,14,209,141,210,212,4,106,209,210,56,143,209,215,4,141,209,215,4,34,209,209,2,121,209,94,0,141,210,212,4,25,210,210,12,102,209,210,11,143,209,216,4,141,210,212,4,106,209,210,16,143,209,217,4,141,204,216,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,217,4,0,210,204,0,119,0,4,0,141,204,216,4,19,204,204,200,0,210,204,0,0,209,210,0,143,209,218,4,141,209,218,4,32,209,209,14,121,209,64,0,141,210,212,4,106,209,210,12,143,209,219,4,141,209,216,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,11,0,141,210,219,4,141,204,213,4,1,208,14,0,135,209,61,0,210,204,208,0,143,209,224,4,141,209,224,4,32,209,209,0,121,209,47,0,119,0,53,0,141,209,219,4,19,209,209,200,41,209,209,24,42,209,209,24,32,209,209,53,120,209,2,0,119,0,39,0,141,209,212,4,25,43,209,12,141,209,216,4,19,209,209,200,0,115,209,0,141,209,213,4,0,188,209,0,26,209,115,1,143,209,220,4,25,209,43,1,143,209,221,4,141,209,220,4,32,209,209,0,120,209,32,0,25,209,188,1,143,209,222,4,141,208,221,4,78,209,208,0,143,209,68,1,141,208,222,4,78,209,208,0,143,209,223,4,141,209,68,1,41,209,209,24,42,209,209,24,141,208,223,4,41,208,208,24,42,208,208,24,45,209,209,208,136,3,1,0,141,209,221,4,0,43,209,0,141,209,220,4,0,115,209,0,141,209,222,4,0,188,209,0,119,0,227,255,119,0,1,0,141,208,212,4,102,209,208,60,143,209,225,4,141,209,212,4,141,208,225,4,39,208,208,1,107,209,60,208,141,209,212,4,25,209,209,12,141,204,145,9,1,210,160,3,3,204,204,210,135,208,62,0,209,204,0,0,141,208,212,4,1,204,177,0,109,208,64,204,141,208,145,9,1,209,160,3,3,208,208,209,102,204,208,11,143,204,226,4,141,204,226,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,209,160,3,94,204,208,209,143,204,227,4,141,208,227,4,135,204,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,204,208,11,143,204,229,4,141,204,229,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,94,204,208,202,143,204,230,4,141,208,230,4,135,204,21,0,208,0,0,0,141,204,145,9,1,208,0,0,97,204,202,208,141,208,145,9,3,208,208,202,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,202,1,208,0,0,109,204,8,208,1,204,32,0,135,208,26,0,204,0,0,0,143,208,231,4,141,208,145,9,141,204,231,4,97,208,202,204,141,204,145,9,3,204,204,202,2,208,0,0,32,0,0,128,109,204,8,208,141,208,145,9,3,208,208,202,1,204,22,0,109,208,4,204,141,208,231,4,0,204,208,0,143,204,143,9,2,204,0,0,75,169,21,0,143,204,146,9,141,208,143,9,25,204,208,22,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,224,4,1,0,141,208,231,4,1,204,0,0,107,208,22,204,2,208,0,0,172,208,221,0,1,209,0,0,141,210,145,9,3,210,210,202,135,204,72,0,208,209,210,0,143,204,232,4,141,204,145,9,1,210,160,3,1,209,0,0,97,204,210,209,141,209,145,9,1,210,160,3,3,209,209,210,1,210,0,0,109,209,4,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,0,0,109,210,8,209,1,210,32,0,135,209,26,0,210,0,0,0,143,209,233,4,141,209,145,9,1,210,160,3,141,204,233,4,97,209,210,204,141,204,145,9,1,210,160,3,3,204,204,210,2,210,0,0,32,0,0,128,109,204,8,210,141,210,145,9,1,204,160,3,3,210,210,204,1,204,30,0,109,210,4,204,141,210,233,4,0,204,210,0,143,204,143,9,2,204,0,0,143,61,21,0,143,204,146,9,141,210,143,9,25,204,210,30,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,236,5,1,0,141,210,233,4,1,204,0,0,107,210,30,204,141,210,232,4,106,204,210,56,143,204,234,4,141,204,234,4,34,204,204,2,121,204,94,0,141,210,232,4,25,210,210,12,102,204,210,11,143,204,235,4,141,210,232,4,106,204,210,16,143,204,237,4,141,209,235,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,237,4,0,210,209,0,119,0,4,0,141,209,235,4,19,209,209,200,0,210,209,0,0,204,210,0,143,204,238,4,141,204,238,4,32,204,204,30,121,204,64,0,141,210,232,4,106,204,210,12,143,204,239,4,141,204,235,4,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,210,239,4,141,209,233,4,1,208,30,0,135,204,61,0,210,209,208,0,143,204,245,4,141,204,245,4,32,204,204,0,121,204,47,0,119,0,53,0,141,204,239,4,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,65,120,204,2,0,119,0,39,0,141,204,232,4,25,44,204,12,141,204,235,4,19,204,204,200,0,116,204,0,141,204,233,4,0,189,204,0,26,204,116,1,143,204,240,4,25,204,44,1,143,204,242,4,141,204,240,4,32,204,204,0,120,204,32,0,25,204,189,1,143,204,243,4,141,208,242,4,78,204,208,0,143,204,69,1,141,208,243,4,78,204,208,0,143,204,244,4,141,204,69,1,41,204,204,24,42,204,204,24,141,208,244,4,41,208,208,24,42,208,208,24,45,204,204,208,156,7,1,0,141,204,242,4,0,44,204,0,141,204,240,4,0,116,204,0,141,204,243,4,0,189,204,0,119,0,227,255,119,0,1,0,141,208,232,4,102,204,208,60,143,204,246,4,141,204,232,4,141,208,246,4,39,208,208,1,107,204,60,208,141,204,232,4,25,204,204,12,141,209,145,9,1,210,160,3,3,209,209,210,135,208,62,0,204,209,0,0,141,208,232,4,1,209,178,0,109,208,64,209,141,208,145,9,1,204,160,3,3,208,208,204,102,209,208,11,143,209,247,4,141,209,247,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,208,145,9,1,204,160,3,94,209,208,204,143,209,248,4,141,208,248,4,135,209,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,209,208,11,143,209,249,4,141,209,249,4,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,208,145,9,94,209,208,202,143,209,250,4,141,208,250,4,135,209,21,0,208,0,0,0,141,209,145,9,1,208,0,0,97,209,202,208,141,208,145,9,3,208,208,202,1,209,0,0,109,208,4,209,141,209,145,9,3,209,209,202,1,208,0,0,109,209,8,208,1,209,32,0,135,208,26,0,209,0,0,0,143,208,251,4,141,208,145,9,141,209,251,4,97,208,202,209,141,209,145,9,3,209,209,202,2,208,0,0,32,0,0,128,109,209,8,208,141,208,145,9,3,208,208,202,1,209,22,0,109,208,4,209,141,208,251,4,0,209,208,0,143,209,143,9,2,209,0,0,49,170,21,0,143,209,146,9,141,208,143,9,25,209,208,22,143,209,147,9,141,209,143,9,141,208,146,9,78,208,208,0,83,209,208,0,141,209,143,9,25,208,209,1,143,208,143,9,141,209,146,9,25,208,209,1,143,208,146,9,141,208,143,9,141,209,147,9,54,208,208,209,244,8,1,0,141,208,251,4,1,209,0,0,107,208,22,209,2,208,0,0,172,208,221,0,1,204,0,0,141,210,145,9,3,210,210,202,135,209,72,0,208,204,210,0,143,209,253,4,141,209,145,9,1,210,160,3,1,204,0,0,97,209,210,204,141,204,145,9,1,210,160,3,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,160,3,3,210,210,204,1,204,0,0,109,210,8,204,1,210,48,0,135,204,26,0,210,0,0,0,143,204,254,4,141,204,145,9,1,210,160,3,141,209,254,4,97,204,210,209,141,209,145,9,1,210,160,3,3,209,209,210,2,210,0,0,48,0,0,128,109,209,8,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,44,0,109,210,4,209,141,210,254,4,0,209,210,0,143,209,143,9,2,209,0,0,174,61,21,0,143,209,146,9,141,210,143,9,25,209,210,44,143,209,147,9,141,209,143,9,141,210,146,9,78,210,210,0,83,209,210,0,141,209,143,9,25,210,209,1,143,210,143,9,141,209,146,9,25,210,209,1,143,210,146,9,141,210,143,9,141,209,147,9,54,210,210,209,0,10,1,0,141,210,254,4,1,209,0,0,107,210,44,209,141,210,253,4,106,209,210,56,143,209,255,4,141,209,255,4,34,209,209,2,121,209,94,0,141,210,253,4,25,210,210,12,102,209,210,11,143,209,1,5,141,210,253,4,106,209,210,16,143,209,2,5,141,204,1,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,2,5,0,210,204,0,119,0,4,0,141,204,1,5,19,204,204,200,0,210,204,0,0,209,210,0,143,209,3,5,141,209,3,5,32,209,209,44,121,209,64,0,141,210,253,4,106,209,210,12,143,209,4,5,141,209,1,5,41,209,209,24,42,209,209,24,34,209,209,0,121,209,11,0,141,210,4,5,141,204,254,4,1,208,44,0,135,209,61,0,210,204,208,0,143,209,10,5,141,209,10,5,32,209,209,0,121,209,47,0,119,0,53,0,141,209,4,5,19,209,209,200,41,209,209,24,42,209,209,24,32,209,209,65,120,209,2,0,119,0,39,0,141,209,253,4,25,45,209,12,141,209,1,5,19,209,209,200,0,117,209,0,141,209,254,4,0,190,209,0,26,209,117,1,143,209,6,5,25,209,45,1,143,209,7,5,141,209,6,5,32,209,209,0,120,209,32,0,25,209,190,1,143,209,8,5,141,208,7,5,78,209,208,0,143,209,70,1,141,208,8,5,78,209,208,0,143,209,9,5,141,209,70,1,41,209,209,24,42,209,209,24,141,208,9,5,41,208,208,24,42,208,208,24,45,209,209,208,176,11,1,0,141,209,7,5,0,45,209,0,141,209,6,5,0,117,209,0,141,209,8,5,0,190,209,0,119,0,227,255,119,0,1,0,141,208,253,4,102,209,208,60,143,209,11,5,141,209,253,4,141,208,11,5,39,208,208,1,107,209,60,208,141,209,253,4,25,209,209,12,141,204,145,9,1,210,160,3,3,204,204,210,135,208,62,0,209,204,0,0,141,208,253,4,1,204,179,0,109,208,64,204,141,208,145,9,1,209,160,3,3,208,208,209,102,204,208,11,143,204,12,5,141,204,12,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,209,160,3,94,204,208,209,143,204,13,5,141,208,13,5,135,204,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,204,208,11,143,204,14,5,141,204,14,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,94,204,208,202,143,204,15,5,141,208,15,5,135,204,21,0,208,0,0,0,141,204,145,9,1,208,0,0,97,204,202,208,141,208,145,9,3,208,208,202,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,202,1,208,0,0,109,204,8,208,1,204,16,0,135,208,26,0,204,0,0,0,143,208,16,5,141,208,145,9,141,204,16,5,97,208,202,204,141,204,145,9,3,204,204,202,2,208,0,0,16,0,0,128,109,204,8,208,141,208,145,9,3,208,208,202,1,204,15,0,109,208,4,204,141,208,16,5,0,204,208,0,143,204,143,9,2,204,0,0,72,170,21,0,143,204,146,9,141,208,143,9,25,204,208,15,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,8,13,1,0,141,208,16,5,1,204,0,0,107,208,15,204,2,208,0,0,172,208,221,0,1,209,0,0,141,210,145,9,3,210,210,202,135,204,72,0,208,209,210,0,143,204,17,5,141,204,145,9,1,210,160,3,3,204,204,210,1,210,10,0,107,204,11,210,141,204,145,9,1,209,160,3,3,210,204,209,143,210,143,9,2,210,0,0,219,61,21,0,143,210,146,9,141,209,143,9,25,210,209,10,143,210,147,9,141,210,143,9,141,209,146,9,78,209,209,0,83,210,209,0,141,210,143,9,25,209,210,1,143,209,143,9,141,210,146,9,25,209,210,1,143,209,146,9,141,209,143,9,141,210,147,9,54,209,209,210,168,13,1,0,141,209,145,9,1,210,160,3,3,209,209,210,1,210,0,0,107,209,10,210,141,209,17,5,106,210,209,56,143,210,19,5,141,210,19,5,34,210,210,2,121,210,105,0,141,209,17,5,25,209,209,12,102,210,209,11,143,210,20,5,141,209,17,5,106,210,209,16,143,210,21,5,141,204,20,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,21,5,0,209,204,0,119,0,4,0,141,204,20,5,19,204,204,200,0,209,204,0,0,210,209,0,143,210,22,5,141,210,22,5,32,210,210,10,121,210,75,0,141,209,17,5,106,210,209,12,143,210,23,5,141,210,20,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,13,0,141,209,23,5,141,204,145,9,1,208,160,3,3,204,204,208,1,208,10,0,135,210,61,0,209,204,208,0,143,210,29,5,141,210,29,5,32,210,210,0,121,210,56,0,119,0,62,0,141,208,145,9,1,204,160,3,94,210,208,204,143,210,24,5,141,210,24,5,19,210,210,200,41,210,210,24,42,210,210,24,141,208,23,5,19,208,208,200,41,208,208,24,42,208,208,24,52,210,210,208,244,14,1,0,119,0,40,0,141,210,17,5,25,46,210,12,141,210,20,5,19,210,210,200,0,118,210,0,141,210,145,9,1,208,160,3,3,191,210,208,26,208,118,1,143,208,25,5,25,208,46,1,143,208,26,5,141,208,25,5,32,208,208,0,120,208,32,0,25,208,191,1,143,208,27,5,141,210,26,5,78,208,210,0,143,208,71,1,141,210,27,5,78,208,210,0,143,208,28,5,141,208,71,1,41,208,208,24,42,208,208,24,141,210,28,5,41,210,210,24,42,210,210,24,45,208,208,210,140,15,1,0,141,208,26,5,0,46,208,0,141,208,25,5,0,118,208,0,141,208,27,5,0,191,208,0,119,0,227,255,119,0,1,0,141,210,17,5,102,208,210,60,143,208,30,5,141,208,17,5,141,210,30,5,39,210,210,1,107,208,60,210,141,208,17,5,25,208,208,12,141,204,145,9,1,209,160,3,3,204,204,209,135,210,62,0,208,204,0,0,141,210,17,5,1,204,180,0,109,210,64,204,141,210,145,9,1,208,160,3,3,210,210,208,102,204,210,11,143,204,31,5,141,204,31,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,208,160,3,94,204,210,208,143,204,32,5,141,210,32,5,135,204,21,0,210,0,0,0,141,210,145,9,3,210,210,202,102,204,210,11,143,204,33,5,141,204,33,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,202,143,204,34,5,141,210,34,5,135,204,21,0,210,0,0,0,141,204,145,9,1,210,0,0,97,204,202,210,141,210,145,9,3,210,210,202,1,204,0,0,109,210,4,204,141,204,145,9,3,204,204,202,1,210,0,0,109,204,8,210,1,204,32,0,135,210,26,0,204,0,0,0,143,210,35,5,141,210,145,9,141,204,35,5,97,210,202,204,141,204,145,9,3,204,204,202,2,210,0,0,32,0,0,128,109,204,8,210,141,210,145,9,3,210,210,202,1,204,16,0,109,210,4,204,141,210,35,5,0,204,210,0,143,204,143,9,2,204,0,0,88,170,21,0,143,204,146,9,141,210,143,9,25,204,210,16,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,228,16,1,0,141,210,35,5,1,204,0,0,107,210,16,204,2,210,0,0,172,208,221,0,1,208,0,0,141,209,145,9,3,209,209,202,135,204,72,0,210,208,209,0,143,204,36,5,141,204,145,9,1,209,160,3,1,208,0,0,97,204,209,208,141,208,145,9,1,209,160,3,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,160,3,3,209,209,208,1,208,0,0,109,209,8,208,1,209,16,0,135,208,26,0,209,0,0,0,143,208,37,5,141,208,145,9,1,209,160,3,141,204,37,5,97,208,209,204,141,204,145,9,1,209,160,3,3,204,204,209,2,209,0,0,16,0,0,128,109,204,8,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,11,0,109,209,4,204,141,209,37,5,0,204,209,0,143,204,143,9,2,204,0,0,230,61,21,0,143,204,146,9,141,209,143,9,25,204,209,11,143,204,147,9,141,204,143,9,141,209,146,9,78,209,209,0,83,204,209,0,141,204,143,9,25,209,204,1,143,209,143,9,141,204,146,9,25,209,204,1,143,209,146,9,141,209,143,9,141,204,147,9,54,209,209,204,240,17,1,0,141,209,37,5,1,204,0,0,107,209,11,204,141,209,36,5,106,204,209,56,143,204,38,5,141,204,38,5,34,204,204,2,121,204,94,0,141,209,36,5,25,209,209,12,102,204,209,11,143,204,39,5,141,209,36,5,106,204,209,16,143,204,41,5,141,208,39,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,41,5,0,209,208,0,119,0,4,0,141,208,39,5,19,208,208,200,0,209,208,0,0,204,209,0,143,204,42,5,141,204,42,5,32,204,204,11,121,204,64,0,141,209,36,5,106,204,209,12,143,204,43,5,141,204,39,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,209,43,5,141,208,37,5,1,210,11,0,135,204,61,0,209,208,210,0,143,204,49,5,141,204,49,5,32,204,204,0,121,204,47,0,119,0,53,0,141,204,43,5,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,69,120,204,2,0,119,0,39,0,141,204,36,5,25,47,204,12,141,204,39,5,19,204,204,200,0,119,204,0,141,204,37,5,0,192,204,0,26,204,119,1,143,204,45,5,25,204,47,1,143,204,46,5,141,204,45,5,32,204,204,0,120,204,32,0,25,204,192,1,143,204,47,5,141,210,46,5,78,204,210,0,143,204,72,1,141,210,47,5,78,204,210,0,143,204,48,5,141,204,72,1,41,204,204,24,42,204,204,24,141,210,48,5,41,210,210,24,42,210,210,24,45,204,204,210,160,19,1,0,141,204,46,5,0,47,204,0,141,204,45,5,0,119,204,0,141,204,47,5,0,192,204,0,119,0,227,255,119,0,1,0,141,210,36,5,102,204,210,60,143,204,50,5,141,204,36,5,141,210,50,5,39,210,210,1,107,204,60,210,141,204,36,5,25,204,204,12,141,208,145,9,1,209,160,3,3,208,208,209,135,210,62,0,204,208,0,0,141,210,36,5,1,208,181,0,109,210,64,208,141,210,145,9,1,204,160,3,3,210,210,204,102,208,210,11,143,208,52,5,141,208,52,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,204,160,3,94,208,210,204,143,208,53,5,141,210,53,5,135,208,21,0,210,0,0,0,141,210,145,9,3,210,210,202,102,208,210,11,143,208,54,5,141,208,54,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,210,145,9,94,208,210,202,143,208,55,5,141,210,55,5,135,208,21,0,210,0,0,0,141,208,145,9,1,210,0,0,97,208,202,210,141,210,145,9,3,210,210,202,1,208,0,0,109,210,4,208,141,208,145,9,3,208,208,202,1,210,0,0,109,208,8,210,1,208,32,0,135,210,26,0,208,0,0,0,143,210,56,5,141,210,145,9,141,208,56,5,97,210,202,208,141,208,145,9,3,208,208,202,2,210,0,0,32,0,0,128,109,208,8,210,141,210,145,9,3,210,210,202,1,208,18,0,109,210,4,208,141,210,56,5,0,208,210,0,143,208,143,9,2,208,0,0,105,170,21,0,143,208,146,9,141,210,143,9,25,208,210,18,143,208,147,9,141,208,143,9,141,210,146,9,78,210,210,0,83,208,210,0,141,208,143,9,25,210,208,1,143,210,143,9,141,208,146,9,25,210,208,1,143,210,146,9,141,210,143,9,141,208,147,9,54,210,210,208,248,20,1,0,141,210,56,5,1,208,0,0,107,210,18,208,2,210,0,0,172,208,221,0,1,204,0,0,141,209,145,9,3,209,209,202,135,208,72,0,210,204,209,0,143,208,57,5,141,208,145,9,1,209,160,3,1,204,0,0,97,208,209,204,141,204,145,9,1,209,160,3,3,204,204,209,1,209,0,0,109,204,4,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,0,0,109,209,8,204,1,209,32,0,135,204,26,0,209,0,0,0,143,204,58,5,141,204,145,9,1,209,160,3,141,208,58,5,97,204,209,208,141,208,145,9,1,209,160,3,3,208,208,209,2,209,0,0,32,0,0,128,109,208,8,209,141,209,145,9,1,208,160,3,3,209,209,208,1,208,21,0,109,209,4,208,141,209,58,5,0,208,209,0,143,208,143,9,2,208,0,0,242,61,21,0,143,208,146,9,141,209,143,9,25,208,209,21,143,208,147,9,141,208,143,9,141,209,146,9,78,209,209,0,83,208,209,0,141,208,143,9,25,209,208,1,143,209,143,9,141,208,146,9,25,209,208,1,143,209,146,9,141,209,143,9,141,208,147,9,54,209,209,208,4,22,1,0,141,209,58,5,1,208,0,0,107,209,21,208,141,209,57,5,106,208,209,56,143,208,59,5,141,208,59,5,34,208,208,2,121,208,94,0,141,209,57,5,25,209,209,12,102,208,209,11,143,208,60,5,141,209,57,5,106,208,209,16,143,208,61,5,141,204,60,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,61,5,0,209,204,0,119,0,4,0,141,204,60,5,19,204,204,200,0,209,204,0,0,208,209,0,143,208,62,5,141,208,62,5,32,208,208,21,121,208,64,0,141,209,57,5,106,208,209,12,143,208,63,5,141,208,60,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,11,0,141,209,63,5,141,204,58,5,1,210,21,0,135,208,61,0,209,204,210,0,143,208,68,5,141,208,68,5,32,208,208,0,121,208,47,0,119,0,53,0,141,208,63,5,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,69,120,208,2,0,119,0,39,0,141,208,57,5,25,48,208,12,141,208,60,5,19,208,208,200,0,120,208,0,141,208,58,5,0,193,208,0,26,208,120,1,143,208,64,5,25,208,48,1,143,208,65,5,141,208,64,5,32,208,208,0,120,208,32,0,25,208,193,1,143,208,66,5,141,210,65,5,78,208,210,0,143,208,73,1,141,210,66,5,78,208,210,0,143,208,67,5,141,208,73,1,41,208,208,24,42,208,208,24,141,210,67,5,41,210,210,24,42,210,210,24,45,208,208,210,180,23,1,0,141,208,65,5,0,48,208,0,141,208,64,5,0,120,208,0,141,208,66,5,0,193,208,0,119,0,227,255,119,0,1,0,141,210,57,5,102,208,210,60,143,208,69,5,141,208,57,5,141,210,69,5,39,210,210,1,107,208,60,210,141,208,57,5,25,208,208,12,141,204,145,9,1,209,160,3,3,204,204,209,135,210,62,0,208,204,0,0,141,210,57,5,1,204,182,0,109,210,64,204,141,210,145,9], eb + 61440);
  HEAPU8.set([1,208,160,3,3,210,210,208,102,204,210,11,143,204,70,5,141,204,70,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,208,160,3,94,204,210,208,143,204,71,5,141,210,71,5,135,204,21,0,210,0,0,0,141,210,145,9,3,210,210,202,102,204,210,11,143,204,72,5,141,204,72,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,202,143,204,73,5,141,210,73,5,135,204,21,0,210,0,0,0,141,204,145,9,1,210,0,0,97,204,202,210,141,210,145,9,3,210,210,202,1,204,0,0,109,210,4,204,141,204,145,9,3,204,204,202,1,210,0,0,109,204,8,210,1,204,16,0,135,210,26,0,204,0,0,0,143,210,74,5,141,210,145,9,141,204,74,5,97,210,202,204,141,204,145,9,3,204,204,202,2,210,0,0,16,0,0,128,109,204,8,210,141,210,145,9,3,210,210,202,1,204,15,0,109,210,4,204,141,210,74,5,0,204,210,0,143,204,143,9,2,204,0,0,65,88,21,0,143,204,146,9,141,210,143,9,25,204,210,15,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,12,25,1,0,141,210,74,5,1,204,0,0,107,210,15,204,2,210,0,0,172,208,221,0,1,208,0,0,141,209,145,9,3,209,209,202,135,204,72,0,210,208,209,0,143,204,75,5,141,204,145,9,1,209,160,3,1,208,0,0,97,204,209,208,141,208,145,9,1,209,160,3,3,208,208,209,1,209,0,0,109,208,4,209,141,209,145,9,1,208,160,3,3,209,209,208,1,208,0,0,109,209,8,208,1,209,32,0,135,208,26,0,209,0,0,0,143,208,76,5,141,208,145,9,1,209,160,3,141,204,76,5,97,208,209,204,141,204,145,9,1,209,160,3,3,204,204,209,2,209,0,0,32,0,0,128,109,204,8,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,16,0,109,209,4,204,141,209,76,5,0,204,209,0,143,204,143,9,2,204,0,0,8,62,21,0,143,204,146,9,141,209,143,9,25,204,209,16,143,204,147,9,141,204,143,9,141,209,146,9,78,209,209,0,83,204,209,0,141,204,143,9,25,209,204,1,143,209,143,9,141,204,146,9,25,209,204,1,143,209,146,9,141,209,143,9,141,204,147,9,54,209,209,204,24,26,1,0,141,209,76,5,1,204,0,0,107,209,16,204,141,209,75,5,106,204,209,56,143,204,77,5,141,204,77,5,34,204,204,2,121,204,94,0,141,209,75,5,25,209,209,12,102,204,209,11,143,204,78,5,141,209,75,5,106,204,209,16,143,204,79,5,141,208,78,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,79,5,0,209,208,0,119,0,4,0,141,208,78,5,19,208,208,200,0,209,208,0,0,204,209,0,143,204,80,5,141,204,80,5,32,204,204,16,121,204,64,0,141,209,75,5,106,204,209,12,143,204,81,5,141,204,78,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,209,81,5,141,208,76,5,1,210,16,0,135,204,61,0,209,208,210,0,143,204,87,5,141,204,87,5,32,204,204,0,121,204,47,0,119,0,53,0,141,204,81,5,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,67,120,204,2,0,119,0,39,0,141,204,75,5,25,49,204,12,141,204,78,5,19,204,204,200,0,121,204,0,141,204,76,5,0,194,204,0,26,204,121,1,143,204,82,5,25,204,49,1,143,204,83,5,141,204,82,5,32,204,204,0,120,204,32,0,25,204,194,1,143,204,85,5,141,210,83,5,78,204,210,0,143,204,74,1,141,210,85,5,78,204,210,0,143,204,86,5,141,204,74,1,41,204,204,24,42,204,204,24,141,210,86,5,41,210,210,24,42,210,210,24,45,204,204,210,200,27,1,0,141,204,83,5,0,49,204,0,141,204,82,5,0,121,204,0,141,204,85,5,0,194,204,0,119,0,227,255,119,0,1,0,141,210,75,5,102,204,210,60,143,204,88,5,141,204,75,5,141,210,88,5,39,210,210,1,107,204,60,210,141,204,75,5,25,204,204,12,141,208,145,9,1,209,160,3,3,208,208,209,135,210,62,0,204,208,0,0,141,210,75,5,1,208,183,0,109,210,64,208,141,210,145,9,1,204,160,3,3,210,210,204,102,208,210,11,143,208,90,5,141,208,90,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,145,9,1,204,160,3,94,208,210,204,143,208,91,5,141,210,91,5,135,208,21,0,210,0,0,0,141,210,145,9,3,210,210,202,102,208,210,11,143,208,92,5,141,208,92,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,210,145,9,94,208,210,202,143,208,93,5,141,210,93,5,135,208,21,0,210,0,0,0,141,208,145,9,1,210,0,0,97,208,202,210,141,210,145,9,3,210,210,202,1,208,0,0,109,210,4,208,141,208,145,9,3,208,208,202,1,210,0,0,109,208,8,210,1,208,32,0,135,210,26,0,208,0,0,0,143,210,94,5,141,210,145,9,141,208,94,5,97,210,202,208,141,208,145,9,3,208,208,202,2,210,0,0,32,0,0,128,109,208,8,210,141,210,145,9,3,210,210,202,1,208,19,0,109,210,4,208,141,210,94,5,0,208,210,0,143,208,143,9,2,208,0,0,81,88,21,0,143,208,146,9,141,210,143,9,25,208,210,19,143,208,147,9,141,208,143,9,141,210,146,9,78,210,210,0,83,208,210,0,141,208,143,9,25,210,208,1,143,210,143,9,141,208,146,9,25,210,208,1,143,210,146,9,141,210,143,9,141,208,147,9,54,210,210,208,32,29,1,0,141,210,94,5,1,208,0,0,107,210,19,208,2,210,0,0,172,208,221,0,1,204,0,0,141,209,145,9,3,209,209,202,135,208,72,0,210,204,209,0,143,208,95,5,141,208,145,9,1,209,160,3,1,204,0,0,97,208,209,204,141,204,145,9,1,209,160,3,3,204,204,209,1,209,0,0,109,204,4,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,0,0,109,209,8,204,1,209,32,0,135,204,26,0,209,0,0,0,143,204,96,5,141,204,145,9,1,209,160,3,141,208,96,5,97,204,209,208,141,208,145,9,1,209,160,3,3,208,208,209,2,209,0,0,32,0,0,128,109,208,8,209,141,209,145,9,1,208,160,3,3,209,209,208,1,208,20,0,109,209,4,208,141,209,96,5,0,208,209,0,143,208,143,9,2,208,0,0,25,62,21,0,143,208,146,9,141,209,143,9,25,208,209,20,143,208,147,9,141,208,143,9,141,209,146,9,78,209,209,0,83,208,209,0,141,208,143,9,25,209,208,1,143,209,143,9,141,208,146,9,25,209,208,1,143,209,146,9,141,209,143,9,141,208,147,9,54,209,209,208,44,30,1,0,141,209,96,5,1,208,0,0,107,209,20,208,141,209,95,5,106,208,209,56,143,208,97,5,141,208,97,5,34,208,208,2,121,208,94,0,141,209,95,5,25,209,209,12,102,208,209,11,143,208,99,5,141,209,95,5,106,208,209,16,143,208,100,5,141,204,99,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,100,5,0,209,204,0,119,0,4,0,141,204,99,5,19,204,204,200,0,209,204,0,0,208,209,0,143,208,101,5,141,208,101,5,32,208,208,20,121,208,64,0,141,209,95,5,106,208,209,12,143,208,102,5,141,208,99,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,11,0,141,209,102,5,141,204,96,5,1,210,20,0,135,208,61,0,209,204,210,0,143,208,107,5,141,208,107,5,32,208,208,0,121,208,47,0,119,0,53,0,141,208,102,5,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,67,120,208,2,0,119,0,39,0,141,208,95,5,25,50,208,12,141,208,99,5,19,208,208,200,0,122,208,0,141,208,96,5,0,195,208,0,26,208,122,1,143,208,103,5,25,208,50,1,143,208,104,5,141,208,103,5,32,208,208,0,120,208,32,0,25,208,195,1,143,208,105,5,141,210,104,5,78,208,210,0,143,208,75,1,141,210,105,5,78,208,210,0,143,208,106,5,141,208,75,1,41,208,208,24,42,208,208,24,141,210,106,5,41,210,210,24,42,210,210,24,45,208,208,210,220,31,1,0,141,208,104,5,0,50,208,0,141,208,103,5,0,122,208,0,141,208,105,5,0,195,208,0,119,0,227,255,119,0,1,0,141,210,95,5,102,208,210,60,143,208,108,5,141,208,95,5,141,210,108,5,39,210,210,1,107,208,60,210,141,208,95,5,25,208,208,12,141,204,145,9,1,209,160,3,3,204,204,209,135,210,62,0,208,204,0,0,141,210,95,5,1,204,184,0,109,210,64,204,141,210,145,9,1,208,160,3,3,210,210,208,102,204,210,11,143,204,109,5,141,204,109,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,208,160,3,94,204,210,208,143,204,110,5,141,210,110,5,135,204,21,0,210,0,0,0,141,210,145,9,3,210,210,202,102,204,210,11,143,204,111,5,141,204,111,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,202,143,204,112,5,141,210,112,5,135,204,21,0,210,0,0,0,141,204,145,9,1,210,0,0,97,204,202,210,141,210,145,9,3,210,210,202,1,204,0,0,109,210,4,204,141,204,145,9,3,204,204,202,1,210,0,0,109,204,8,210,141,210,145,9,3,210,210,202,1,204,9,0,107,210,11,204,141,210,145,9,3,204,210,202,143,204,143,9,2,204,0,0,102,87,21,0,143,204,146,9,141,210,143,9,25,204,210,9,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,4,33,1,0,141,210,145,9,3,210,210,202,1,204,0,0,107,210,9,204,2,210,0,0,172,208,221,0,1,208,1,0,141,209,145,9,3,209,209,202,135,204,72,0,210,208,209,0,143,204,113,5,141,209,145,9,3,209,209,202,102,204,209,11,143,204,114,5,141,204,114,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,209,145,9,94,204,209,202,143,204,115,5,141,209,115,5,135,204,21,0,209,0,0,0,141,204,145,9,1,209,0,0,97,204,202,209,141,209,145,9,3,209,209,202,1,204,0,0,109,209,4,204,141,204,145,9,3,204,204,202,1,209,0,0,109,204,8,209,141,209,145,9,3,209,209,202,1,204,5,0,107,209,11,204,141,204,145,9,2,209,0,0,46,62,21,0,78,209,209,0,95,204,202,209,141,209,145,9,3,209,209,202,2,204,0,0,46,62,21,0,102,204,204,1,107,209,1,204,141,204,145,9,3,204,204,202,2,209,0,0,46,62,21,0,102,209,209,2,107,204,2,209,141,209,145,9,3,209,209,202,2,204,0,0,46,62,21,0,102,204,204,3,107,209,3,204,141,204,145,9,3,204,204,202,2,209,0,0,46,62,21,0,102,209,209,4,107,204,4,209,141,209,145,9,3,209,209,202,1,204,0,0,107,209,5,204,141,209,113,5,106,204,209,56,143,204,117,5,141,204,117,5,34,204,204,2,121,204,102,0,141,209,113,5,25,209,209,12,102,204,209,11,143,204,118,5,141,209,113,5,106,204,209,16,143,204,119,5,141,208,118,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,119,5,0,209,208,0,119,0,4,0,141,208,118,5,19,208,208,200,0,209,208,0,0,204,209,0,143,204,120,5,141,204,120,5,32,204,204,5,121,204,72,0,141,209,113,5,106,204,209,12,143,204,121,5,141,204,118,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,12,0,141,209,121,5,141,208,145,9,3,208,208,202,1,210,5,0,135,204,61,0,209,208,210,0,143,204,128,5,141,204,128,5,32,204,204,0,121,204,54,0,119,0,60,0,141,210,145,9,94,204,210,202,143,204,122,5,141,204,122,5,19,204,204,200,41,204,204,24,42,204,204,24,141,210,121,5,19,210,210,200,41,210,210,24,42,210,210,24,52,204,204,210,96,35,1,0,119,0,39,0,141,204,113,5,25,51,204,12,141,204,118,5,19,204,204,200,0,123,204,0,141,204,145,9,3,196,204,202,26,204,123,1,143,204,123,5,25,204,51,1,143,204,124,5,141,204,123,5,32,204,204,0,120,204,32,0,25,204,196,1,143,204,126,5,141,210,124,5,78,204,210,0,143,204,76,1,141,210,126,5,78,204,210,0,143,204,127,5,141,204,76,1,41,204,204,24,42,204,204,24,141,210,127,5,41,210,210,24,42,210,210,24,45,204,204,210,244,35,1,0,141,204,124,5,0,51,204,0,141,204,123,5,0,123,204,0,141,204,126,5,0,196,204,0,119,0,227,255,119,0,1,0,141,210,113,5,102,204,210,60,143,204,129,5,141,204,113,5,141,210,129,5,39,210,210,1,107,204,60,210,141,204,113,5,25,204,204,12,141,208,145,9,3,208,208,202,135,210,62,0,204,208,0,0,141,208,145,9,3,208,208,202,102,210,208,11,143,210,130,5,141,210,130,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,208,145,9,94,210,208,202,143,210,131,5,141,208,131,5,135,210,21,0,208,0,0,0,141,210,145,9,1,208,0,0,97,210,202,208,141,208,145,9,3,208,208,202,1,210,0,0,109,208,4,210,141,210,145,9,3,210,210,202,1,208,0,0,109,210,8,208,1,210,32,0,135,208,26,0,210,0,0,0,143,208,132,5,141,208,145,9,141,210,132,5,97,208,202,210,141,210,145,9,3,210,210,202,2,208,0,0,32,0,0,128,109,210,8,208,141,208,145,9,3,208,208,202,1,210,16,0,109,208,4,210,141,208,132,5,0,210,208,0,143,210,143,9,2,210,0,0,212,131,21,0,143,210,146,9,141,208,143,9,25,210,208,16,143,210,147,9,141,210,143,9,141,208,146,9,78,208,208,0,83,210,208,0,141,210,143,9,25,208,210,1,143,208,143,9,141,210,146,9,25,208,210,1,143,208,146,9,141,208,143,9,141,210,147,9,54,208,208,210,248,36,1,0,141,208,132,5,1,210,0,0,107,208,16,210,2,208,0,0,172,208,221,0,1,204,0,0,141,209,145,9,3,209,209,202,135,210,72,0,208,204,209,0,143,210,133,5,141,210,145,9,1,209,160,3,1,204,0,0,97,210,209,204,141,204,145,9,1,209,160,3,3,204,204,209,1,209,0,0,109,204,4,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,0,0,109,209,8,204,1,209,16,0,135,204,26,0,209,0,0,0,143,204,134,5,141,204,145,9,1,209,160,3,141,210,134,5,97,204,209,210,141,210,145,9,1,209,160,3,3,210,210,209,2,209,0,0,16,0,0,128,109,210,8,209,141,209,145,9,1,210,160,3,3,209,209,210,1,210,11,0,109,209,4,210,141,209,134,5,0,210,209,0,143,210,143,9,2,210,0,0,52,62,21,0,143,210,146,9,141,209,143,9,25,210,209,11,143,210,147,9,141,210,143,9,141,209,146,9,78,209,209,0,83,210,209,0,141,210,143,9,25,209,210,1,143,209,143,9,141,210,146,9,25,209,210,1,143,209,146,9,141,209,143,9,141,210,147,9,54,209,209,210,4,38,1,0,141,209,134,5,1,210,0,0,107,209,11,210,141,209,133,5,106,210,209,56,143,210,136,5,141,210,136,5,34,210,210,2,121,210,94,0,141,209,133,5,25,209,209,12,102,210,209,11,143,210,137,5,141,209,133,5,106,210,209,16,143,210,138,5,141,204,137,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,138,5,0,209,204,0,119,0,4,0,141,204,137,5,19,204,204,200,0,209,204,0,0,210,209,0,143,210,139,5,141,210,139,5,32,210,210,11,121,210,64,0,141,209,133,5,106,210,209,12,143,210,141,5,141,210,137,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,11,0,141,209,141,5,141,204,134,5,1,208,11,0,135,210,61,0,209,204,208,0,143,210,146,5,141,210,146,5,32,210,210,0,121,210,47,0,119,0,53,0,141,210,141,5,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,83,120,210,2,0,119,0,39,0,141,210,133,5,25,52,210,12,141,210,137,5,19,210,210,200,0,124,210,0,141,210,134,5,0,197,210,0,26,210,124,1,143,210,142,5,25,210,52,1,143,210,143,5,141,210,142,5,32,210,210,0,120,210,32,0,25,210,197,1,143,210,144,5,141,208,143,5,78,210,208,0,143,210,77,1,141,208,144,5,78,210,208,0,143,210,145,5,141,210,77,1,41,210,210,24,42,210,210,24,141,208,145,5,41,208,208,24,42,208,208,24,45,210,210,208,180,39,1,0,141,210,143,5,0,52,210,0,141,210,142,5,0,124,210,0,141,210,144,5,0,197,210,0,119,0,227,255,119,0,1,0,141,208,133,5,102,210,208,60,143,210,147,5,141,210,133,5,141,208,147,5,39,208,208,1,107,210,60,208,141,210,133,5,25,210,210,12,141,204,145,9,1,209,160,3,3,204,204,209,135,208,62,0,210,204,0,0,141,208,133,5,1,204,185,0,109,208,64,204,141,208,145,9,1,210,160,3,3,208,208,210,102,204,208,11,143,204,148,5,141,204,148,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,210,160,3,94,204,208,210,143,204,149,5,141,208,149,5,135,204,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,204,208,11,143,204,150,5,141,204,150,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,94,204,208,202,143,204,151,5,141,208,151,5,135,204,21,0,208,0,0,0,141,204,145,9,3,204,204,202,1,208,10,0,107,204,11,208,141,204,145,9,3,208,204,202,143,208,143,9,2,208,0,0,201,131,21,0,143,208,146,9,141,204,143,9,25,208,204,10,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,176,40,1,0,141,204,145,9,3,204,204,202,1,208,0,0,107,204,10,208,2,204,0,0,172,208,221,0,1,210,0,0,141,209,145,9,3,209,209,202,135,208,72,0,204,210,209,0,143,208,152,5,141,208,145,9,1,209,160,3,1,210,0,0,97,208,209,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,160,3,3,209,209,210,1,210,0,0,109,209,8,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,4,0,107,210,11,209,141,209,145,9,1,210,160,3,2,208,0,0,77,117,116,101,97,209,210,208,141,208,145,9,1,210,160,3,3,208,208,210,1,210,0,0,107,208,4,210,141,208,152,5,106,210,208,56,143,210,153,5,141,210,153,5,34,210,210,2,121,210,97,0,141,208,152,5,25,208,208,12,102,210,208,11,143,210,154,5,141,208,152,5,106,210,208,16,143,210,155,5,141,209,154,5,41,209,209,24,42,209,209,24,34,209,209,0,121,209,4,0,141,209,155,5,0,208,209,0,119,0,4,0,141,209,154,5,19,209,209,200,0,208,209,0,0,210,208,0,143,210,156,5,141,210,156,5,32,210,210,4,121,210,67,0,141,208,152,5,106,210,208,12,143,210,158,5,141,210,154,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,13,0,141,208,158,5,141,209,145,9,1,204,160,3,3,209,209,204,1,204,4,0,135,210,61,0,208,209,204,0,143,210,163,5,141,210,163,5,32,210,210,0,121,210,48,0,119,0,54,0,141,210,158,5,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,77,120,210,2,0,119,0,40,0,141,210,152,5,25,53,210,12,141,210,154,5,19,210,210,200,0,125,210,0,141,210,145,9,1,204,160,3,3,198,210,204,26,204,125,1,143,204,159,5,25,204,53,1,143,204,160,5,141,204,159,5,32,204,204,0,120,204,32,0,25,204,198,1,143,204,161,5,141,210,160,5,78,204,210,0,143,204,78,1,141,210,161,5,78,204,210,0,143,204,162,5,141,204,78,1,41,204,204,24,42,204,204,24,141,210,162,5,41,210,210,24,42,210,210,24,45,204,204,210,4,43,1,0,141,204,160,5,0,53,204,0,141,204,159,5,0,125,204,0,141,204,161,5,0,198,204,0,119,0,227,255,119,0,1,0,141,210,152,5,102,204,210,60,143,204,164,5,141,204,152,5,141,210,164,5,39,210,210,1,107,204,60,210,141,204,152,5,25,204,204,12,141,209,145,9,1,208,160,3,3,209,209,208,135,210,62,0,204,209,0,0,141,210,152,5,1,209,186,0,109,210,64,209,141,210,145,9,1,204,160,3,3,210,210,204,102,209,210,11,143,209,165,5,141,209,165,5,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,210,145,9,1,204,160,3,94,209,210,204,143,209,166,5,141,210,166,5,135,209,21,0,210,0,0,0,141,210,145,9,3,210,210,202,102,209,210,11,143,209,167,5,141,209,167,5,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,210,145,9,94,209,210,202,143,209,168,5,141,210,168,5,135,209,21,0,210,0,0,0,141,209,145,9,3,209,209,202,1,210,0,0,109,209,8,210,141,210,145,9,3,210,210,202,1,209,7,0,107,210,11,209,141,209,145,9,2,210,0,0,112,87,21,0,78,210,210,0,95,209,202,210,141,210,145,9,3,210,210,202,2,209,0,0,112,87,21,0,102,209,209,1,107,210,1,209,141,209,145,9,3,209,209,202,2,210,0,0,112,87,21,0,102,210,210,2,107,209,2,210,141,210,145,9,3,210,210,202,2,209,0,0,112,87,21,0,102,209,209,3,107,210,3,209,141,209,145,9,3,209,209,202,2,210,0,0,112,87,21,0,102,210,210,4,107,209,4,210,141,210,145,9,3,210,210,202,2,209,0,0,112,87,21,0,102,209,209,5,107,210,5,209,141,209,145,9,3,209,209,202,2,210,0,0,112,87,21,0,102,210,210,6,107,209,6,210,141,210,145,9,3,210,210,202,1,209,0,0,107,210,7,209,2,210,0,0,172,208,221,0,1,204,1,0,141,208,145,9,3,208,208,202,135,209,72,0,210,204,208,0,143,209,169,5,141,208,145,9,3,208,208,202,102,209,208,11,143,209,170,5,141,209,170,5,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,208,145,9,94,209,208,202,143,209,171,5,141,208,171,5,135,209,21,0,208,0,0,0,141,209,145,9,3,209,209,202,1,208,0,0,109,209,4,208,141,208,145,9,3,208,208,202,25,208,208,4,1,209,0,0,109,208,4,209,141,209,145,9,3,209,209,202,1,208,3,0,107,209,11,208,141,208,145,9,2,209,0,0,64,62,21,0,78,209,209,0,95,208,202,209,141,209,145,9,3,209,209,202,2,208,0,0,64,62,21,0,102,208,208,1,107,209,1,208,141,208,145,9,3,208,208,202,2,209,0,0,64,62,21,0,102,209,209,2,107,208,2,209,141,209,145,9,3,209,209,202,1,208,0,0,107,209,3,208,141,209,169,5,106,208,209,56,143,208,173,5,141,208,173,5,34,208,208,2,121,208,102,0,141,209,169,5,25,209,209,12,102,208,209,11,143,208,174,5,141,209,169,5,106,208,209,16,143,208,175,5,141,204,174,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,175,5,0,209,204,0,119,0,4,0,141,204,174,5,19,204,204,200,0,209,204,0,0,208,209,0,143,208,176,5,141,208,176,5,32,208,208,3,121,208,72,0,141,209,169,5,106,208,209,12,143,208,177,5,141,208,174,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,12,0,141,209,177,5,141,204,145,9,3,204,204,202,1,210,3,0,135,208,61,0,209,204,210,0,143,208,184,5,141,208,184,5,32,208,208,0,121,208,54,0,119,0,60,0,141,210,145,9,94,208,210,202,143,208,178,5,141,208,178,5,19,208,208,200,41,208,208,24,42,208,208,24,141,210,177,5,19,210,210,200,41,210,210,24,42,210,210,24,52,208,208,210,124,46,1,0,119,0,39,0,141,208,169,5,25,54,208,12,141,208,174,5,19,208,208,200,0,126,208,0,141,208,145,9,3,199,208,202,26,208,126,1,143,208,180,5,25,208,54,1,143,208,181,5,141,208,180,5,32,208,208,0,120,208,32,0,25,208,199,1,143,208,182,5,141,210,181,5,78,208,210,0,143,208,79,1,141,210,182,5,78,208,210,0,143,208,183,5,141,208,79,1,41,208,208,24,42,208,208,24,141,210,183,5,41,210,210,24,42,210,210,24,45,208,208,210,16,47,1,0,141,208,181,5,0,54,208,0,141,208,180,5,0,126,208,0,141,208,182,5,0,199,208,0,119,0,227,255,119,0,1,0,141,210,169,5,102,208,210,60,143,208,185,5,141,208,169,5,141,210,185,5,39,210,210,1,107,208,60,210,141,208,169,5,25,208,208,12,141,204,145,9,3,204,204,202,135,210,62,0,208,204,0,0,141,204,145,9,3,204,204,202,102,210,204,11,143,210,186,5,141,210,186,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,204,145,9,94,210,204,202,143,210,187,5,141,204,187,5,135,210,21,0,204,0,0,0,141,210,145,9,1,204,0,0,97,210,202,204,141,204,145,9,3,204,204,202,1,210,0,0,109,204,4,210,141,210,145,9,3,210,210,202,1,204,0,0,109,210,8,204,1,210,16,0,135,204,26,0,210,0,0,0,143,204,188,5,141,204,145,9,141,210,188,5,97,204,202,210,141,210,145,9,3,210,210,202,2,204,0,0,16,0,0,128,109,210,8,204,141,204,145,9,3,204,204,202,1,210,12,0,109,204,4,210,141,204,188,5,0,210,204,0,143,210,143,9,2,210,0,0,120,87,21,0,143,210,146,9,141,204,143,9,25,210,204,12,143,210,147,9,141,210,143,9,141,204,146,9,78,204,204,0,83,210,204,0,141,210,143,9,25,204,210,1,143,204,143,9,141,210,146,9,25,204,210,1,143,204,146,9,141,204,143,9,141,210,147,9,54,204,204,210,20,48,1,0,141,204,188,5,1,210,0,0,107,204,12,210,2,204,0,0,172,208,221,0,1,208,1,0,141,209,145,9,3,209,209,202,135,210,72,0,204,208,209,0,143,210,189,5,141,209,145,9,3,209,209,202,102,210,209,11,143,210,190,5,141,210,190,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,209,145,9,94,210,209,202,143,210,191,5,141,209,191,5,135,210,21,0,209,0,0,0,141,210,145,9,1,209,0,0,97,210,202,209,141,209,145,9,3,209,209,202,1,210,0,0,109,209,4,210,141,210,145,9,3,210,210,202,1,209,0,0,109,210,8,209,141,209,145,9,3,209,209,202,1,210,5,0,107,209,11,210,141,210,145,9,2,209,0,0,68,62,21,0,78,209,209,0,95,210,202,209,141,209,145,9,3,209,209,202,2,210,0,0,68,62,21,0,102,210,210,1,107,209,1,210,141,210,145,9,3,210,210,202,2,209,0,0,68,62,21,0,102,209,209,2,107,210,2,209,141,209,145,9,3,209,209,202,2,210,0,0,68,62,21,0,102,210,210,3,107,209,3,210,141,210,145,9,3,210,210,202,2,209,0,0,68,62,21,0,102,209,209,4,107,210,4,209,141,209,145,9,3,209,209,202,1,210,0,0,107,209,5,210,141,209,189,5,106,210,209,56,143,210,192,5,141,210,192,5,34,210,210,2,121,210,105,0,141,209,189,5,25,209,209,12,102,210,209,11,143,210,193,5,141,209,189,5,106,210,209,16,143,210,194,5,141,208,193,5,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,194,5,0,209,208,0,119,0,4,0,141,208,193,5,19,208,208,200,0,209,208,0,0,210,209,0,143,210,195,5,141,210,195,5,32,210,210,5,121,210,75,0,141,209,189,5,106,210,209,12,143,210,196,5,141,210,193,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,12,0,141,209,196,5,141,208,145,9,3,208,208,202,1,204,5,0,135,210,61,0,209,208,204,0,143,210,202,5,141,210,202,5,32,210,210,0,121,210,57,0,119,0,63,0,141,204,145,9,94,210,204,202,143,210,197,5,141,210,197,5,19,210,210,200,41,210,210,24,42,210,210,24,141,204,196,5,19,204,204,200,41,204,204,24,42,204,204,24,52,210,210,204,108,50,1,0,119,0,42,0,141,210,189,5,25,55,210,12,141,210,193,5,19,210,210,200,0,127,210,0,141,204,145,9,3,210,204,202,143,210,0,1,26,210,127,1,143,210,198,5,25,210,55,1,143,210,199,5,141,210,198,5,32,210,210,0,120,210,34,0,141,204,0,1,25,210,204,1,143,210,200,5,141,204,199,5,78,210,204,0,143,210,80,1,141,204,200,5,78,210,204,0,143,210,201,5,141,210,80,1,41,210,210,24,42,210,210,24,141,204,201,5,41,204,204,24,42,204,204,24,45,210,210,204,12,51,1,0,141,210,199,5,0,55,210,0,141,210,198,5,0,127,210,0,141,204,200,5,0,210,204,0,143,210,0,1,119,0,225,255,119,0,1,0,141,204,189,5,102,210,204,60,143,210,203,5,141,210,189,5,141,204,203,5,39,204,204,1,107,210,60,204,141,210,189,5,25,210,210,12,141,208,145,9,3,208,208,202,135,204,62,0,210,208,0,0,141,208,145,9,3,208,208,202,102,204,208,11,143,204,204,5,141,204,204,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,94,204,208,202,143,204,205,5,141,208,205,5,135,204,21,0,208,0,0,0,141,204,145,9,1,208,0,0,97,204,202,208,141,208,145,9,3,208,208,202,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,202,1,208,0,0,109,204,8,208,1,204,32,0,135,208,26,0,204,0,0,0,143,208,206,5,141,208,145,9,141,204,206,5,97,208,202,204,141,204,145,9,3,204,204,202,2,208,0,0,32,0,0,128,109,204,8,208,141,208,145,9,3,208,208,202,1,204,22,0,109,208,4,204,141,208,206,5,0,204,208,0,143,204,143,9,2,204,0,0,245,87,21,0,143,204,146,9,141,208,143,9,25,204,208,22,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,16,52,1,0,141,208,206,5,1,204,0,0,107,208,22,204,2,208,0,0,172,208,221,0,1,210,0,0,141,209,145,9,3,209,209,202,135,204,72,0,208,210,209,0,143,204,207,5,141,204,145,9,1,209,160,3,1,210,0,0,97,204,209,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,160,3,3,209,209,210,1,210,0,0,109,209,8,210,1,209,32,0,135,210,26,0,209,0,0,0,143,210,208,5,141,210,145,9,1,209,160,3,141,204,208,5,97,210,209,204,141,204,145,9,1,209,160,3,3,204,204,209,2,209,0,0,32,0,0,128,109,204,8,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,18,0,109,209,4,204,141,209,208,5,0,204,209,0,143,204,143,9,2,204,0,0,74,62,21,0,143,204,146,9,141,209,143,9,25,204,209,18,143,204,147,9,141,204,143,9,141,209,146,9,78,209,209,0,83,204,209,0,141,204,143,9,25,209,204,1,143,209,143,9,141,204,146,9,25,209,204,1,143,209,146,9,141,209,143,9,141,204,147,9,54,209,209,204,28,53,1,0,141,209,208,5,1,204,0,0,107,209,18,204,141,209,207,5,106,204,209,56,143,204,209,5,141,204,209,5,34,204,204,2,121,204,97,0,141,209,207,5,25,209,209,12,102,204,209,11,143,204,211,5,141,209,207,5,106,204,209,16,143,204,212,5,141,210,211,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,212,5,0,209,210,0,119,0,4,0,141,210,211,5,19,210,210,200,0,209,210,0,0,204,209,0,143,204,213,5,141,204,213,5,32,204,204,18,121,204,67,0,141,209,207,5,106,204,209,12,143,204,215,5,141,204,211,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,209,215,5,141,210,208,5,1,208,18,0,135,204,61,0,209,210,208,0,143,204,220,5,141,204,220,5,32,204,204,0,121,204,50,0,119,0,56,0,141,204,215,5,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,73,120,204,2,0,119,0,42,0,141,204,207,5,25,56,204,12,141,204,211,5,19,204,204,200,0,128,204,0,141,208,208,5,0,204,208,0,143,204,1,1,26,204,128,1,143,204,216,5,25,204,56,1,143,204,217,5,141,204,216,5,32,204,204,0,120,204,34,0,141,208,1,1,25,204,208,1,143,204,218,5,141,208,217,5,78,204,208,0,143,204,81,1,141,208,218,5,78,204,208,0,143,204,219,5,141,204,81,1,41,204,204,24,42,204,204,24,141,208,219,5,41,208,208,24,42,208,208,24,45,204,204,208,216,54,1,0,141,204,217,5,0,56,204,0,141,204,216,5,0,128,204,0,141,208,218,5,0,204,208,0,143,204,1,1,119,0,225,255,119,0,1,0,141,208,207,5,102,204,208,60,143,204,221,5,141,204,207,5,141,208,221,5,39,208,208,1,107,204,60,208,141,204,207,5,25,204,204,12,141,210,145,9,1,209,160,3,3,210,210,209,135,208,62,0,204,210,0,0,141,208,207,5,1,210,187,0,109,208,64,210,141,208,145,9,1,204,160,3,3,208,208,204,102,210,208,11,143,210,222,5,141,210,222,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,208,145,9,1,204,160,3,94,210,208,204,143,210,223,5,141,208,223,5,135,210,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,210,208,11,143,210,226,5,141,210,226,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,208,145,9,94,210,208,202,143,210,227,5,141,208,227,5,135,210,21,0,208,0,0,0,141,210,145,9,1,208,0,0,97,210,202,208,141,208,145,9,3,208,208,202,1,210,0,0,109,208,4,210,141,210,145,9,3,210,210,202,1,208,0,0,109,210,8,208,1,210,32,0,135,208,26,0,210,0,0,0,143,208,228,5,141,208,145,9,141,210,228,5,97,208,202,210,141,210,145,9,3,210,210,202,2,208,0,0,32,0,0,128,109,210,8,208,141,208,145,9,3,208,208,202,1,210,24,0,109,208,4,210,141,208,228,5,0,210,208,0,143,210,143,9,2,210,0,0,12,88,21,0,143,210,146,9,141,208,143,9,25,210,208,24,143,210,147,9,141,210,143,9,141,208,146,9,78,208,208,0,83,210,208,0,141,210,143,9,25,208,210,1,143,208,143,9,141,210,146,9,25,208,210,1,143,208,146,9,141,208,143,9,141,210,147,9,54,208,208,210,48,56,1,0,141,208,228,5,1,210,0,0,107,208,24,210,2,208,0,0,172,208,221,0,1,204,0,0,141,209,145,9,3,209,209,202,135,210,72,0,208,204,209,0,143,210,229,5,141,210,145,9,1,209,160,3,1,204,0,0,97,210,209,204,141,204,145,9,1,209,160,3,3,204,204,209,1,209,0,0,109,204,4,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,0,0,109,209,8,204,1,209,16,0,135,204,26,0,209,0,0,0,143,204,230,5,141,204,145,9,1,209,160,3,141,210,230,5,97,204,209,210,141,210,145,9,1,209,160,3,3,210,210,209,2,209,0,0,16,0,0,128,109,210,8,209,141,209,145,9,1,210,160,3,3,209,209,210,1,210,14,0,109,209,4,210,141,209,230,5,0,210,209,0,143,210,143,9,2,210,0,0,93,62,21,0,143,210,146,9,141,209,143,9,25,210,209,14,143,210,147,9,141,210,143,9,141,209,146,9,78,209,209,0,83,210,209,0,141,210,143,9,25,209,210,1,143,209,143,9,141,210,146,9,25,209,210,1,143,209,146,9,141,209,143,9,141,210,147,9,54,209,209,210,60,57,1,0,141,209,230,5,1,210,0,0,107,209,14,210,141,209,229,5,106,210,209,56,143,210,231,5,141,210,231,5,34,210,210,2,121,210,97,0,141,209,229,5,25,209,209,12,102,210,209,11,143,210,232,5,141,209,229,5,106,210,209,16,143,210,234,5,141,204,232,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,234,5,0,209,204,0,119,0,4,0,141,204,232,5,19,204,204,200,0,209,204,0,0,210,209,0,143,210,235,5,141,210,235,5,32,210,210,14,121,210,67,0,141,209,229,5,106,210,209,12,143,210,236,5,141,210,232,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,11,0,141,209,236,5,141,204,230,5,1,208,14,0,135,210,61,0,209,204,208,0,143,210,241,5,141,210,241,5,32,210,210,0,121,210,50,0,119,0,56,0,141,210,236,5,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,89,120,210,2,0,119,0,42,0,141,210,229,5,25,57,210,12,141,210,232,5,19,210,210,200,0,129,210,0,141,208,230,5,0,210,208,0,143,210,2,1,26,210,129,1,143,210,237,5,25,210,57,1,143,210,238,5,141,210,237,5,32,210,210,0,120,210,34,0,141,208,2,1,25,210,208,1,143,210,239,5,141,208,238,5,78,210,208,0,143,210,82,1,141,208,239,5,78,210,208,0,143,210,240,5,141,210,82,1,41,210,210,24,42,210,210,24,141,208,240,5,41,208,208,24,42,208,208,24,45,210,210,208,248,58,1,0,141,210,238,5,0,57,210,0,141,210,237,5,0,129,210,0,141,208,239,5,0,210,208,0,143,210,2,1,119,0,225,255,119,0,1,0,141,208,229,5,102,210,208,60,143,210,242,5,141,210,229,5,141,208,242,5,39,208,208,1,107,210,60,208,141,210,229,5,25,210,210,12,141,204,145,9,1,209,160,3,3,204,204,209,135,208,62,0,210,204,0,0,141,208,229,5,1,204,188,0,109,208,64,204,141,208,145,9,1,210,160,3,3,208,208,210,102,204,208,11,143,204,243,5,141,204,243,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,208,145,9,1,210,160,3,94,204,208,210,143,204,244,5,141,208,244,5,135,204,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,204,208,11,143,204,245,5,141,204,245,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,94,204,208,202,143,204,246,5,141,208,246,5,135,204,21,0,208,0,0,0,141,204,145,9,1,208,0,0,97,204,202,208,141,208,145,9,3,208,208,202,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,202,1,208,0,0,109,204,8,208,1,204,32,0,135,208,26,0,204,0,0,0,143,208,247,5,141,208,145,9,141,204,247,5,97,208,202,204,141,204,145,9,3,204,204,202,2,208,0,0,32,0,0,128,109,204,8,208,141,208,145,9,3,208,208,202,1,204,21,0,109,208,4,204,141,208,247,5,0,204,208,0,143,204,143,9,2,204,0,0,108,62,21,0,143,204,146,9,141,208,143,9,25,204,208,21,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,80,60,1,0,141,208,247,5,1,204,0,0,107,208,21,204,2,208,0,0,172,208,221,0,1,210,0,0,141,209,145,9,3,209,209,202,135,204,72,0,208,210,209,0,143,204,249,5,141,204,145,9,1,209,160,3,1,210,0,0,97,204,209,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,160,3,3,209,209,210,1,210,0,0,109,209,8,210,1,209,16,0,135,210,26,0,209,0,0,0,143,210,250,5,141,210,145,9,1,209,160,3,141,204,250,5,97,210,209,204,141,204,145,9,1,209,160,3,3,204,204,209,2,209,0,0,16,0,0,128,109,204,8,209,141,209,145,9,1,204,160,3,3,209,209,204,1,204,11,0,109,209,4,204,141,209,250,5,0,204,209,0,143,204,143,9,2,204,0,0,130,62,21,0,143,204,146,9,141,209,143,9,25,204,209,11,143,204,147,9,141,204,143,9,141,209,146,9,78,209,209,0,83,204,209,0,141,204,143,9,25,209,204,1,143,209,143,9,141,204,146,9,25,209,204,1,143,209,146,9,141,209,143,9,141,204,147,9,54,209,209,204,92,61,1,0,141,209,250,5,1,204,0,0,107,209,11,204,141,209,249,5,106,204,209,56,143,204,251,5,141,204,251,5,34,204,204,2,121,204,97,0,141,209,249,5,25,209,209,12,102,204,209,11,143,204,253,5,141,209,249,5,106,204,209,16,143,204,254,5,141,210,253,5,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,254,5,0,209,210,0,119,0,4,0,141,210,253,5,19,210,210,200,0,209,210,0,0,204,209,0,143,204,255,5,141,204,255,5,32,204,204,11,121,204,67,0,141,209,249,5,106,204,209,12,143,204,0,6,141,204,253,5,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,209,0,6,141,210,250,5,1,208,11,0,135,204,61,0,209,210,208,0,143,204,5,6,141,204,5,6,32,204,204,0,121,204,50,0,119,0,56,0,141,204,0,6,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,83,120,204,2,0,119,0,42,0,141,204,249,5,25,58,204,12,141,204,253,5,19,204,204,200,0,130,204,0,141,208,250,5,0,204,208,0,143,204,3,1,26,204,130,1,143,204,1,6,25,204,58,1,143,204,2,6,141,204,1,6,32,204,204,0,120,204,34,0,141,208,3,1,25,204,208,1,143,204,3,6,141,208,2,6,78,204,208,0,143,204,83,1,141,208,3,6,78,204,208,0,143,204,4,6,141,204,83,1,41,204,204,24,42,204,204,24,141,208,4,6,41,208,208,24,42,208,208,24,45,204,204,208,24,63,1,0,141,204,2,6,0,58,204,0,141,204,1,6,0,130,204,0,141,208,3,6,0,204,208,0,143,204,3,1,119,0,225,255,119,0,1,0,141,208,249,5,102,204,208,60,143,204,6,6,141,204,249,5,141,208,6,6,39,208,208,1,107,204,60,208,141,204,249,5,25,204,204,12,141,210,145,9,1,209,160,3,3,210,210,209,135,208,62,0,204,210,0,0,141,208,249,5,1,210,189,0,109,208,64,210,141,208,145,9,1,204,160,3,3,208,208,204,102,210,208,11,143,210,7,6,141,210,7,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,208,145,9,1,204,160,3,94,210,208,204,143,210,8,6,141,208,8,6,135,210,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,210,208,11,143,210,9,6,141,210,9,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,208,145,9,94,210,208,202,143,210,10,6,141,208,10,6,135,210,21,0,208,0,0,0,141,210,145,9,1,208,0,0,97,210,202,208,141,208,145,9,3,208,208,202,1,210,0,0,109,208,4,210,141,210,145,9], eb + 71680);
  HEAPU8.set([3,210,210,202,1,208,0,0,109,210,8,208,1,210,16,0,135,208,26,0,210,0,0,0,143,208,11,6,141,208,145,9,141,210,11,6,97,208,202,210,141,210,145,9,3,210,210,202,2,208,0,0,16,0,0,128,109,210,8,208,141,208,145,9,3,208,208,202,1,210,11,0,109,208,4,210,141,208,11,6,0,210,208,0,143,210,143,9,2,210,0,0,133,87,21,0,143,210,146,9,141,208,143,9,25,210,208,11,143,210,147,9,141,210,143,9,141,208,146,9,78,208,208,0,83,210,208,0,141,210,143,9,25,208,210,1,143,208,143,9,141,210,146,9,25,208,210,1,143,208,146,9,141,208,143,9,141,210,147,9,54,208,208,210,112,64,1,0,141,208,11,6,1,210,0,0,107,208,11,210,2,208,0,0,172,208,221,0,1,204,1,0,141,209,145,9,3,209,209,202,135,210,72,0,208,204,209,0,143,210,12,6,141,209,145,9,3,209,209,202,102,210,209,11,143,210,13,6,141,210,13,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,209,145,9,94,210,209,202,143,210,14,6,141,209,14,6,135,210,21,0,209,0,0,0,141,210,145,9,1,209,0,0,97,210,202,209,141,209,145,9,3,209,209,202,1,210,0,0,109,209,4,210,141,210,145,9,3,210,210,202,1,209,0,0,109,210,8,209,1,210,32,0,135,209,26,0,210,0,0,0,143,209,15,6,141,209,145,9,141,210,15,6,97,209,202,210,141,210,145,9,3,210,210,202,2,209,0,0,32,0,0,128,109,210,8,209,141,209,145,9,3,209,209,202,1,210,22,0,109,209,4,210,141,209,15,6,0,210,209,0,143,210,143,9,2,210,0,0,142,62,21,0,143,210,146,9,141,209,143,9,25,210,209,22,143,210,147,9,141,210,143,9,141,209,146,9,78,209,209,0,83,210,209,0,141,210,143,9,25,209,210,1,143,209,143,9,141,210,146,9,25,209,210,1,143,209,146,9,141,209,143,9,141,210,147,9,54,209,209,210,160,65,1,0,141,209,15,6,1,210,0,0,107,209,22,210,141,209,12,6,106,210,209,56,143,210,16,6,141,210,16,6,34,210,210,2,121,210,97,0,141,209,12,6,25,209,209,12,102,210,209,11,143,210,17,6,141,209,12,6,106,210,209,16,143,210,19,6,141,204,17,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,19,6,0,209,204,0,119,0,4,0,141,204,17,6,19,204,204,200,0,209,204,0,0,210,209,0,143,210,20,6,141,210,20,6,32,210,210,22,121,210,67,0,141,209,12,6,106,210,209,12,143,210,21,6,141,210,17,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,11,0,141,209,21,6,141,204,15,6,1,208,22,0,135,210,61,0,209,204,208,0,143,210,26,6,141,210,26,6,32,210,210,0,121,210,50,0,119,0,56,0,141,210,21,6,19,210,210,200,41,210,210,24,42,210,210,24,32,210,210,80,120,210,2,0,119,0,42,0,141,210,12,6,25,59,210,12,141,210,17,6,19,210,210,200,0,131,210,0,141,208,15,6,0,210,208,0,143,210,4,1,26,210,131,1,143,210,22,6,25,210,59,1,143,210,23,6,141,210,22,6,32,210,210,0,120,210,34,0,141,208,4,1,25,210,208,1,143,210,24,6,141,208,23,6,78,210,208,0,143,210,84,1,141,208,24,6,78,210,208,0,143,210,25,6,141,210,84,1,41,210,210,24,42,210,210,24,141,208,25,6,41,208,208,24,42,208,208,24,45,210,210,208,92,67,1,0,141,210,23,6,0,59,210,0,141,210,22,6,0,131,210,0,141,208,24,6,0,210,208,0,143,210,4,1,119,0,225,255,119,0,1,0,141,208,12,6,102,210,208,60,143,210,27,6,141,210,12,6,141,208,27,6,39,208,208,1,107,210,60,208,141,210,12,6,25,210,210,12,141,204,145,9,3,204,204,202,135,208,62,0,210,204,0,0,141,204,145,9,3,204,204,202,102,208,204,11,143,208,28,6,141,208,28,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,204,145,9,94,208,204,202,143,208,29,6,141,204,29,6,135,208,21,0,204,0,0,0,141,208,145,9,1,204,0,0,97,208,202,204,141,204,145,9,3,204,204,202,1,208,0,0,109,204,4,208,141,208,145,9,3,208,208,202,1,204,0,0,109,208,8,204,1,208,32,0,135,204,26,0,208,0,0,0,143,204,30,6,141,204,145,9,141,208,30,6,97,204,202,208,141,208,145,9,3,208,208,202,2,204,0,0,32,0,0,128,109,208,8,204,141,204,145,9,3,204,204,202,1,208,17,0,109,204,4,208,141,204,30,6,0,208,204,0,143,208,143,9,2,208,0,0,209,87,21,0,143,208,146,9,141,204,143,9,25,208,204,17,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,96,68,1,0,141,204,30,6,1,208,0,0,107,204,17,208,2,204,0,0,172,208,221,0,1,210,0,0,141,209,145,9,3,209,209,202,135,208,72,0,204,210,209,0,143,208,31,6,141,208,145,9,1,209,160,3,1,210,0,0,97,208,209,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,0,0,109,210,4,209,141,209,145,9,1,210,160,3,3,209,209,210,1,210,0,0,109,209,8,210,141,210,145,9,1,209,160,3,3,210,210,209,1,209,9,0,107,210,11,209,141,210,145,9,1,208,160,3,3,209,210,208,143,209,143,9,2,209,0,0,165,62,21,0,143,209,146,9,141,208,143,9,25,209,208,9,143,209,147,9,141,209,143,9,141,208,146,9,78,208,208,0,83,209,208,0,141,209,143,9,25,208,209,1,143,208,143,9,141,209,146,9,25,208,209,1,143,208,146,9,141,208,143,9,141,209,147,9,54,208,208,209,56,69,1,0,141,208,145,9,1,209,160,3,3,208,208,209,1,209,0,0,107,208,9,209,141,208,31,6,106,209,208,56,143,209,32,6,141,209,32,6,34,209,209,2,121,209,108,0,141,208,31,6,25,208,208,12,102,209,208,11,143,209,33,6,141,208,31,6,106,209,208,16,143,209,34,6,141,210,33,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,34,6,0,208,210,0,119,0,4,0,141,210,33,6,19,210,210,200,0,208,210,0,0,209,208,0,143,209,35,6,141,209,35,6,32,209,209,9,121,209,78,0,141,208,31,6,106,209,208,12,143,209,36,6,141,209,33,6,41,209,209,24,42,209,209,24,34,209,209,0,121,209,13,0,141,208,36,6,141,210,145,9,1,204,160,3,3,210,210,204,1,204,9,0,135,209,61,0,208,210,204,0,143,209,42,6,141,209,42,6,32,209,209,0,121,209,59,0,119,0,65,0,141,204,145,9,1,210,160,3,94,209,204,210,143,209,37,6,141,209,37,6,19,209,209,200,41,209,209,24,42,209,209,24,141,204,36,6,19,204,204,200,41,204,204,24,42,204,204,24,52,209,209,204,132,70,1,0,119,0,43,0,141,209,31,6,25,60,209,12,141,209,33,6,19,209,209,200,0,132,209,0,141,204,145,9,1,210,160,3,3,209,204,210,143,209,5,1,26,209,132,1,143,209,38,6,25,209,60,1,143,209,39,6,141,209,38,6,32,209,209,0,120,209,34,0,141,210,5,1,25,209,210,1,143,209,40,6,141,210,39,6,78,209,210,0,143,209,85,1,141,210,40,6,78,209,210,0,143,209,41,6,141,209,85,1,41,209,209,24,42,209,209,24,141,210,41,6,41,210,210,24,42,210,210,24,45,209,209,210,40,71,1,0,141,209,39,6,0,60,209,0,141,209,38,6,0,132,209,0,141,210,40,6,0,209,210,0,143,209,5,1,119,0,225,255,119,0,1,0,141,210,31,6,102,209,210,60,143,209,43,6,141,209,31,6,141,210,43,6,39,210,210,1,107,209,60,210,141,209,31,6,25,209,209,12,141,204,145,9,1,208,160,3,3,204,204,208,135,210,62,0,209,204,0,0,141,210,31,6,1,204,190,0,109,210,64,204,141,210,145,9,1,209,160,3,3,210,210,209,102,204,210,11,143,204,44,6,141,204,44,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,210,145,9,1,209,160,3,94,204,210,209,143,204,45,6,141,210,45,6,135,204,21,0,210,0,0,0,141,210,145,9,3,210,210,202,102,204,210,11,143,204,46,6,141,204,46,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,210,145,9,94,204,210,202,143,204,47,6,141,210,47,6,135,204,21,0,210,0,0,0,141,204,145,9,1,210,0,0,97,204,202,210,141,210,145,9,3,210,210,202,1,204,0,0,109,210,4,204,141,204,145,9,3,204,204,202,1,210,0,0,109,204,8,210,1,204,32,0,135,210,26,0,204,0,0,0,143,210,48,6,141,210,145,9,141,204,48,6,97,210,202,204,141,204,145,9,3,204,204,202,2,210,0,0,32,0,0,128,109,204,8,210,141,210,145,9,3,210,210,202,1,204,17,0,109,210,4,204,141,210,48,6,0,204,210,0,143,204,143,9,2,204,0,0,227,87,21,0,143,204,146,9,141,210,143,9,25,204,210,17,143,204,147,9,141,204,143,9,141,210,146,9,78,210,210,0,83,204,210,0,141,204,143,9,25,210,204,1,143,210,143,9,141,204,146,9,25,210,204,1,143,210,146,9,141,210,143,9,141,204,147,9,54,210,210,204,128,72,1,0,141,210,48,6,1,204,0,0,107,210,17,204,2,210,0,0,172,208,221,0,1,209,0,0,141,208,145,9,3,208,208,202,135,204,72,0,210,209,208,0,143,204,50,6,141,204,145,9,1,208,160,3,3,204,204,208,1,208,10,0,107,204,11,208,141,204,145,9,1,209,160,3,3,208,204,209,143,208,143,9,2,208,0,0,175,62,21,0,143,208,146,9,141,209,143,9,25,208,209,10,143,208,147,9,141,208,143,9,141,209,146,9,78,209,209,0,83,208,209,0,141,208,143,9,25,209,208,1,143,209,143,9,141,208,146,9,25,209,208,1,143,209,146,9,141,209,143,9,141,208,147,9,54,209,209,208,32,73,1,0,141,209,145,9,1,208,160,3,3,209,209,208,1,208,0,0,107,209,10,208,141,209,50,6,106,208,209,56,143,208,51,6,141,208,51,6,34,208,208,2,121,208,108,0,141,209,50,6,25,209,209,12,102,208,209,11,143,208,52,6,141,209,50,6,106,208,209,16,143,208,54,6,141,204,52,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,54,6,0,209,204,0,119,0,4,0,141,204,52,6,19,204,204,200,0,209,204,0,0,208,209,0,143,208,55,6,141,208,55,6,32,208,208,10,121,208,78,0,141,209,50,6,106,208,209,12,143,208,56,6,141,208,52,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,13,0,141,209,56,6,141,204,145,9,1,210,160,3,3,204,204,210,1,210,10,0,135,208,61,0,209,204,210,0,143,208,62,6,141,208,62,6,32,208,208,0,121,208,59,0,119,0,65,0,141,210,145,9,1,204,160,3,94,208,210,204,143,208,57,6,141,208,57,6,19,208,208,200,41,208,208,24,42,208,208,24,141,210,56,6,19,210,210,200,41,210,210,24,42,210,210,24,52,208,208,210,108,74,1,0,119,0,43,0,141,208,50,6,25,61,208,12,141,208,52,6,19,208,208,200,0,133,208,0,141,210,145,9,1,204,160,3,3,208,210,204,143,208,6,1,26,208,133,1,143,208,58,6,25,208,61,1,143,208,59,6,141,208,58,6,32,208,208,0,120,208,34,0,141,204,6,1,25,208,204,1,143,208,60,6,141,204,59,6,78,208,204,0,143,208,86,1,141,204,60,6,78,208,204,0,143,208,61,6,141,208,86,1,41,208,208,24,42,208,208,24,141,204,61,6,41,204,204,24,42,204,204,24,45,208,208,204,16,75,1,0,141,208,59,6,0,61,208,0,141,208,58,6,0,133,208,0,141,204,60,6,0,208,204,0,143,208,6,1,119,0,225,255,119,0,1,0,141,204,50,6,102,208,204,60,143,208,64,6,141,208,50,6,141,204,64,6,39,204,204,1,107,208,60,204,141,208,50,6,25,208,208,12,141,210,145,9,1,209,160,3,3,210,210,209,135,204,62,0,208,210,0,0,141,204,50,6,1,210,190,0,109,204,64,210,141,204,145,9,1,208,160,3,3,204,204,208,102,210,204,11,143,210,65,6,141,210,65,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,204,145,9,1,208,160,3,94,210,204,208,143,210,66,6,141,204,66,6,135,210,21,0,204,0,0,0,141,204,145,9,3,204,204,202,102,210,204,11,143,210,67,6,141,210,67,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,204,145,9,94,210,204,202,143,210,68,6,141,204,68,6,135,210,21,0,204,0,0,0,141,210,145,9,1,204,0,0,97,210,202,204,141,204,145,9,3,204,204,202,1,210,0,0,109,204,4,210,141,210,145,9,3,210,210,202,1,204,0,0,109,210,8,204,1,210,16,0,135,204,26,0,210,0,0,0,143,204,70,6,141,204,145,9,141,210,70,6,97,204,202,210,141,210,145,9,3,210,210,202,2,204,0,0,16,0,0,128,109,210,8,204,141,204,145,9,3,204,204,202,1,210,11,0,109,204,4,210,141,204,70,6,0,210,204,0,143,210,143,9,2,210,0,0,145,87,21,0,143,210,146,9,141,204,143,9,25,210,204,11,143,210,147,9,141,210,143,9,141,204,146,9,78,204,204,0,83,210,204,0,141,210,143,9,25,204,210,1,143,204,143,9,141,210,146,9,25,204,210,1,143,204,146,9,141,204,143,9,141,210,147,9,54,204,204,210,104,76,1,0,141,204,70,6,1,210,0,0,107,204,11,210,2,204,0,0,172,208,221,0,1,208,1,0,141,209,145,9,3,209,209,202,135,210,72,0,204,208,209,0,143,210,71,6,141,209,145,9,3,209,209,202,102,210,209,11,143,210,72,6,141,210,72,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,209,145,9,94,210,209,202,143,210,73,6,141,209,73,6,135,210,21,0,209,0,0,0,141,210,145,9,3,210,210,202,1,209,0,0,109,210,8,209,141,209,145,9,3,209,209,202,1,210,7,0,107,209,11,210,141,210,145,9,2,209,0,0,186,62,21,0,78,209,209,0,95,210,202,209,141,209,145,9,3,209,209,202,2,210,0,0,186,62,21,0,102,210,210,1,107,209,1,210,141,210,145,9,3,210,210,202,2,209,0,0,186,62,21,0,102,209,209,2,107,210,2,209,141,209,145,9,3,209,209,202,2,210,0,0,186,62,21,0,102,210,210,3,107,209,3,210,141,210,145,9,3,210,210,202,2,209,0,0,186,62,21,0,102,209,209,4,107,210,4,209,141,209,145,9,3,209,209,202,2,210,0,0,186,62,21,0,102,210,210,5,107,209,5,210,141,210,145,9,3,210,210,202,2,209,0,0,186,62,21,0,102,209,209,6,107,210,6,209,141,209,145,9,3,209,209,202,1,210,0,0,107,209,7,210,141,209,71,6,106,210,209,56,143,210,74,6,141,210,74,6,34,210,210,2,121,210,105,0,141,209,71,6,25,209,209,12,102,210,209,11,143,210,75,6,141,209,71,6,106,210,209,16,143,210,76,6,141,208,75,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,76,6,0,209,208,0,119,0,4,0,141,208,75,6,19,208,208,200,0,209,208,0,0,210,209,0,143,210,77,6,141,210,77,6,32,210,210,7,121,210,75,0,141,209,71,6,106,210,209,12,143,210,78,6,141,210,75,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,12,0,141,209,78,6,141,208,145,9,3,208,208,202,1,204,7,0,135,210,61,0,209,208,204,0,143,210,84,6,141,210,84,6,32,210,210,0,121,210,57,0,119,0,63,0,141,204,145,9,94,210,204,202,143,210,79,6,141,210,79,6,19,210,210,200,41,210,210,24,42,210,210,24,141,204,78,6,19,204,204,200,41,204,204,24,42,204,204,24,52,210,210,204,212,78,1,0,119,0,42,0,141,210,71,6,25,62,210,12,141,210,75,6,19,210,210,200,0,134,210,0,141,204,145,9,3,210,204,202,143,210,7,1,26,210,134,1,143,210,80,6,25,210,62,1,143,210,81,6,141,210,80,6,32,210,210,0,120,210,34,0,141,204,7,1,25,210,204,1,143,210,82,6,141,204,81,6,78,210,204,0,143,210,87,1,141,204,82,6,78,210,204,0,143,210,83,6,141,210,87,1,41,210,210,24,42,210,210,24,141,204,83,6,41,204,204,24,42,204,204,24,45,210,210,204,116,79,1,0,141,210,81,6,0,62,210,0,141,210,80,6,0,134,210,0,141,204,82,6,0,210,204,0,143,210,7,1,119,0,225,255,119,0,1,0,141,204,71,6,102,210,204,60,143,210,85,6,141,210,71,6,141,204,85,6,39,204,204,1,107,210,60,204,141,210,71,6,25,210,210,12,141,208,145,9,3,208,208,202,135,204,62,0,210,208,0,0,141,208,145,9,3,208,208,202,102,204,208,11,143,204,86,6,141,204,86,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,208,145,9,94,204,208,202,143,204,87,6,141,208,87,6,135,204,21,0,208,0,0,0,141,204,145,9,1,208,0,0,97,204,202,208,141,208,145,9,3,208,208,202,1,204,0,0,109,208,4,204,141,204,145,9,3,204,204,202,1,208,0,0,109,204,8,208,1,204,32,0,135,208,26,0,204,0,0,0,143,208,88,6,141,208,145,9,141,204,88,6,97,208,202,204,141,204,145,9,3,204,204,202,2,208,0,0,32,0,0,128,109,204,8,208,141,208,145,9,3,208,208,202,1,204,17,0,109,208,4,204,141,208,88,6,0,204,208,0,143,204,143,9,2,204,0,0,157,87,21,0,143,204,146,9,141,208,143,9,25,204,208,17,143,204,147,9,141,204,143,9,141,208,146,9,78,208,208,0,83,204,208,0,141,204,143,9,25,208,204,1,143,208,143,9,141,204,146,9,25,208,204,1,143,208,146,9,141,208,143,9,141,204,147,9,54,208,208,204,120,80,1,0,141,208,88,6,1,204,0,0,107,208,17,204,2,208,0,0,172,208,221,0,1,210,1,0,141,209,145,9,3,209,209,202,135,204,72,0,208,210,209,0,143,204,89,6,141,209,145,9,3,209,209,202,102,204,209,11,143,204,90,6,141,204,90,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,209,145,9,94,204,209,202,143,204,91,6,141,209,91,6,135,204,21,0,209,0,0,0,141,204,145,9,1,209,0,0,97,204,202,209,141,209,145,9,3,209,209,202,1,204,0,0,109,209,4,204,141,204,145,9,3,204,204,202,1,209,0,0,109,204,8,209,1,204,16,0,135,209,26,0,204,0,0,0,143,209,92,6,141,209,145,9,141,204,92,6,97,209,202,204,141,204,145,9,3,204,204,202,2,209,0,0,16,0,0,128,109,204,8,209,141,209,145,9,3,209,209,202,1,204,14,0,109,209,4,204,141,209,92,6,0,204,209,0,143,204,143,9,2,204,0,0,194,62,21,0,143,204,146,9,141,209,143,9,25,204,209,14,143,204,147,9,141,204,143,9,141,209,146,9,78,209,209,0,83,204,209,0,141,204,143,9,25,209,204,1,143,209,143,9,141,204,146,9,25,209,204,1,143,209,146,9,141,209,143,9,141,204,147,9,54,209,209,204,168,81,1,0,141,209,92,6,1,204,0,0,107,209,14,204,141,209,89,6,106,204,209,56,143,204,93,6,141,204,93,6,34,204,204,2,121,204,97,0,141,209,89,6,25,209,209,12,102,204,209,11,143,204,94,6,141,209,89,6,106,204,209,16,143,204,95,6,141,210,94,6,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,95,6,0,209,210,0,119,0,4,0,141,210,94,6,19,210,210,200,0,209,210,0,0,204,209,0,143,204,96,6,141,204,96,6,32,204,204,14,121,204,67,0,141,209,89,6,106,204,209,12,143,204,97,6,141,204,94,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,209,97,6,141,210,92,6,1,208,14,0,135,204,61,0,209,210,208,0,143,204,103,6,141,204,103,6,32,204,204,0,121,204,50,0,119,0,56,0,141,204,97,6,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,67,120,204,2,0,119,0,42,0,141,204,89,6,25,63,204,12,141,204,94,6,19,204,204,200,0,135,204,0,141,208,92,6,0,204,208,0,143,204,8,1,26,204,135,1,143,204,99,6,25,204,63,1,143,204,100,6,141,204,99,6,32,204,204,0,120,204,34,0,141,208,8,1,25,204,208,1,143,204,101,6,141,208,100,6,78,204,208,0,143,204,88,1,141,208,101,6,78,204,208,0,143,204,102,6,141,204,88,1,41,204,204,24,42,204,204,24,141,208,102,6,41,208,208,24,42,208,208,24,45,204,204,208,100,83,1,0,141,204,100,6,0,63,204,0,141,204,99,6,0,135,204,0,141,208,101,6,0,204,208,0,143,204,8,1,119,0,225,255,119,0,1,0,141,208,89,6,102,204,208,60,143,204,106,6,141,204,89,6,141,208,106,6,39,208,208,1,107,204,60,208,141,204,89,6,25,204,204,12,141,210,145,9,3,210,210,202,135,208,62,0,204,210,0,0,141,210,145,9,3,210,210,202,102,208,210,11,143,208,107,6,141,208,107,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,210,145,9,94,208,210,202,143,208,108,6,141,210,108,6,135,208,21,0,210,0,0,0,1,210,47,4,1,204,0,0,1,209,0,0,2,211,0,0,209,62,21,0,2,207,0,0,220,62,21,0,141,205,145,9,3,205,205,202,135,208,60,0,210,204,209,211,207,205,0,0,141,205,145,9,94,208,205,202,143,208,109,6,141,208,145,9,1,205,160,3,1,207,0,0,97,208,205,207,141,207,145,9,1,205,160,3,3,207,207,205,1,205,0,0,109,207,4,205,141,205,145,9,1,207,160,3,3,205,205,207,1,207,0,0,109,205,8,207,1,205,16,0,135,207,26,0,205,0,0,0,143,207,110,6,141,207,145,9,1,205,160,3,141,208,110,6,97,207,205,208,141,208,145,9,1,205,160,3,3,208,208,205,2,205,0,0,16,0,0,128,109,208,8,205,141,205,145,9,1,208,160,3,3,205,205,208,1,208,11,0,109,205,4,208,141,205,110,6,0,208,205,0,143,208,143,9,2,208,0,0,231,62,21,0,143,208,146,9,141,205,143,9,25,208,205,11,143,208,147,9,141,208,143,9,141,205,146,9,78,205,205,0,83,208,205,0,141,208,143,9,25,205,208,1,143,205,143,9,141,208,146,9,25,205,208,1,143,205,146,9,141,205,143,9,141,208,147,9,54,205,205,208,188,84,1,0,141,205,110,6,1,208,0,0,107,205,11,208,141,205,109,6,106,208,205,56,143,208,111,6,141,208,111,6,34,208,208,2,121,208,97,0,141,205,109,6,25,205,205,12,102,208,205,11,143,208,112,6,141,205,109,6,106,208,205,16,143,208,113,6,141,207,112,6,41,207,207,24,42,207,207,24,34,207,207,0,121,207,4,0,141,207,113,6,0,205,207,0,119,0,4,0,141,207,112,6,19,207,207,200,0,205,207,0,0,208,205,0,143,208,114,6,141,208,114,6,32,208,208,11,121,208,67,0,141,205,109,6,106,208,205,12,143,208,115,6,141,208,112,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,11,0,141,205,115,6,141,207,110,6,1,211,11,0,135,208,61,0,205,207,211,0,143,208,120,6,141,208,120,6,32,208,208,0,121,208,50,0,119,0,56,0,141,208,115,6,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,69,120,208,2,0,119,0,42,0,141,208,109,6,25,64,208,12,141,208,112,6,19,208,208,200,0,136,208,0,141,211,110,6,0,208,211,0,143,208,9,1,26,208,136,1,143,208,116,6,25,208,64,1,143,208,117,6,141,208,116,6,32,208,208,0,120,208,34,0,141,211,9,1,25,208,211,1,143,208,118,6,141,211,117,6,78,208,211,0,143,208,89,1,141,211,118,6,78,208,211,0,143,208,119,6,141,208,89,1,41,208,208,24,42,208,208,24,141,211,119,6,41,211,211,24,42,211,211,24,45,208,208,211,120,86,1,0,141,208,117,6,0,64,208,0,141,208,116,6,0,136,208,0,141,211,118,6,0,208,211,0,143,208,9,1,119,0,225,255,119,0,1,0,141,211,109,6,102,208,211,60,143,208,121,6,141,208,109,6,141,211,121,6,39,211,211,1,107,208,60,211,141,208,109,6,25,208,208,12,141,207,145,9,1,205,160,3,3,207,207,205,135,211,62,0,208,207,0,0,141,207,145,9,1,208,160,3,3,207,207,208,102,211,207,11,143,211,122,6,141,211,122,6,41,211,211,24,42,211,211,24,34,211,211,0,121,211,8,0,141,207,145,9,1,208,160,3,94,211,207,208,143,211,123,6,141,207,123,6,135,211,21,0,207,0,0,0,1,207,48,4,1,208,35,0,1,205,8,0,2,209,0,0,243,62,21,0,2,204,0,0,251,62,21,0,141,210,145,9,3,210,210,202,135,211,60,0,207,208,205,209,204,210,0,0,141,210,145,9,94,211,210,202,143,211,124,6,141,211,145,9,1,210,160,3,1,204,0,0,97,211,210,204,141,204,145,9,1,210,160,3,3,204,204,210,1,210,0,0,109,204,4,210,141,210,145,9,1,204,160,3,3,210,210,204,1,204,0,0,109,210,8,204,1,210,32,0,135,204,26,0,210,0,0,0,143,204,125,6,141,204,145,9,1,210,160,3,141,211,125,6,97,204,210,211,141,211,145,9,1,210,160,3,3,211,211,210,2,210,0,0,32,0,0,128,109,211,8,210,141,210,145,9,1,211,160,3,3,210,210,211,1,211,18,0,109,210,4,211,141,210,125,6,0,211,210,0,143,211,143,9,2,211,0,0,3,63,21,0,143,211,146,9,141,210,143,9,25,211,210,18,143,211,147,9,141,211,143,9,141,210,146,9,78,210,210,0,83,211,210,0,141,211,143,9,25,210,211,1,143,210,143,9,141,211,146,9,25,210,211,1,143,210,146,9,141,210,143,9,141,211,147,9,54,210,210,211,220,87,1,0,141,210,125,6,1,211,0,0,107,210,18,211,141,210,124,6,106,211,210,56,143,211,126,6,141,211,126,6,34,211,211,2,121,211,97,0,141,210,124,6,25,210,210,12,102,211,210,11,143,211,128,6,141,210,124,6,106,211,210,16,143,211,129,6,141,204,128,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,129,6,0,210,204,0,119,0,4,0,141,204,128,6,19,204,204,200,0,210,204,0,0,211,210,0,143,211,130,6,141,211,130,6,32,211,211,18,121,211,67,0,141,210,124,6,106,211,210,12,143,211,131,6,141,211,128,6,41,211,211,24,42,211,211,24,34,211,211,0,121,211,11,0,141,210,131,6,141,204,125,6,1,209,18,0,135,211,61,0,210,204,209,0,143,211,136,6,141,211,136,6,32,211,211,0,121,211,50,0,119,0,56,0,141,211,131,6,19,211,211,200,41,211,211,24,42,211,211,24,32,211,211,72,120,211,2,0,119,0,42,0,141,211,124,6,25,65,211,12,141,211,128,6,19,211,211,200,0,137,211,0,141,209,125,6,0,211,209,0,143,211,10,1,26,211,137,1,143,211,132,6,25,211,65,1,143,211,133,6,141,211,132,6,32,211,211,0,120,211,34,0,141,209,10,1,25,211,209,1,143,211,134,6,141,209,133,6,78,211,209,0,143,211,90,1,141,209,134,6,78,211,209,0,143,211,135,6,141,211,90,1,41,211,211,24,42,211,211,24,141,209,135,6,41,209,209,24,42,209,209,24,45,211,211,209,152,89,1,0,141,211,133,6,0,65,211,0,141,211,132,6,0,137,211,0,141,209,134,6,0,211,209,0,143,211,10,1,119,0,225,255,119,0,1,0,141,209,124,6,102,211,209,60,143,211,137,6,141,211,124,6,141,209,137,6,39,209,209,1,107,211,60,209,141,211,124,6,25,211,211,12,141,204,145,9,1,210,160,3,3,204,204,210,135,209,62,0,211,204,0,0,141,204,145,9,1,211,160,3,3,204,204,211,102,209,204,11,143,209,138,6,141,209,138,6,41,209,209,24,42,209,209,24,34,209,209,0,121,209,8,0,141,204,145,9,1,211,160,3,94,209,204,211,143,209,139,6,141,204,139,6,135,209,21,0,204,0,0,0,141,204,145,9,94,209,204,202,143,209,140,6,2,204,0,0,211,224,53,2,78,209,204,0,143,209,141,6,141,204,140,6,102,209,204,60,143,209,142,6,141,209,142,6,19,209,209,200,43,209,209,3,38,209,209,1,41,209,209,24,42,209,209,24,141,204,141,6,40,204,204,1,41,204,204,24,42,204,204,24,52,209,209,204,216,90,1,0,141,209,140,6,141,204,142,6,38,204,204,247,141,211,141,6,41,211,211,3,19,211,211,200,20,204,204,211,40,204,204,8,107,209,60,204,141,209,140,6,106,204,209,56,143,204,143,6,141,204,143,6,34,204,204,1,120,204,2,0,119,0,11,0,141,204,140,6,141,209,142,6,38,209,209,247,141,211,141,6,41,211,211,3,19,211,211,200,20,209,209,211,40,209,209,8,39,209,209,1,107,204,60,209,2,204,0,0,40,156,79,0,82,209,204,0,143,209,144,6,141,204,144,6,1,211,164,0,90,209,204,211,143,209,145,6,2,209,0,0,213,224,53,2,141,204,145,6,83,209,204,0,141,209,144,6,1,211,155,0,90,204,209,211,143,204,146,6,2,204,0,0,212,224,53,2,141,209,146,6,40,209,209,1,83,204,209,0,135,209,75,0,135,209,76,0,135,209,77,0,135,209,78,0,141,204,145,9,1,211,220,4,94,209,204,211,143,209,147,6,2,204,0,0,44,156,79,0,82,209,204,0,143,209,148,6,141,209,147,6,32,209,209,3,141,204,148,6,32,204,204,7,19,209,209,204,121,209,23,0,141,209,145,9,1,204,216,4,1,211,2,0,97,209,204,211,141,211,145,9,1,204,192,3,2,209,0,0,104,25,21,0,97,211,204,209,141,209,145,9,1,204,192,3,3,209,209,204,2,204,0,0,129,25,21,0,109,209,4,204,2,209,0,0,200,25,21,0,141,211,145,9,1,210,192,3,3,211,211,210,135,204,24,0,209,211,0,0,135,204,79,0,1,211,49,4,1,209,0,0,1,210,0,0,2,205,0,0,22,63,21,0,2,208,0,0,31,63,21,0,141,207,145,9,3,207,207,202,135,204,60,0,211,209,210,205,208,207,0,0,141,207,145,9,94,204,207,202,143,204,149,6,141,204,145,9,1,207,160,3,1,208,0,0,97,204,207,208,141,208,145,9,1,207,160,3,3,208,208,207,1,207,0,0,109,208,4,207,141,207,145,9,1,208,160,3,3,207,207,208,1,208,0,0,109,207,8,208,1,207,32,0,135,208,26,0,207,0,0,0,143,208,150,6,141,208,145,9,1,207,160,3,141,204,150,6,97,208,207,204,141,204,145,9,1,207,160,3,3,204,204,207,2,207,0,0,32,0,0,128,109,204,8,207,141,207,145,9,1,204,160,3,3,207,207,204,1,204,19,0,109,207,4,204,141,207,150,6,0,204,207,0,143,204,143,9,2,204,0,0,40,63,21,0,143,204,146,9,141,207,143,9,25,204,207,19,143,204,147,9,141,204,143,9,141,207,146,9,78,207,207,0,83,204,207,0,141,204,143,9,25,207,204,1,143,207,143,9,141,204,146,9,25,207,204,1,143,207,146,9,141,207,143,9,141,204,147,9,54,207,207,204,180,92,1,0,141,207,150,6,1,204,0,0,107,207,19,204,141,207,149,6,106,204,207,56,143,204,151,6,141,204,151,6,34,204,204,2,121,204,97,0,141,207,149,6,25,207,207,12,102,204,207,11,143,204,152,6,141,207,149,6,106,204,207,16,143,204,153,6,141,208,152,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,153,6,0,207,208,0,119,0,4,0,141,208,152,6,19,208,208,200,0,207,208,0,0,204,207,0,143,204,154,6,141,204,154,6,32,204,204,19,121,204,67,0,141,207,149,6,106,204,207,12,143,204,155,6,141,204,152,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,11,0,141,207,155,6,141,208,150,6,1,205,19,0,135,204,61,0,207,208,205,0,143,204,161,6,141,204,161,6,32,204,204,0,121,204,50,0,119,0,56,0,141,204,155,6,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,70,120,204,2,0,119,0,42,0,141,204,149,6,25,66,204,12,141,204,152,6,19,204,204,200,0,138,204,0,141,205,150,6,0,204,205,0,143,204,11,1,26,204,138,1,143,204,157,6,25,204,66,1,143,204,158,6,141,204,157,6,32,204,204,0,120,204,34,0,141,205,11,1,25,204,205,1,143,204,159,6,141,205,158,6,78,204,205,0,143,204,91,1,141,205,159,6,78,204,205,0,143,204,160,6,141,204,91,1,41,204,204,24,42,204,204,24,141,205,160,6,41,205,205,24,42,205,205,24,45,204,204,205,112,94,1,0,141,204,158,6,0,66,204,0,141,204,157,6,0,138,204,0,141,205,159,6,0,204,205,0,143,204,11,1,119,0,225,255,119,0,1,0,141,205,149,6,102,204,205,60,143,204,163,6,141,204,149,6,141,205,163,6,39,205,205,1,107,204,60,205,141,204,149,6,25,204,204,12,141,208,145,9,1,207,160,3,3,208,208,207,135,205,62,0,204,208,0,0,141,208,145,9,1,204,160,3,3,208,208,204,102,205,208,11,143,205,164,6,141,205,164,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,208,145,9,1,204,160,3,94,205,208,204,143,205,165,6,141,208,165,6,135,205,21,0,208,0,0,0,141,208,145,9,94,205,208,202,143,205,166,6,2,208,0,0,102,92,71,0,78,205,208,0,143,205,167,6,141,208,166,6,102,205,208,60,143,205,168,6,141,205,168,6,19,205,205,200,43,205,205,3,38,205,205,1,41,205,205,24,42,205,205,24,141,208,167,6,41,208,208,24,42,208,208,24,52,205,205,208,164,95,1,0,141,205,166,6,141,208,168,6,38,208,208,247,141,204,167,6,41,204,204,3,19,204,204,200,20,208,208,204,107,205,60,208,141,205,166,6,106,208,205,56,143,208,169,6,141,208,169,6,34,208,208,1,120,208,2,0,119,0,10,0,141,208,166,6,141,205,168,6,38,205,205,247,141,204,167,6,41,204,204,3,19,204,204,200,20,205,205,204,39,205,205,1,107,208,60,205,135,205,80,0,135,205,81,0,135,205,82,0,135,205,83,0,135,205,84,0,135,205,85,0,135,205,86,0,135,205,87,0,135,205,88,0,135,205,89,0,135,205,90,0,135,205,91,0,135,205,92,0,135,205,93,0,135,205,94,0,135,205,95,0,135,205,96,0,135,205,97,0,135,205,98,0,135,205,99,0,135,205,100,0,135,205,101,0,135,205,102,0,135,205,103,0,135,205,104,0,135,205,105,0,135,205,106,0,135,205,107,0,135,205,108,0,135,205,109,0,135,205,110,0,135,205,111,0,135,205,112,0,135,205,113,0,135,205,114,0,135,205,115,0,135,205,116,0,135,205,117,0,135,205,118,0,135,205,119,0,135,205,120,0,2,208,0,0,44,156,79,0,82,205,208,0,143,205,171,6,141,205,171,6,32,205,205,3,121,205,2,0,135,205,121,0,1,208,1,0,135,205,122,0,208,0,0,0,135,205,123,0,135,205,124,0,135,205,125,0,135,205,126,0,135,205,127,0,135,205,128,0,135,205,129,0,135,205,130,0,135,205,131,0,135,205,132,0,2,208,0,0,40,156,79,0,82,205,208,0,143,205,172,6,141,208,172,6,1,204,151,0,90,205,208,204,143,205,173,6,141,205,173,6,41,205,205,24,42,205,205,24,32,205,205,0,120,205,21,0,141,205,145,9,1,208,88,4,1,204,21,0,97,205,208,204,141,204,145,9,1,208,88,4,3,204,204,208,1,208,0,0,109,204,4,208,141,204,145,9,1,205,88,4,3,204,204,205,2,205,0,0,60,63,21,0,141,207,145,9,1,210,200,3,3,207,207,210,135,208,18,0,204,205,207,0,135,208,133,0,141,208,145,9,1,207,0,0,97,208,202,207,141,207,145,9,3,207,207,202,1,208,0,0,109,207,4,208,141,208,145,9,3,208,208,202,1,207,0,0,109,208,8,207,1,208,16,0,135,207,26,0,208,0,0,0,143,207,174,6,141,207,145,9,141,208,174,6,97,207,202,208,141,208,145,9,3,208,208,202,2,207,0,0,16,0,0,128,109,208,8,207,141,207,145,9,3,207,207,202,1,208,12,0,109,207,4,208,141,207,174,6,0,208,207,0,143,208,143,9,2,208,0,0,129,53,21,0,143,208,146,9,141,207,143,9,25,208,207,12,143,208,147,9,141,208,143,9,141,207,146,9,78,207,207,0,83,208,207,0,141,208,143,9,25,207,208,1,143,207,143,9,141,208,146,9,25,207,208,1,143,207,146,9,141,207,143,9,141,208,147,9,54,207,207,208,176,97,1,0,141,207,174,6,1,208,0,0,107,207,12,208,2,207,0,0,172,208,221,0,1,205,0,0,141,204,145,9,3,204,204,202,135,208,72,0,207,205,204,0,143,208,176,6,141,208,145,9,1,204,160,3,1,205,0,0,97,208,204,205,141,205,145,9,1,204,160,3,3,205,205,204,1,204,0,0,109,205,4,204,141,204,145,9,1,205,160,3,3,204,204,205,1,205,0,0,109,204,8,205,1,204,16,0,135,205,26,0,204,0,0,0,143,205,177,6,141,205,145,9,1,204,160,3,141,208,177,6,97,205,204,208,141,208,145,9,1,204,160,3,3,208,208,204,2,204,0,0,16,0,0,128,109,208,8,204,141,204,145,9,1,208,160,3,3,204,204,208,1,208,12,0,109,204,4,208,141,204,177,6,0,208,204,0,143,208,143,9,2,208,0,0,116,63,21,0,143,208,146,9,141,204,143,9,25,208,204,12,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,188,98,1,0,141,204,177,6,1,208,0,0,107,204,12,208,141,204,176,6,106,208,204,56,143,208,178,6,141,208,178,6,34,208,208,2,121,208,97,0,141,204,176,6,25,204,204,12,102,208,204,11,143,208,180,6,141,204,176,6,106,208,204,16,143,208,181,6,141,205,180,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,181,6,0,204,205,0,119,0,4,0,141,205,180,6,19,205,205,200,0,204,205,0,0,208,204,0,143,208,182,6,141,208,182,6,32,208,208,12,121,208,67,0,141,204,176,6,106,208,204,12,143,208,183,6,141,208,180,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,11,0,141,204,183,6,141,205,177,6,1,207,12,0,135,208,61,0,204,205,207,0,143,208,188,6,141,208,188,6,32,208,208,0,121,208,50,0,119,0,56,0,141,208,183,6,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,83,120,208,2,0,119,0,42,0,141,208,176,6,25,67,208,12,141,208,180,6,19,208,208,200,0,139,208,0,141,207,177,6,0,208,207,0,143,208,12,1,26,208,139,1,143,208,184,6,25,208,67,1,143,208,185,6,141,208,184,6,32,208,208,0,120,208,34,0,141,207,12,1,25,208,207,1,143,208,186,6,141,207,185,6,78,208,207,0,143,208,92,1,141,207,186,6,78,208,207,0,143,208,187,6,141,208,92,1,41,208,208,24,42,208,208,24,141,207,187,6,41,207,207,24,42,207,207,24,45,208,208,207,120,100,1,0,141,208,185,6,0,67,208,0,141,208,184,6,0,139,208,0,141,207,186,6,0,208,207,0,143,208,12,1,119,0,225,255,119,0,1,0,141,207,176,6,102,208,207,60,143,208,190,6,141,208,176,6,141,207,190,6,39,207,207,1,107,208,60,207,141,208,176,6,25,208,208,12,141,205,145,9,1,204,160,3,3,205,205,204,135,207,62,0,208,205,0,0,141,207,176,6,1,205,191,0,109,207,64,205,141,207,145,9,1,208,160,3,3,207,207,208,102,205,207,11,143,205,191,6,141,205,191,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,207,145,9,1,208,160,3,94,205,207,208,143,205,192,6,141,207,192,6,135,205,21,0,207,0,0,0,141,207,145,9,3,207,207,202,102,205,207,11,143,205,193,6,141,205,193,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,196,6,141,207,196,6,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,16,0,135,207,26,0,205,0,0,0,143,207,197,6,141,207,145,9,141,205,197,6,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,16,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,13,0,109,207,4,205,141,207,197,6,0,205,207,0,143,205,143,9,2,205,0,0,63,90,21,0,143,205,146,9,141,207,143,9,25,205,207,13,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,208,101,1,0,141,207,197,6,1,205,0,0,107,207,13,205,2,207,0,0,172,208,221,0,1,208,0,0,141,204,145,9,3,204,204,202,135,205,72,0,207,208,204,0,143,205,198,6,141,205,145,9,1,204,160,3,1,208,0,0,97,205,204,208,141,208,145,9,1,204,160,3,3,208,208,204,1,204,0,0,109,208,4,204,141,204,145,9,1,208,160,3,3,204,204,208,1,208,0,0,109,204,8,208,1,204,16,0,135,208,26,0,204,0,0,0,143,208,199,6,141,208,145,9,1,204,160,3,141,205,199,6,97,208,204,205,141,205,145,9,1,204,160,3,3,205,205,204,2,204,0,0,16,0,0,128,109,205,8,204,141,204,145,9,1,205,160,3,3,204,204,205,1,205,13,0,109,204,4,205,141,204,199,6,0,205,204,0,143,205,143,9,2,205,0,0,129,63,21,0,143,205,146,9,141,204,143,9,25,205,204,13,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,220,102,1,0,141,204,199,6,1,205,0,0,107,204,13,205,141,204,198,6,106,205,204,56,143,205,200,6,141,205,200,6,34,205,205,2,121,205,97,0,141,204,198,6,25,204,204,12,102,205,204,11,143,205,201,6,141,204,198,6,106,205,204,16,143,205,202,6,141,208,201,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,202,6,0,204,208,0,119,0,4,0,141,208,201,6,19,208,208,200,0,204,208,0,0,205,204,0,143,205,204,6,141,205,204,6,32,205,205,13,121,205,67,0,141,204,198,6,106,205,204,12,143,205,205,6,141,205,201,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,11,0,141,204,205,6,141,208,199,6,1,207,13,0,135,205,61,0,204,208,207,0,143,205,210,6,141,205,210,6,32,205,205,0,121,205,50,0,119,0,56,0,141,205,205,6,19,205,205,200,41,205,205,24,42,205,205,24,32,205,205,87,120,205,2,0,119,0,42,0,141,205,198,6,25,68,205,12], eb + 81920);
  HEAPU8.set([141,205,201,6,19,205,205,200,0,140,205,0,141,207,199,6,0,205,207,0,143,205,13,1,26,205,140,1,143,205,206,6,25,205,68,1,143,205,207,6,141,205,206,6,32,205,205,0,120,205,34,0,141,207,13,1,25,205,207,1,143,205,208,6,141,207,207,6,78,205,207,0,143,205,93,1,141,207,208,6,78,205,207,0,143,205,209,6,141,205,93,1,41,205,205,24,42,205,205,24,141,207,209,6,41,207,207,24,42,207,207,24,45,205,205,207,152,104,1,0,141,205,207,6,0,68,205,0,141,205,206,6,0,140,205,0,141,207,208,6,0,205,207,0,143,205,13,1,119,0,225,255,119,0,1,0,141,207,198,6,102,205,207,60,143,205,211,6,141,205,198,6,141,207,211,6,39,207,207,1,107,205,60,207,141,205,198,6,25,205,205,12,141,208,145,9,1,204,160,3,3,208,208,204,135,207,62,0,205,208,0,0,141,207,198,6,1,208,192,0,109,207,64,208,2,207,0,0,56,18,71,0,78,208,207,0,143,208,212,6,141,207,198,6,102,208,207,60,143,208,214,6,141,208,214,6,19,208,208,200,43,208,208,3,38,208,208,1,41,208,208,24,42,208,208,24,141,207,212,6,41,207,207,24,42,207,207,24,52,208,208,207,136,105,1,0,141,208,198,6,141,207,214,6,38,207,207,247,141,205,212,6,41,205,205,3,19,205,205,200,20,207,207,205,107,208,60,207,141,208,198,6,106,207,208,56,143,207,215,6,141,207,215,6,34,207,207,1,120,207,2,0,119,0,10,0,141,207,198,6,141,208,214,6,38,208,208,247,141,205,212,6,41,205,205,3,19,205,205,200,20,208,208,205,39,208,208,1,107,207,60,208,141,207,145,9,1,205,160,3,3,207,207,205,102,208,207,11,143,208,216,6,141,208,216,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,207,145,9,1,205,160,3,94,208,207,205,143,208,217,6,141,207,217,6,135,208,21,0,207,0,0,0,141,207,145,9,3,207,207,202,102,208,207,11,143,208,218,6,141,208,218,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,7,0,141,207,145,9,94,208,207,202,143,208,219,6,141,207,219,6,135,208,21,0,207,0,0,0,141,208,145,9,1,207,0,0,97,208,202,207,141,207,145,9,3,207,207,202,1,208,0,0,109,207,4,208,141,208,145,9,3,208,208,202,1,207,0,0,109,208,8,207,1,208,16,0,135,207,26,0,208,0,0,0,143,207,220,6,141,207,145,9,141,208,220,6,97,207,202,208,141,208,145,9,3,208,208,202,2,207,0,0,16,0,0,128,109,208,8,207,141,207,145,9,3,207,207,202,1,208,15,0,109,207,4,208,141,207,220,6,0,208,207,0,143,208,143,9,2,208,0,0,105,90,21,0,143,208,146,9,141,207,143,9,25,208,207,15,143,208,147,9,141,208,143,9,141,207,146,9,78,207,207,0,83,208,207,0,141,208,143,9,25,207,208,1,143,207,143,9,141,208,146,9,25,207,208,1,143,207,146,9,141,207,143,9,141,208,147,9,54,207,207,208,152,106,1,0,141,207,220,6,1,208,0,0,107,207,15,208,2,207,0,0,172,208,221,0,1,205,0,0,141,204,145,9,3,204,204,202,135,208,72,0,207,205,204,0,143,208,222,6,141,208,145,9,1,204,160,3,1,205,0,0,97,208,204,205,141,205,145,9,1,204,160,3,3,205,205,204,1,204,0,0,109,205,4,204,141,204,145,9,1,205,160,3,3,204,204,205,1,205,0,0,109,204,8,205,1,204,16,0,135,205,26,0,204,0,0,0,143,205,223,6,141,205,145,9,1,204,160,3,141,208,223,6,97,205,204,208,141,208,145,9,1,204,160,3,3,208,208,204,2,204,0,0,16,0,0,128,109,208,8,204,141,204,145,9,1,208,160,3,3,204,204,208,1,208,14,0,109,204,4,208,141,204,223,6,0,208,204,0,143,208,143,9,2,208,0,0,143,63,21,0,143,208,146,9,141,204,143,9,25,208,204,14,143,208,147,9,141,208,143,9,141,204,146,9,78,204,204,0,83,208,204,0,141,208,143,9,25,204,208,1,143,204,143,9,141,208,146,9,25,204,208,1,143,204,146,9,141,204,143,9,141,208,147,9,54,204,204,208,164,107,1,0,141,204,223,6,1,208,0,0,107,204,14,208,141,204,222,6,106,208,204,56,143,208,224,6,141,208,224,6,34,208,208,2,121,208,97,0,141,204,222,6,25,204,204,12,102,208,204,11,143,208,226,6,141,204,222,6,106,208,204,16,143,208,227,6,141,205,226,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,227,6,0,204,205,0,119,0,4,0,141,205,226,6,19,205,205,200,0,204,205,0,0,208,204,0,143,208,228,6,141,208,228,6,32,208,208,14,121,208,67,0,141,204,222,6,106,208,204,12,143,208,229,6,141,208,226,6,41,208,208,24,42,208,208,24,34,208,208,0,121,208,11,0,141,204,229,6,141,205,223,6,1,207,14,0,135,208,61,0,204,205,207,0,143,208,235,6,141,208,235,6,32,208,208,0,121,208,50,0,119,0,56,0,141,208,229,6,19,208,208,200,41,208,208,24,42,208,208,24,32,208,208,65,120,208,2,0,119,0,42,0,141,208,222,6,25,69,208,12,141,208,226,6,19,208,208,200,0,141,208,0,141,207,223,6,0,208,207,0,143,208,14,1,26,208,141,1,143,208,231,6,25,208,69,1,143,208,232,6,141,208,231,6,32,208,208,0,120,208,34,0,141,207,14,1,25,208,207,1,143,208,233,6,141,207,232,6,78,208,207,0,143,208,94,1,141,207,233,6,78,208,207,0,143,208,234,6,141,208,94,1,41,208,208,24,42,208,208,24,141,207,234,6,41,207,207,24,42,207,207,24,45,208,208,207,96,109,1,0,141,208,232,6,0,69,208,0,141,208,231,6,0,141,208,0,141,207,233,6,0,208,207,0,143,208,14,1,119,0,225,255,119,0,1,0,141,207,222,6,102,208,207,60,143,208,237,6,141,208,222,6,141,207,237,6,39,207,207,1,107,208,60,207,141,208,222,6,25,208,208,12,141,205,145,9,1,204,160,3,3,205,205,204,135,207,62,0,208,205,0,0,141,207,222,6,1,205,193,0,109,207,64,205,2,207,0,0,160,18,71,0,78,205,207,0,143,205,238,6,141,207,222,6,102,205,207,60,143,205,239,6,141,205,239,6,19,205,205,200,43,205,205,3,38,205,205,1,41,205,205,24,42,205,205,24,141,207,238,6,41,207,207,24,42,207,207,24,52,205,205,207,80,110,1,0,141,205,222,6,141,207,239,6,38,207,207,247,141,208,238,6,41,208,208,3,19,208,208,200,20,207,207,208,107,205,60,207,141,205,222,6,106,207,205,56,143,207,240,6,141,207,240,6,34,207,207,1,120,207,2,0,119,0,10,0,141,207,222,6,141,205,239,6,38,205,205,247,141,208,238,6,41,208,208,3,19,208,208,200,20,205,205,208,39,205,205,1,107,207,60,205,141,207,145,9,1,208,160,3,3,207,207,208,102,205,207,11,143,205,241,6,141,205,241,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,207,145,9,1,208,160,3,94,205,207,208,143,205,242,6,141,207,242,6,135,205,21,0,207,0,0,0,141,207,145,9,3,207,207,202,102,205,207,11,143,205,244,6,141,205,244,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,245,6,141,207,245,6,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,16,0,135,207,26,0,205,0,0,0,143,207,246,6,141,207,145,9,141,205,246,6,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,16,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,15,0,109,207,4,205,141,207,246,6,0,205,207,0,143,205,143,9,2,205,0,0,219,89,21,0,143,205,146,9,141,207,143,9,25,205,207,15,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,96,111,1,0,141,207,246,6,1,205,0,0,107,207,15,205,2,207,0,0,172,208,221,0,1,208,0,0,141,204,145,9,3,204,204,202,135,205,72,0,207,208,204,0,143,205,247,6,141,205,145,9,1,204,160,3,1,208,0,0,97,205,204,208,141,208,145,9,1,204,160,3,3,208,208,204,1,204,0,0,109,208,4,204,141,204,145,9,1,208,160,3,3,204,204,208,1,208,0,0,109,204,8,208,141,208,145,9,1,204,160,3,3,208,208,204,1,204,8,0,107,208,11,204,141,204,145,9,1,208,160,3,2,205,0,0,67,116,114,108,97,204,208,205,141,205,145,9,1,208,160,3,3,205,205,208,2,208,0,0,43,69,115,99,109,205,4,208,141,208,145,9,1,205,160,3,3,208,208,205,1,205,0,0,107,208,8,205,141,208,247,6,106,205,208,56,143,205,248,6,141,205,248,6,34,205,205,2,121,205,100,0,141,208,247,6,25,208,208,12,102,205,208,11,143,205,250,6,141,208,247,6,106,205,208,16,143,205,251,6,141,204,250,6,41,204,204,24,42,204,204,24,34,204,204,0,121,204,4,0,141,204,251,6,0,208,204,0,119,0,4,0,141,204,250,6,19,204,204,200,0,208,204,0,0,205,208,0,143,205,252,6,141,205,252,6,32,205,205,8,121,205,70,0,141,208,247,6,106,205,208,12,143,205,253,6,141,205,250,6,41,205,205,24,42,205,205,24,34,205,205,0,121,205,13,0,141,208,253,6,141,204,145,9,1,207,160,3,3,204,204,207,1,207,8,0,135,205,61,0,208,204,207,0,143,205,3,7,141,205,3,7,32,205,205,0,121,205,51,0,119,0,57,0,141,205,253,6,19,205,205,200,41,205,205,24,42,205,205,24,32,205,205,67,120,205,2,0,119,0,43,0,141,205,247,6,25,70,205,12,141,205,250,6,19,205,205,200,0,142,205,0,141,207,145,9,1,204,160,3,3,205,207,204,143,205,15,1,26,205,142,1,143,205,255,6,25,205,70,1,143,205,0,7,141,205,255,6,32,205,205,0,120,205,34,0,141,204,15,1,25,205,204,1,143,205,1,7,141,204,0,7,78,205,204,0,143,205,95,1,141,204,1,7,78,205,204,0,143,205,2,7,141,205,95,1,41,205,205,24,42,205,205,24,141,204,2,7,41,204,204,24,42,204,204,24,45,205,205,204,212,113,1,0,141,205,0,7,0,70,205,0,141,205,255,6,0,142,205,0,141,204,1,7,0,205,204,0,143,205,15,1,119,0,225,255,119,0,1,0,141,204,247,6,102,205,204,60,143,205,4,7,141,205,247,6,141,204,4,7,39,204,204,1,107,205,60,204,141,205,247,6,25,205,205,12,141,207,145,9,1,208,160,3,3,207,207,208,135,204,62,0,205,207,0,0,141,204,247,6,1,207,194,0,109,204,64,207,141,204,145,9,1,205,160,3,3,204,204,205,102,207,204,11,143,207,6,7,141,207,6,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,8,0,141,204,145,9,1,205,160,3,94,207,204,205,143,207,7,7,141,204,7,7,135,207,21,0,204,0,0,0,141,204,145,9,3,204,204,202,102,207,204,11,143,207,8,7,141,207,8,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,7,0,141,204,145,9,94,207,204,202,143,207,9,7,141,204,9,7,135,207,21,0,204,0,0,0,141,207,145,9,1,204,0,0,97,207,202,204,141,204,145,9,3,204,204,202,1,207,0,0,109,204,4,207,141,207,145,9,3,207,207,202,1,204,0,0,109,207,8,204,1,207,16,0,135,204,26,0,207,0,0,0,143,204,10,7,141,204,145,9,141,207,10,7,97,204,202,207,141,207,145,9,3,207,207,202,2,204,0,0,16,0,0,128,109,207,8,204,141,204,145,9,3,204,204,202,1,207,14,0,109,204,4,207,141,204,10,7,0,207,204,0,143,207,143,9,2,207,0,0,235,89,21,0,143,207,146,9,141,204,143,9,25,207,204,14,143,207,147,9,141,207,143,9,141,204,146,9,78,204,204,0,83,207,204,0,141,207,143,9,25,204,207,1,143,204,143,9,141,207,146,9,25,204,207,1,143,204,146,9,141,204,143,9,141,207,147,9,54,204,204,207,44,115,1,0,141,204,10,7,1,207,0,0,107,204,14,207,2,204,0,0,172,208,221,0,1,205,0,0,141,208,145,9,3,208,208,202,135,207,72,0,204,205,208,0,143,207,12,7,141,207,145,9,1,208,160,3,3,207,207,208,1,208,0,0,109,207,8,208,141,208,145,9,1,207,160,3,3,208,208,207,1,207,7,0,107,208,11,207,141,207,145,9,1,208,160,3,2,205,0,0,158,63,21,0,78,205,205,0,95,207,208,205,141,205,145,9,1,208,160,3,3,205,205,208,2,208,0,0,158,63,21,0,102,208,208,1,107,205,1,208,141,208,145,9,1,205,160,3,3,208,208,205,2,205,0,0,158,63,21,0,102,205,205,2,107,208,2,205,141,205,145,9,1,208,160,3,3,205,205,208,2,208,0,0,158,63,21,0,102,208,208,3,107,205,3,208,141,208,145,9,1,205,160,3,3,208,208,205,2,205,0,0,158,63,21,0,102,205,205,4,107,208,4,205,141,205,145,9,1,208,160,3,3,205,205,208,2,208,0,0,158,63,21,0,102,208,208,5,107,205,5,208,141,208,145,9,1,205,160,3,3,208,208,205,2,205,0,0,158,63,21,0,102,205,205,6,107,208,6,205,141,205,145,9,1,208,160,3,3,205,205,208,1,208,0,0,107,205,7,208,141,205,12,7,106,208,205,56,143,208,13,7,141,208,13,7,34,208,208,2,121,208,108,0,141,205,12,7,25,205,205,12,102,208,205,11,143,208,14,7,141,205,12,7,106,208,205,16,143,208,15,7,141,207,14,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,4,0,141,207,15,7,0,205,207,0,119,0,4,0,141,207,14,7,19,207,207,200,0,205,207,0,0,208,205,0,143,208,16,7,141,208,16,7,32,208,208,7,121,208,78,0,141,205,12,7,106,208,205,12,143,208,17,7,141,208,14,7,41,208,208,24,42,208,208,24,34,208,208,0,121,208,13,0,141,205,17,7,141,207,145,9,1,204,160,3,3,207,207,204,1,204,7,0,135,208,61,0,205,207,204,0,143,208,24,7,141,208,24,7,32,208,208,0,121,208,59,0,119,0,65,0,141,204,145,9,1,207,160,3,94,208,204,207,143,208,19,7,141,208,19,7,19,208,208,200,41,208,208,24,42,208,208,24,141,204,17,7,19,204,204,200,41,204,204,24,42,204,204,24,52,208,208,204,140,117,1,0,119,0,43,0,141,208,12,7,25,71,208,12,141,208,14,7,19,208,208,200,0,143,208,0,141,204,145,9,1,207,160,3,3,208,204,207,143,208,16,1,26,208,143,1,143,208,20,7,25,208,71,1,143,208,21,7,141,208,20,7,32,208,208,0,120,208,34,0,141,207,16,1,25,208,207,1,143,208,22,7,141,207,21,7,78,208,207,0,143,208,96,1,141,207,22,7,78,208,207,0,143,208,23,7,141,208,96,1,41,208,208,24,42,208,208,24,141,207,23,7,41,207,207,24,42,207,207,24,45,208,208,207,48,118,1,0,141,208,21,7,0,71,208,0,141,208,20,7,0,143,208,0,141,207,22,7,0,208,207,0,143,208,16,1,119,0,225,255,119,0,1,0,141,207,12,7,102,208,207,60,143,208,25,7,141,208,12,7,141,207,25,7,39,207,207,1,107,208,60,207,141,208,12,7,25,208,208,12,141,204,145,9,1,205,160,3,3,204,204,205,135,207,62,0,208,204,0,0,141,207,12,7,1,204,194,0,109,207,64,204,141,207,145,9,1,208,160,3,3,207,207,208,102,204,207,11,143,204,26,7,141,204,26,7,41,204,204,24,42,204,204,24,34,204,204,0,121,204,8,0,141,207,145,9,1,208,160,3,94,204,207,208,143,204,27,7,141,207,27,7,135,204,21,0,207,0,0,0,141,207,145,9,3,207,207,202,102,204,207,11,143,204,29,7,141,204,29,7,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,207,145,9,94,204,207,202,143,204,30,7,141,207,30,7,135,204,21,0,207,0,0,0,141,204,145,9,1,207,0,0,97,204,202,207,141,207,145,9,3,207,207,202,1,204,0,0,109,207,4,204,141,204,145,9,3,204,204,202,1,207,0,0,109,204,8,207,1,204,16,0,135,207,26,0,204,0,0,0,143,207,31,7,141,207,145,9,141,204,31,7,97,207,202,204,141,204,145,9,3,204,204,202,2,207,0,0,16,0,0,128,109,204,8,207,141,207,145,9,3,207,207,202,1,204,15,0,109,207,4,204,141,207,31,7,0,204,207,0,143,204,143,9,2,204,0,0,250,89,21,0,143,204,146,9,141,207,143,9,25,204,207,15,143,204,147,9,141,204,143,9,141,207,146,9,78,207,207,0,83,204,207,0,141,204,143,9,25,207,204,1,143,207,143,9,141,204,146,9,25,207,204,1,143,207,146,9,141,207,143,9,141,204,147,9,54,207,207,204,136,119,1,0,141,207,31,7,1,204,0,0,107,207,15,204,2,207,0,0,172,208,221,0,1,208,0,0,141,205,145,9,3,205,205,202,135,204,72,0,207,208,205,0,143,204,32,7,141,204,145,9,1,205,160,3,1,208,0,0,97,204,205,208,141,208,145,9,1,205,160,3,3,208,208,205,1,205,0,0,109,208,4,205,141,205,145,9,1,208,160,3,3,205,205,208,1,208,0,0,109,205,8,208,141,208,145,9,1,205,160,3,3,208,208,205,1,205,8,0,107,208,11,205,141,205,145,9,1,208,160,3,2,204,0,0,76,111,103,111,97,205,208,204,141,204,145,9,1,208,160,3,3,204,204,208,2,208,0,0,32,107,101,121,109,204,4,208,141,208,145,9,1,204,160,3,3,208,208,204,1,204,0,0,107,208,8,204,141,208,32,7,106,204,208,56,143,204,34,7,141,204,34,7,34,204,204,2,121,204,100,0,141,208,32,7,25,208,208,12,102,204,208,11,143,204,35,7,141,208,32,7,106,204,208,16,143,204,37,7,141,205,35,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,37,7,0,208,205,0,119,0,4,0,141,205,35,7,19,205,205,200,0,208,205,0,0,204,208,0,143,204,38,7,141,204,38,7,32,204,204,8,121,204,70,0,141,208,32,7,106,204,208,12,143,204,39,7,141,204,35,7,41,204,204,24,42,204,204,24,34,204,204,0,121,204,13,0,141,208,39,7,141,205,145,9,1,207,160,3,3,205,205,207,1,207,8,0,135,204,61,0,208,205,207,0,143,204,45,7,141,204,45,7,32,204,204,0,121,204,51,0,119,0,57,0,141,204,39,7,19,204,204,200,41,204,204,24,42,204,204,24,32,204,204,76,120,204,2,0,119,0,43,0,141,204,32,7,25,72,204,12,141,204,35,7,19,204,204,200,0,144,204,0,141,207,145,9,1,205,160,3,3,204,207,205,143,204,17,1,26,204,144,1,143,204,41,7,25,204,72,1,143,204,42,7,141,204,41,7,32,204,204,0,120,204,34,0,141,205,17,1,25,204,205,1,143,204,43,7,141,205,42,7,78,204,205,0,143,204,97,1,141,205,43,7,78,204,205,0,143,204,44,7,141,204,97,1,41,204,204,24,42,204,204,24,141,205,44,7,41,205,205,24,42,205,205,24,45,204,204,205,252,121,1,0,141,204,42,7,0,72,204,0,141,204,41,7,0,144,204,0,141,205,43,7,0,204,205,0,143,204,17,1,119,0,225,255,119,0,1,0,141,205,32,7,102,204,205,60,143,204,46,7,141,204,32,7,141,205,46,7,39,205,205,1,107,204,60,205,141,204,32,7,25,204,204,12,141,207,145,9,1,208,160,3,3,207,207,208,135,205,62,0,204,207,0,0,141,205,32,7,1,207,194,0,109,205,64,207,141,205,145,9,1,204,160,3,3,205,205,204,102,207,205,11,143,207,47,7,141,207,47,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,8,0,141,205,145,9,1,204,160,3,94,207,205,204,143,207,48,7,141,205,48,7,135,207,21,0,205,0,0,0,141,205,145,9,3,205,205,202,102,207,205,11,143,207,49,7,141,207,49,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,7,0,141,205,145,9,94,207,205,202,143,207,50,7,141,205,50,7,135,207,21,0,205,0,0,0,141,207,145,9,1,205,0,0,97,207,202,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,4,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,8,205,1,207,16,0,135,205,26,0,207,0,0,0,143,205,51,7,141,205,145,9,141,207,51,7,97,205,202,207,141,207,145,9,3,207,207,202,2,205,0,0,16,0,0,128,109,207,8,205,141,205,145,9,3,205,205,202,1,207,15,0,109,205,4,207,141,205,51,7,0,207,205,0,143,207,143,9,2,207,0,0,10,90,21,0,143,207,146,9,141,205,143,9,25,207,205,15,143,207,147,9,141,207,143,9,141,205,146,9,78,205,205,0,83,207,205,0,141,207,143,9,25,205,207,1,143,205,143,9,141,207,146,9,25,205,207,1,143,205,146,9,141,205,143,9,141,207,147,9,54,205,205,207,84,123,1,0,141,205,51,7,1,207,0,0,107,205,15,207,2,205,0,0,172,208,221,0,1,204,0,0,141,208,145,9,3,208,208,202,135,207,72,0,205,204,208,0,143,207,53,7,141,207,145,9,1,208,160,3,1,204,0,0,97,207,208,204,141,204,145,9,1,208,160,3,3,204,204,208,1,208,0,0,109,204,4,208,141,208,145,9,1,204,160,3,3,208,208,204,1,204,0,0,109,208,8,204,141,204,145,9,1,208,160,3,3,204,204,208,1,208,8,0,107,204,11,208,141,208,145,9,1,204,160,3,2,207,0,0,77,101,110,117,97,208,204,207,141,207,145,9,1,204,160,3,3,207,207,204,2,204,0,0,32,107,101,121,109,207,4,204,141,204,145,9,1,207,160,3,3,204,204,207,1,207,0,0,107,204,8,207,141,204,53,7,106,207,204,56,143,207,54,7,141,207,54,7,34,207,207,2,121,207,100,0,141,204,53,7,25,204,204,12,102,207,204,11,143,207,55,7,141,204,53,7,106,207,204,16,143,207,56,7,141,208,55,7,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,56,7,0,204,208,0,119,0,4,0,141,208,55,7,19,208,208,200,0,204,208,0,0,207,204,0,143,207,57,7,141,207,57,7,32,207,207,8,121,207,70,0,141,204,53,7,106,207,204,12,143,207,59,7,141,207,55,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,13,0,141,204,59,7,141,208,145,9,1,205,160,3,3,208,208,205,1,205,8,0,135,207,61,0,204,208,205,0,143,207,65,7,141,207,65,7,32,207,207,0,121,207,51,0,119,0,57,0,141,207,59,7,19,207,207,200,41,207,207,24,42,207,207,24,32,207,207,77,120,207,2,0,119,0,43,0,141,207,53,7,25,73,207,12,141,207,55,7,19,207,207,200,0,145,207,0,141,205,145,9,1,208,160,3,3,207,205,208,143,207,18,1,26,207,145,1,143,207,60,7,25,207,73,1,143,207,61,7,141,207,60,7,32,207,207,0,120,207,34,0,141,208,18,1,25,207,208,1,143,207,62,7,141,208,61,7,78,207,208,0,143,207,98,1,141,208,62,7,78,207,208,0,143,207,63,7,141,207,98,1,41,207,207,24,42,207,207,24,141,208,63,7,41,208,208,24,42,208,208,24,45,207,207,208,200,125,1,0,141,207,61,7,0,73,207,0,141,207,60,7,0,145,207,0,141,208,62,7,0,207,208,0,143,207,18,1,119,0,225,255,119,0,1,0,141,208,53,7,102,207,208,60,143,207,66,7,141,207,53,7,141,208,66,7,39,208,208,1,107,207,60,208,141,207,53,7,25,207,207,12,141,205,145,9,1,204,160,3,3,205,205,204,135,208,62,0,207,205,0,0,141,208,53,7,1,205,194,0,109,208,64,205,141,208,145,9,1,207,160,3,3,208,208,207,102,205,208,11,143,205,67,7,141,205,67,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,208,145,9,1,207,160,3,94,205,208,207,143,205,68,7,141,208,68,7,135,205,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,205,208,11,143,205,70,7,141,205,70,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,208,145,9,94,205,208,202,143,205,71,7,141,208,71,7,135,205,21,0,208,0,0,0,141,205,145,9,1,208,0,0,97,205,202,208,141,208,145,9,3,208,208,202,1,205,0,0,109,208,4,205,141,205,145,9,3,205,205,202,1,208,0,0,109,205,8,208,1,205,16,0,135,208,26,0,205,0,0,0,143,208,72,7,141,208,145,9,141,205,72,7,97,208,202,205,141,205,145,9,3,205,205,202,2,208,0,0,16,0,0,128,109,205,8,208,141,208,145,9,3,208,208,202,1,205,11,0,109,208,4,205,141,208,72,7,0,205,208,0,143,205,143,9,2,205,0,0,26,90,21,0,143,205,146,9,141,208,143,9,25,205,208,11,143,205,147,9,141,205,143,9,141,208,146,9,78,208,208,0,83,205,208,0,141,205,143,9,25,208,205,1,143,208,143,9,141,205,146,9,25,208,205,1,143,208,146,9,141,208,143,9,141,205,147,9,54,208,208,205,32,127,1,0,141,208,72,7,1,205,0,0,107,208,11,205,2,208,0,0,172,208,221,0,1,207,0,0,141,204,145,9,3,204,204,202,135,205,72,0,208,207,204,0,143,205,73,7,141,205,145,9,1,204,160,3,1,207,0,0,97,205,204,207,141,207,145,9,1,204,160,3,3,207,207,204,1,204,0,0,109,207,4,204,141,204,145,9,1,207,160,3,3,204,204,207,1,207,0,0,109,204,8,207,1,204,16,0,135,207,26,0,204,0,0,0,143,207,74,7,141,207,145,9,1,204,160,3,141,205,74,7,97,207,204,205,141,205,145,9,1,204,160,3,3,205,205,204,2,204,0,0,16,0,0,128,109,205,8,204,141,204,145,9,1,205,160,3,3,204,204,205,1,205,12,0,109,204,4,205,141,204,74,7,0,205,204,0,143,205,143,9,2,205,0,0,166,63,21,0,143,205,146,9,141,204,143,9,25,205,204,12,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,44,128,1,0,141,204,74,7,1,205,0,0,107,204,12,205,141,204,73,7,106,205,204,56,143,205,77,7,141,205,77,7,34,205,205,2,121,205,97,0,141,204,73,7,25,204,204,12,102,205,204,11,143,205,78,7,141,204,73,7,106,205,204,16,143,205,79,7,141,207,78,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,4,0,141,207,79,7,0,204,207,0,119,0,4,0,141,207,78,7,19,207,207,200,0,204,207,0,0,205,204,0,143,205,80,7,141,205,80,7,32,205,205,12,121,205,67,0,141,204,73,7,106,205,204,12,143,205,81,7,141,205,78,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,11,0,141,204,81,7,141,207,74,7,1,208,12,0,135,205,61,0,204,207,208,0,143,205,87,7,141,205,87,7,32,205,205,0,121,205,50,0,119,0,56,0,141,205,81,7,19,205,205,200,41,205,205,24,42,205,205,24,32,205,205,67,120,205,2,0,119,0,42,0,141,205,73,7,25,74,205,12,141,205,78,7,19,205,205,200,0,146,205,0,141,208,74,7,0,205,208,0,143,205,19,1,26,205,146,1,143,205,82,7,25,205,74,1,143,205,83,7,141,205,82,7,32,205,205,0,120,205,34,0,141,208,19,1,25,205,208,1,143,205,85,7,141,208,83,7,78,205,208,0,143,205,99,1,141,208,85,7,78,205,208,0,143,205,86,7,141,205,99,1,41,205,205,24,42,205,205,24,141,208,86,7,41,208,208,24,42,208,208,24,45,205,205,208,232,129,1,0,141,205,83,7,0,74,205,0,141,205,82,7,0,146,205,0,141,208,85,7,0,205,208,0,143,205,19,1,119,0,225,255,119,0,1,0,141,208,73,7,102,205,208,60,143,205,88,7,141,205,73,7,141,208,88,7,39,208,208,1,107,205,60,208,141,205,73,7,25,205,205,12,141,207,145,9,1,204,160,3,3,207,207,204,135,208,62,0,205,207,0,0,141,208,73,7,1,207,194,0,109,208,64,207,141,208,145,9,1,205,160,3,3,208,208,205,102,207,208,11,143,207,89,7,141,207,89,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,8,0,141,208,145,9,1,205,160,3,94,207,208,205,143,207,90,7,141,208,90,7,135,207,21,0,208,0,0,0,141,208,145,9,3,208,208,202,102,207,208,11,143,207,91,7,141,207,91,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,7,0,141,208,145,9,94,207,208,202,143,207,92,7,141,208,92,7,135,207,21,0,208,0,0,0,141,207,145,9,1,208,0,0,97,207,202,208,141,208,145,9,3,208,208,202,1,207,0,0,109,208,4,207,141,207,145,9,3,207,207,202,1,208,0,0,109,207,8,208,141,208,145,9,3,208,208,202,1,207,9,0,107,208,11,207,141,208,145,9,3,207,208,202,143,207,143,9,2,207,0,0,142,53,21,0,143,207,146,9,141,208,143,9,25,207,208,9,143,207,147,9,141,207,143,9,141,208,146,9,78,208,208,0,83,207,208,0,141,207,143,9,25,208,207,1,143,208,143,9,141,207,146,9,25,208,207,1,143,208,146,9,141,208,143,9,141,207,147,9,54,208,208,207,16,131,1,0,141,208,145,9,3,208,208,202,1,207,0,0,107,208,9,207,2,208,0,0,172,208,221,0,1,205,0,0,141,204,145,9,3,204,204,202,135,207,72,0,208,205,204,0,143,207,93,7,141,207,145,9,1,204,160,3,1,205,0,0,97,207,204,205,141,205,145,9,1,204,160,3,3,205,205,204,1,204,0,0,109,205,4,204,141,204,145,9,1,205,160,3,3,204,204,205,1,205,0,0,109,204,8,205,1,204,32,0,135,205,26,0,204,0,0,0,143,205,95,7,141,205,145,9,1,204,160,3,141,207,95,7,97,205,204,207,141,207,145,9,1,204,160,3,3,207,207,204,2,204,0,0,32,0,0,128,109,207,8,204,141,204,145,9,1,207,160,3,3,204,204,207,1,207,29,0,109,204,4,207,141,204,95,7,0,207,204,0,143,207,143,9,2,207,0,0,179,63,21,0,143,207,146,9,141,204,143,9,25,207,204,29,143,207,147,9,141,207,143,9,141,204,146,9,78,204,204,0,83,207,204,0,141,207,143,9,25,204,207,1,143,204,143,9,141,207,146,9,25,204,207,1,143,204,146,9,141,204,143,9,141,207,147,9,54,204,204,207,32,132,1,0,141,204,95,7,1,207,0,0,107,204,29,207,141,204,93,7,106,207,204,56,143,207,96,7,141,207,96,7,34,207,207,2,121,207,97,0,141,204,93,7,25,204,204,12,102,207,204,11,143,207,97,7,141,204,93,7,106,207,204,16,143,207,99,7,141,205,97,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,99,7,0,204,205,0,119,0,4,0,141,205,97,7,19,205,205,200,0,204,205,0,0,207,204,0,143,207,100,7,141,207,100,7,32,207,207,29,121,207,67,0,141,204,93,7,106,207,204,12,143,207,101,7,141,207,97,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,11,0,141,204,101,7,141,205,95,7,1,208,29,0,135,207,61,0,204,205,208,0,143,207,106,7,141,207,106,7,32,207,207,0,121,207,50,0,119,0,56,0,141,207,101,7,19,207,207,200,41,207,207,24,42,207,207,24,32,207,207,68,120,207,2,0,119,0,42,0,141,207,93,7,25,75,207,12,141,207,97,7,19,207,207,200,0,147,207,0,141,208,95,7,0,207,208,0,143,207,20,1,26,207,147,1,143,207,102,7,25,207,75,1,143,207,103,7,141,207,102,7,32,207,207,0,120,207,34,0,141,208,20,1,25,207,208,1,143,207,104,7,141,208,103,7,78,207,208,0,143,207,100,1,141,208,104,7,78,207,208,0,143,207,105,7,141,207,100,1,41,207,207,24,42,207,207,24,141,208,105,7,41,208,208,24,42,208,208,24,45,207,207,208,220,133,1,0,141,207,103,7,0,75,207,0,141,207,102,7,0,147,207,0,141,208,104,7,0,207,208,0,143,207,20,1,119,0,225,255,119,0,1,0,141,208,93,7,102,207,208,60,143,207,107,7,141,207,93,7,141,208,107,7,39,208,208,1,107,207,60,208,141,207,93,7,25,207,207,12,141,205,145,9,1,204,160,3,3,205,205,204,135,208,62,0,207,205,0,0,141,208,93,7,1,205,195,0,109,208,64,205,141,205,145,9,1,208,72,4,1,207,0,0,97,205,208,207,141,207,145,9,1,208,72,4,3,207,207,208,1,208,0,0,109,207,4,208,141,208,145,9,1,207,72,4,3,208,208,207,1,207,0,0,109,208,8,207,1,208,32,0,135,207,26,0,208,0,0,0,143,207,109,7,141,207,145,9,1,208,72,4,141,205,109,7,97,207,208,205,141,205,145,9,1,208,72,4,3,205,205,208,2,208,0,0,32,0,0,128,109,205,8,208,141,208,145,9,1,205,72,4,3,208,208,205,1,205,17,0,109,208,4,205,141,208,109,7,0,205,208,0,143,205,143,9,2,205,0,0,250,29,21,0,143,205,146,9,141,208,143,9,25,205,208,17,143,205,147,9,141,205,143,9,141,208,146,9,78,208,208,0,83,205,208,0,141,205,143,9,25,208,205,1,143,208,143,9,141,205,146,9,25,208,205,1,143,208,146,9,141,208,143,9,141,205,147,9,54,208,208,205,204,134,1,0,141,208,109,7,1,205,0,0,107,208,17,205,1,208,1,0,141,207,145,9,1,204,72,4,3,207,207,204,1,204,0,0,135,205,134,0,208,207,204,0,143,205,110,7,141,204,93,7,102,205,204,60,143,205,111,7,141,205,111,7,19,205,205,200,43,205,205,3,38,205,205,1,19,205,205,200,141,204,110,7,1,207,0,0,14,204,204,207,38,204,204,1,52,205,205,204,204,135,1,0,141,204,110,7,1,207,0,0,14,204,204,207,38,204,204,1,41,204,204,3,19,204,204,200,141,207,111,7,38,207,207,247,20,204,204,207,0,205,204,0,143,205,113,7,141,205,93,7,141,204,113,7,107,205,60,204,141,205,93,7,106,204,205,56,143,204,114,7,141,204,114,7,34,204,204,1,120,204,2,0,119,0,5,0,141,204,93,7,141,205,113,7,39,205,205,1,107,204,60,205,141,204,145,9,1,207,72,4,3,204,204,207,102,205,204,11,143,205,115,7,141,205,115,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,204,145,9,1,207,72,4,94,205,204,207,143,205,116,7,141,204,116,7,135,205,21,0,204,0,0,0,141,204,145,9,1,207,160,3,3,204,204,207,102,205,204,11,143,205,117,7,141,205,117,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,204,145,9,1,207,160,3,94,205,204,207,143,205,118,7,141,204,118,7,135,205,21,0,204,0,0,0,141,204,145,9,3,204,204,202,102,205,204,11,143,205,119,7,141,205,119,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,121,7,141,204,121,7,135,205,21,0,204,0,0,0,141,205,145,9,1,204,0,0,97,205,202,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,4,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,8,204,1,205,16,0,135,204,26,0,205,0,0,0,143,204,122,7,141,204,145,9,141,205,122,7,97,204,202,205,141,205,145,9,3,205,205,202,2,204,0,0,16,0,0,128,109,205,8,204,141,204,145,9,3,204,204,202,1,205,11,0,109,204,4,205,141,204,122,7,0,205,204,0,143,205,143,9,2,205,0,0,152,53,21,0,143,205,146,9,141,204,143,9,25,205,204,11,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,32,137,1,0,141,204,122,7,1,205,0,0,107,204,11,205,2,204,0,0,172,208,221,0,1,207,0,0,141,208,145,9,3,208,208,202,135,205,72,0,204,207,208,0,143,205,123,7,141,205,145,9,1,208,160,3,1,207,0,0,97,205,208,207,141,207,145,9,1,208,160,3,3,207,207,208,1,208,0,0,109,207,4,208,141,208,145,9,1,207,160,3,3,208,208,207,1,207,0,0,109,208,8,207,1,208,16,0,135,207,26,0,208,0,0,0,143,207,124,7,141,207,145,9,1,208,160,3,141,205,124,7,97,207,208,205,141,205,145,9,1,208,160,3,3,205,205,208,2,208,0,0,16,0,0,128,109,205,8,208,141,208,145,9,1,205,160,3,3,208,208,205,1,205,13,0,109,208,4,205,141,208,124,7,0,205,208,0,143,205,143,9,2,205,0,0,209,63,21,0,143,205,146,9,141,208,143,9,25,205,208,13,143,205,147,9,141,205,143,9,141,208,146,9,78,208,208,0,83,205,208,0,141,205,143,9,25,208,205,1,143,208,143,9,141,205,146,9,25,208,205,1,143,208,146,9,141,208,143,9,141,205,147,9,54,208,208,205,44,138,1,0,141,208,124,7,1,205,0,0,107,208,13,205,141,208,123,7,106,205,208,56,143,205,125,7,141,205,125,7,34,205,205,2,121,205,97,0,141,208,123,7,25,208,208,12,102,205,208,11,143,205,126,7,141,208,123,7,106,205,208,16,143,205,127,7,141,207,126,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,4,0,141,207,127,7,0,208,207,0,119,0,4,0,141,207,126,7,19,207,207,200,0,208,207,0,0,205,208,0,143,205,129,7,141,205,129,7,32,205,205,13,121,205,67,0,141,208,123,7,106,205,208,12,143,205,130,7,141,205,126,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,11,0,141,208,130,7,141,207,124,7,1,204,13,0,135,205,61,0,208,207,204,0,143,205,135,7,141,205,135,7,32,205,205,0,121,205,50,0,119,0,56,0,141,205,130,7,19,205,205,200,41,205,205,24,42,205,205,24,32,205,205,65,120,205,2,0,119,0,42,0,141,205,123,7,25,76,205,12,141,205,126,7,19,205,205,200,0,148,205,0,141,204,124,7,0,205,204,0,143,205,21,1,26,205,148,1,143,205,131,7,25,205,76,1,143,205,132,7,141,205,131,7,32,205,205,0,120,205,34,0,141,204,21,1,25,205,204,1,143,205,133,7,141,204,132,7,78,205,204,0,143,205,101,1,141,204,133,7,78,205,204,0,143,205,134,7,141,205,101,1,41,205,205,24,42,205,205,24,141,204,134,7,41,204,204,24,42,204,204,24,45,205,205,204,232,139,1,0,141,205,132,7,0,76,205,0,141,205,131,7,0,148,205,0,141,204,133,7,0,205,204,0,143,205,21,1,119,0,225,255,119,0,1,0,141,204,123,7,102,205,204,60,143,205,136,7,141,205,123,7,141,204,136,7,39,204,204,1,107,205,60,204,141,205,123,7,25,205,205,12,141,207,145,9,1,208,160,3,3,207,207,208,135,204,62,0,205,207,0,0,141,204,123,7,1,207,196,0,109,204,64,207,141,204,123,7,102,207,204,60,143,207,137,7,141,207,137,7,38,207,207,8,41,207,207,24,42,207,207,24,32,207,207,0,120,207,17,0,141,207,123,7,141,204,137,7,38,204,204,247,107,207,60,204,141,207,123,7,106,204,207,56,143,204,139,7,141,204,139,7,34,204,204,1,120,204,2,0,119,0,6,0,141,204,123,7,141,207,137,7,38,207,207,247,39,207,207,1,107,204,60,207,141,204,145,9,1,205,160,3,3,204,204,205,102,207,204,11,143,207,140,7,141,207,140,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,8,0,141,204,145,9,1,205,160,3,94,207,204,205,143,207,141,7,141,204,141,7,135,207,21,0,204,0,0,0,141,204,145,9,3,204,204,202,102,207,204,11,143,207,143,7,141,207,143,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,7,0,141,204,145,9,94,207,204,202,143,207,144,7,141,204,144,7,135,207,21,0,204,0,0,0,141,207,145,9,1,204,0,0,97,207,202,204,141,204,145,9,3,204,204,202,1,207,0,0,109,204,4,207,141,207,145,9,3,207,207,202,1,204,0,0,109,207,8,204,1,207,16,0,135,204,26,0,207,0,0,0,143,204,145,7,141,204,145,9,141,207,145,7,97,204,202,207,141,207,145,9,3,207,207,202,2,204,0,0,16,0,0,128,109,207,8,204,141,204,145,9,3,204,204,202,1,207,11,0,109,204,4,207,141,204,145,7,0,207,204,0,143,207,143,9,2,207,0,0,77,90,21,0,143,207,146,9,141,204,143,9,25,207,204,11,143,207,147,9,141,207,143,9,141,204,146,9,78,204,204,0,83,207,204,0,141,207,143,9,25,204,207,1,143,204,143,9,141,207,146,9,25,204,207,1,143,204,146,9,141,204,143,9,141,207,147,9,54,204,204,207,164,141,1,0,141,204,145,7,1,207,0,0,107,204,11,207,2,204,0,0,172,208,221,0,1,205,0,0,141,208,145,9,3,208,208,202,135,207,72,0,204,205,208,0,143,207,146,7,141,207,145,9,1,208,160,3,1,205,0,0,97,207,208,205,141,205,145,9,1,208,160,3,3,205,205,208,1,208,0,0,109,205,4,208,141,208,145,9,1,205,160,3,3,208,208,205,1,205,0,0,109,208,8,205,1,208,16,0,135,205,26,0,208,0,0,0,143,205,147,7,141,205,145,9,1,208,160,3,141,207,147,7,97,205,208,207,141,207,145,9,1,208,160,3,3,207,207,208,2,208,0,0,16,0,0,128,109,207,8,208,141,208,145,9,1,207,160,3,3,208,208,207,1,207,12,0,109,208,4,207,141,208,147,7,0,207,208,0,143,207,143,9,2,207,0,0,223,63,21,0,143,207,146,9,141,208,143,9,25,207,208,12,143,207,147,9,141,207,143,9,141,208,146,9,78,208,208,0,83,207,208,0,141,207,143,9,25,208,207,1,143,208,143,9,141,207,146,9,25,208,207,1,143,208,146,9,141,208,143,9,141,207,147,9,54,208,208,207,176,142,1,0,141,208,147,7,1,207,0,0,107,208,12,207,141,208,146,7,106,207,208,56,143,207,149,7,141,207,149,7,34,207,207,2,121,207,97,0,141,208,146,7,25,208,208,12,102,207,208,11,143,207,150,7,141,208,146,7,106,207,208,16,143,207,152,7,141,205,150,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,152,7,0,208,205,0,119,0,4,0,141,205,150,7,19,205,205,200,0,208,205,0,0,207,208,0,143,207,153,7,141,207,153,7,32,207,207,12,121,207,67,0,141,208,146,7,106,207,208,12,143,207,154,7,141,207,150,7,41,207,207,24,42,207,207,24,34,207,207,0,121,207,11,0,141,208,154,7,141,205,147,7,1,204,12,0,135,207,61,0,208,205,204,0,143,207,159,7,141,207,159,7,32,207,207,0,121,207,50,0,119,0,56,0,141,207,154,7,19,207,207,200,41,207,207,24,42,207,207,24,32,207,207,83,120,207,2,0,119,0,42,0,141,207,146,7,25,77,207,12,141,207,150,7,19,207,207,200,0,149,207,0,141,204,147,7,0,207,204,0,143,207,22,1,26,207,149,1,143,207,155,7,25,207,77,1,143,207,156,7,141,207,155,7], eb + 92160);
  HEAPU8.set([32,207,207,0,120,207,34,0,141,204,22,1,25,207,204,1,143,207,157,7,141,204,156,7,78,207,204,0,143,207,102,1,141,204,157,7,78,207,204,0,143,207,158,7,141,207,102,1,41,207,207,24,42,207,207,24,141,204,158,7,41,204,204,24,42,204,204,24,45,207,207,204,108,144,1,0,141,207,156,7,0,77,207,0,141,207,155,7,0,149,207,0,141,204,157,7,0,207,204,0,143,207,22,1,119,0,225,255,119,0,1,0,141,204,146,7,102,207,204,60,143,207,160,7,141,207,146,7,141,204,160,7,39,204,204,1,107,207,60,204,141,207,146,7,25,207,207,12,141,205,145,9,1,208,160,3,3,205,205,208,135,204,62,0,207,205,0,0,141,204,146,7,1,205,197,0,109,204,64,205,2,204,0,0,212,224,53,2,78,205,204,0,143,205,162,7,141,204,146,7,102,205,204,60,143,205,163,7,141,205,163,7,19,205,205,200,43,205,205,3,38,205,205,1,41,205,205,24,42,205,205,24,141,204,162,7,40,204,204,1,41,204,204,24,42,204,204,24,52,205,205,204,104,145,1,0,141,205,146,7,141,204,163,7,38,204,204,247,141,207,162,7,41,207,207,3,19,207,207,200,20,204,204,207,40,204,204,8,107,205,60,204,141,205,146,7,106,204,205,56,143,204,165,7,141,204,165,7,34,204,204,1,120,204,2,0,119,0,11,0,141,204,146,7,141,205,163,7,38,205,205,247,141,207,162,7,41,207,207,3,19,207,207,200,20,205,205,207,40,205,205,8,39,205,205,1,107,204,60,205,141,204,145,9,1,207,160,3,3,204,204,207,102,205,204,11,143,205,166,7,141,205,166,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,204,145,9,1,207,160,3,94,205,204,207,143,205,167,7,141,204,167,7,135,205,21,0,204,0,0,0,141,204,145,9,3,204,204,202,102,205,204,11,143,205,168,7,141,205,168,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,170,7,141,204,170,7,135,205,21,0,204,0,0,0,141,205,145,9,1,204,0,0,97,205,202,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,4,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,8,204,1,205,32,0,135,204,26,0,205,0,0,0,143,204,171,7,141,204,145,9,141,205,171,7,97,204,202,205,141,205,145,9,3,205,205,202,2,204,0,0,32,0,0,128,109,205,8,204,141,204,145,9,3,204,204,202,1,205,16,0,109,204,4,205,141,204,171,7,0,205,204,0,143,205,143,9,2,205,0,0,212,131,21,0,143,205,146,9,141,204,143,9,25,205,204,16,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,120,146,1,0,141,204,171,7,1,205,0,0,107,204,16,205,2,204,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,205,135,0,204,207,0,0,143,205,172,7,135,205,136,0,143,205,173,7,141,207,172,7,102,205,207,60,143,205,174,7,141,205,174,7,19,205,205,200,43,205,205,3,38,205,205,1,19,205,205,200,141,207,173,7,38,207,207,1,52,205,205,207,120,147,1,0,141,205,172,7,141,207,174,7,38,207,207,247,141,204,173,7,38,204,204,1,41,204,204,3,19,204,204,200,20,207,207,204,107,205,60,207,141,205,172,7,106,207,205,56,143,207,177,7,141,207,177,7,34,207,207,1,120,207,2,0,119,0,11,0,141,207,172,7,141,205,174,7,38,205,205,247,141,204,173,7,38,204,204,1,41,204,204,3,19,204,204,200,20,205,205,204,39,205,205,1,107,207,60,205,141,207,172,7,2,204,0,0,172,208,221,0,135,205,137,0,207,204,0,0,141,204,145,9,3,204,204,202,102,205,204,11,143,205,178,7,141,205,178,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,179,7,141,204,179,7,135,205,21,0,204,0,0,0,141,205,145,9,3,205,205,202,1,204,10,0,107,205,11,204,141,205,145,9,3,204,205,202,143,204,143,9,2,204,0,0,201,131,21,0,143,204,146,9,141,205,143,9,25,204,205,10,143,204,147,9,141,204,143,9,141,205,146,9,78,205,205,0,83,204,205,0,141,204,143,9,25,205,204,1,143,205,143,9,141,204,146,9,25,205,204,1,143,205,146,9,141,205,143,9,141,204,147,9,54,205,205,204,252,147,1,0,141,205,145,9,3,205,205,202,1,204,0,0,107,205,10,204,2,205,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,204,135,0,205,207,0,0,143,204,180,7,135,204,138,0,143,204,182,7,141,207,180,7,102,204,207,60,143,204,183,7,141,204,183,7,19,204,204,200,43,204,204,3,38,204,204,1,19,204,204,200,141,207,182,7,38,207,207,1,52,204,204,207,0,149,1,0,141,204,180,7,141,207,183,7,38,207,207,247,141,205,182,7,38,205,205,1,41,205,205,3,19,205,205,200,20,207,207,205,107,204,60,207,141,204,180,7,106,207,204,56,143,207,184,7,141,207,184,7,34,207,207,1,120,207,2,0,119,0,11,0,141,207,180,7,141,204,183,7,38,204,204,247,141,205,182,7,38,205,205,1,41,205,205,3,19,205,205,200,20,204,204,205,39,204,204,1,107,207,60,204,141,207,180,7,2,205,0,0,172,208,221,0,135,204,137,0,207,205,0,0,141,205,145,9,3,205,205,202,102,204,205,11,143,204,185,7,141,204,185,7,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,205,145,9,94,204,205,202,143,204,186,7,141,205,186,7,135,204,21,0,205,0,0,0,141,204,145,9,1,205,0,0,97,204,202,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,4,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,8,205,1,204,16,0,135,205,26,0,204,0,0,0,143,205,187,7,141,205,145,9,141,204,187,7,97,205,202,204,141,204,145,9,3,204,204,202,2,205,0,0,16,0,0,128,109,204,8,205,141,205,145,9,3,205,205,202,1,204,13,0,109,205,4,204,141,205,187,7,0,204,205,0,143,204,143,9,2,204,0,0,155,89,21,0,143,204,146,9,141,205,143,9,25,204,205,13,143,204,147,9,141,204,143,9,141,205,146,9,78,205,205,0,83,204,205,0,141,204,143,9,25,205,204,1,143,205,143,9,141,204,146,9,25,205,204,1,143,205,146,9,141,205,143,9,141,204,147,9,54,205,205,204,224,149,1,0,141,205,187,7,1,204,0,0,107,205,13,204,2,205,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,204,135,0,205,207,0,0,143,204,189,7,2,207,0,0,37,83,71,0,78,204,207,0,143,204,190,7,141,207,189,7,102,204,207,60,143,204,191,7,141,204,191,7,19,204,204,200,43,204,204,3,38,204,204,1,41,204,204,24,42,204,204,24,141,207,190,7,41,207,207,24,42,207,207,24,52,204,204,207,232,150,1,0,141,204,189,7,141,207,191,7,38,207,207,247,141,205,190,7,41,205,205,3,19,205,205,200,20,207,207,205,107,204,60,207,141,204,189,7,106,207,204,56,143,207,192,7,141,207,192,7,34,207,207,1,120,207,2,0,119,0,10,0,141,207,189,7,141,204,191,7,38,204,204,247,141,205,190,7,41,205,205,3,19,205,205,200,20,204,204,205,39,204,204,1,107,207,60,204,141,207,145,9,3,207,207,202,102,204,207,11,143,204,193,7,141,204,193,7,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,207,145,9,94,204,207,202,143,204,195,7,141,207,195,7,135,204,21,0,207,0,0,0,141,204,145,9,1,207,0,0,97,204,202,207,141,207,145,9,3,207,207,202,1,204,0,0,109,207,4,204,141,204,145,9,3,204,204,202,1,207,0,0,109,204,8,207,1,204,16,0,135,207,26,0,204,0,0,0,143,207,196,7,141,207,145,9,141,204,196,7,97,207,202,204,141,204,145,9,3,204,204,202,2,207,0,0,16,0,0,128,109,204,8,207,141,207,145,9,3,207,207,202,1,204,13,0,109,207,4,204,141,207,196,7,0,204,207,0,143,204,143,9,2,204,0,0,101,88,21,0,143,204,146,9,141,207,143,9,25,204,207,13,143,204,147,9,141,204,143,9,141,207,146,9,78,207,207,0,83,204,207,0,141,204,143,9,25,207,204,1,143,207,143,9,141,204,146,9,25,207,204,1,143,207,146,9,141,207,143,9,141,204,147,9,54,207,207,204,180,151,1,0,141,207,196,7,1,204,0,0,107,207,13,204,2,207,0,0,172,208,221,0,141,205,145,9,3,205,205,202,135,204,135,0,207,205,0,0,143,204,197,7,2,205,0,0,44,156,79,0,82,204,205,0,143,204,198,7,141,205,197,7,102,204,205,60,143,204,199,7,141,204,199,7,19,204,204,200,43,204,204,2,38,204,204,1,19,204,204,200,141,205,198,7,33,205,205,7,38,205,205,1,52,204,204,205,184,152,1,0,141,205,198,7,33,205,205,7,38,205,205,1,41,205,205,2,19,205,205,200,141,207,199,7,38,207,207,251,20,205,205,207,0,204,205,0,143,204,201,7,141,204,197,7,141,205,201,7,107,204,60,205,141,204,197,7,106,205,204,56,143,205,203,7,141,205,203,7,34,205,205,2,120,205,2,0,119,0,5,0,141,205,197,7,141,204,201,7,39,204,204,1,107,205,60,204,141,205,145,9,3,205,205,202,102,204,205,11,143,204,204,7,141,204,204,7,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,205,145,9,94,204,205,202,143,204,205,7,141,205,205,7,135,204,21,0,205,0,0,0,141,204,145,9,3,204,204,202,1,205,10,0,107,204,11,205,141,204,145,9,3,205,204,202,143,205,143,9,2,205,0,0,115,88,21,0,143,205,146,9,141,204,143,9,25,205,204,10,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,40,153,1,0,141,204,145,9,3,204,204,202,1,205,0,0,107,204,10,205,2,204,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,205,135,0,204,207,0,0,143,205,206,7,2,207,0,0,44,156,79,0,82,205,207,0,143,205,208,7,141,207,206,7,102,205,207,60,143,205,209,7,141,205,209,7,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,207,208,7,33,207,207,7,38,207,207,1,52,205,205,207,48,154,1,0,141,207,208,7,33,207,207,7,38,207,207,1,41,207,207,2,19,207,207,200,141,204,209,7,38,204,204,251,20,207,207,204,0,205,207,0,143,205,210,7,141,205,206,7,141,207,210,7,107,205,60,207,141,205,206,7,106,207,205,56,143,207,211,7,141,207,211,7,34,207,207,2,120,207,2,0,119,0,5,0,141,207,206,7,141,205,210,7,39,205,205,1,107,207,60,205,141,207,145,9,3,207,207,202,102,205,207,11,143,205,212,7,141,205,212,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,213,7,141,207,213,7,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,16,0,135,207,26,0,205,0,0,0,143,207,215,7,141,207,145,9,141,205,215,7,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,16,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,13,0,109,207,4,205,141,207,215,7,0,205,207,0,143,205,143,9,2,205,0,0,122,169,21,0,143,205,146,9,141,207,143,9,25,205,207,13,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,252,154,1,0,141,207,215,7,1,205,0,0,107,207,13,205,2,207,0,0,172,208,221,0,141,204,145,9,3,204,204,202,135,205,135,0,207,204,0,0,143,205,216,7,2,204,0,0,44,156,79,0,82,205,204,0,143,205,217,7,141,204,216,7,102,205,204,60,143,205,218,7,141,205,218,7,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,204,217,7,32,204,204,7,38,204,204,1,52,205,205,204,0,156,1,0,141,204,217,7,32,204,204,7,38,204,204,1,41,204,204,2,19,204,204,200,141,207,218,7,38,207,207,251,20,204,204,207,0,205,204,0,143,205,219,7,141,205,216,7,141,204,219,7,107,205,60,204,141,205,216,7,106,204,205,56,143,204,220,7,141,204,220,7,34,204,204,2,120,204,2,0,119,0,5,0,141,204,216,7,141,205,219,7,39,205,205,1,107,204,60,205,141,204,145,9,3,204,204,202,102,205,204,11,143,205,222,7,141,205,222,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,223,7,141,204,223,7,135,205,21,0,204,0,0,0,141,205,145,9,1,204,0,0,97,205,202,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,4,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,8,204,1,205,32,0,135,204,26,0,205,0,0,0,143,204,224,7,141,204,145,9,141,205,224,7,97,204,202,205,141,205,145,9,3,205,205,202,2,204,0,0,32,0,0,128,109,205,8,204,141,204,145,9,3,204,204,202,1,205,22,0,109,204,4,205,141,204,224,7,0,205,204,0,143,205,143,9,2,205,0,0,75,169,21,0,143,205,146,9,141,204,143,9,25,205,204,22,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,204,156,1,0,141,204,224,7,1,205,0,0,107,204,22,205,2,204,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,205,135,0,204,207,0,0,143,205,226,7,2,207,0,0,44,156,79,0,82,205,207,0,143,205,227,7,141,207,226,7,102,205,207,60,143,205,228,7,141,205,228,7,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,207,227,7,32,207,207,7,38,207,207,1,52,205,205,207,208,157,1,0,141,207,227,7,32,207,207,7,38,207,207,1,41,207,207,2,19,207,207,200,141,204,228,7,38,204,204,251,20,207,207,204,0,205,207,0,143,205,230,7,141,205,226,7,141,207,230,7,107,205,60,207,141,205,226,7,106,207,205,56,143,207,231,7,141,207,231,7,34,207,207,2,120,207,2,0,119,0,5,0,141,207,226,7,141,205,230,7,39,205,205,1,107,207,60,205,141,207,145,9,3,207,207,202,102,205,207,11,143,205,232,7,141,205,232,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,234,7,141,207,234,7,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,32,0,135,207,26,0,205,0,0,0,143,207,235,7,141,207,145,9,141,205,235,7,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,32,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,22,0,109,207,4,205,141,207,235,7,0,205,207,0,143,205,143,9,2,205,0,0,49,170,21,0,143,205,146,9,141,207,143,9,25,205,207,22,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,156,158,1,0,141,207,235,7,1,205,0,0,107,207,22,205,2,207,0,0,172,208,221,0,141,204,145,9,3,204,204,202,135,205,135,0,207,204,0,0,143,205,236,7,2,204,0,0,44,156,79,0,82,205,204,0,143,205,237,7,141,204,236,7,102,205,204,60,143,205,238,7,141,205,238,7,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,204,237,7,32,204,204,7,38,204,204,1,52,205,205,204,160,159,1,0,141,204,237,7,32,204,204,7,38,204,204,1,41,204,204,2,19,204,204,200,141,207,238,7,38,207,207,251,20,204,204,207,0,205,204,0,143,205,239,7,141,205,236,7,141,204,239,7,107,205,60,204,141,205,236,7,106,204,205,56,143,204,242,7,141,204,242,7,34,204,204,2,120,204,2,0,119,0,5,0,141,204,236,7,141,205,239,7,39,205,205,1,107,204,60,205,141,204,145,9,3,204,204,202,102,205,204,11,143,205,243,7,141,205,243,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,244,7,141,204,244,7,135,205,21,0,204,0,0,0,141,205,145,9,1,204,0,0,97,205,202,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,4,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,8,204,1,205,16,0,135,204,26,0,205,0,0,0,143,204,245,7,141,204,145,9,141,205,245,7,97,204,202,205,141,205,145,9,3,205,205,202,2,204,0,0,16,0,0,128,109,205,8,204,141,204,145,9,3,204,204,202,1,205,15,0,109,204,4,205,141,204,245,7,0,205,204,0,143,205,143,9,2,205,0,0,72,170,21,0,143,205,146,9,141,204,143,9,25,205,204,15,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,108,160,1,0,141,204,245,7,1,205,0,0,107,204,15,205,2,204,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,205,135,0,204,207,0,0,143,205,246,7,2,207,0,0,44,156,79,0,82,205,207,0,143,205,247,7,141,207,246,7,102,205,207,60,143,205,248,7,141,205,248,7,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,207,247,7,32,207,207,7,38,207,207,1,52,205,205,207,112,161,1,0,141,207,247,7,32,207,207,7,38,207,207,1,41,207,207,2,19,207,207,200,141,204,248,7,38,204,204,251,20,207,207,204,0,205,207,0,143,205,250,7,141,205,246,7,141,207,250,7,107,205,60,207,141,205,246,7,106,207,205,56,143,207,251,7,141,207,251,7,34,207,207,2,120,207,2,0,119,0,5,0,141,207,246,7,141,205,250,7,39,205,205,1,107,207,60,205,141,207,145,9,3,207,207,202,102,205,207,11,143,205,253,7,141,205,253,7,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,254,7,141,207,254,7,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,32,0,135,207,26,0,205,0,0,0,143,207,255,7,141,207,145,9,141,205,255,7,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,32,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,16,0,109,207,4,205,141,207,255,7,0,205,207,0,143,205,143,9,2,205,0,0,88,170,21,0,143,205,146,9,141,207,143,9,25,205,207,16,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,60,162,1,0,141,207,255,7,1,205,0,0,107,207,16,205,2,207,0,0,172,208,221,0,141,204,145,9,3,204,204,202,135,205,135,0,207,204,0,0,143,205,0,8,2,204,0,0,44,156,79,0,82,205,204,0,143,205,1,8,141,204,0,8,102,205,204,60,143,205,3,8,141,205,3,8,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,204,1,8,32,204,204,7,38,204,204,1,52,205,205,204,64,163,1,0,141,204,1,8,32,204,204,7,38,204,204,1,41,204,204,2,19,204,204,200,141,207,3,8,38,207,207,251,20,204,204,207,0,205,204,0,143,205,5,8,141,205,0,8,141,204,5,8,107,205,60,204,141,205,0,8,106,204,205,56,143,204,6,8,141,204,6,8,34,204,204,2,120,204,2,0,119,0,5,0,141,204,0,8,141,205,5,8,39,205,205,1,107,204,60,205,141,204,145,9,3,204,204,202,102,205,204,11,143,205,7,8,141,205,7,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,8,8,141,204,8,8,135,205,21,0,204,0,0,0,141,205,145,9,1,204,0,0,97,205,202,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,4,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,8,204,1,205,32,0,135,204,26,0,205,0,0,0,143,204,9,8,141,204,145,9,141,205,9,8,97,204,202,205,141,205,145,9,3,205,205,202,2,204,0,0,32,0,0,128,109,205,8,204,141,204,145,9,3,204,204,202,1,205,18,0,109,204,4,205,141,204,9,8,0,205,204,0,143,205,143,9,2,205,0,0,105,170,21,0,143,205,146,9,141,204,143,9,25,205,204,18,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,12,164,1,0,141,204,9,8,1,205,0,0,107,204,18,205,2,204,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,205,135,0,204,207,0,0,143,205,10,8,2,207,0,0,44,156,79,0,82,205,207,0,143,205,11,8,141,207,10,8,102,205,207,60,143,205,12,8,141,205,12,8,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,207,11,8,32,207,207,7,38,207,207,1,52,205,205,207,16,165,1,0,141,207,11,8,32,207,207,7,38,207,207,1,41,207,207,2,19,207,207,200,141,204,12,8,38,204,204,251,20,207,207,204,0,205,207,0,143,205,14,8,141,205,10,8,141,207,14,8,107,205,60,207,141,205,10,8,106,207,205,56,143,207,15,8,141,207,15,8,34,207,207,2,120,207,2,0,119,0,5,0,141,207,10,8,141,205,14,8,39,205,205,1,107,207,60,205,141,207,145,9,3,207,207,202,102,205,207,11,143,205,16,8,141,205,16,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,17,8,141,207,17,8,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,16,0,135,207,26,0,205,0,0,0,143,207,18,8,141,207,145,9,141,205,18,8,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,16,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,15,0,109,207,4,205,141,207,18,8,0,205,207,0,143,205,143,9,2,205,0,0,65,88,21,0,143,205,146,9,141,207,143,9,25,205,207,15,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,220,165,1,0,141,207,18,8,1,205,0,0,107,207,15,205,2,207,0,0,172,208,221,0,141,204,145,9,3,204,204,202,135,205,135,0,207,204,0,0,143,205,20,8,2,204,0,0,44,156,79,0,82,205,204,0,143,205,21,8,141,204,20,8,102,205,204,60,143,205,22,8,141,205,22,8,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,204,21,8,32,204,204,7,38,204,204,1,52,205,205,204,224,166,1,0,141,204,21,8,32,204,204,7,38,204,204,1,41,204,204,2,19,204,204,200,141,207,22,8,38,207,207,251,20,204,204,207,0,205,204,0,143,205,23,8,141,205,20,8,141,204,23,8,107,205,60,204,141,205,20,8,106,204,205,56,143,204,24,8,141,204,24,8,34,204,204,2,120,204,2,0,119,0,5,0,141,204,20,8,141,205,23,8,39,205,205,1,107,204,60,205,141,204,145,9,3,204,204,202,102,205,204,11,143,205,25,8,141,205,25,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,26,8,141,204,26,8,135,205,21,0,204,0,0,0,141,205,145,9,1,204,0,0,97,205,202,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,4,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,8,204,1,205,32,0,135,204,26,0,205,0,0,0,143,204,27,8,141,204,145,9,141,205,27,8,97,204,202,205,141,205,145,9,3,205,205,202,2,204,0,0,32,0,0,128,109,205,8,204,141,204,145,9,3,204,204,202,1,205,19,0,109,204,4,205,141,204,27,8,0,205,204,0,143,205,143,9,2,205,0,0,81,88,21,0,143,205,146,9,141,204,143,9,25,205,204,19,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,172,167,1,0,141,204,27,8,1,205,0,0,107,204,19,205,2,204,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,205,135,0,204,207,0,0,143,205,28,8,2,207,0,0,44,156,79,0,82,205,207,0,143,205,29,8,141,207,28,8,102,205,207,60,143,205,30,8,141,205,30,8,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,207,29,8,32,207,207,7,38,207,207,1,52,205,205,207,176,168,1,0,141,207,29,8,32,207,207,7,38,207,207,1,41,207,207,2,19,207,207,200,141,204,30,8,38,204,204,251,20,207,207,204,0,205,207,0,143,205,31,8,141,205,28,8,141,207,31,8,107,205,60,207,141,205,28,8,106,207,205,56,143,207,33,8,141,207,33,8,34,207,207,2,120,207,2,0,119,0,5,0,141,207,28,8,141,205,31,8,39,205,205,1,107,207,60,205,141,207,145,9,3,207,207,202,102,205,207,11,143,205,34,8,141,205,34,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,35,8,141,207,35,8,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,32,0,135,207,26,0,205,0,0,0,143,207,36,8,141,207,145,9,141,205,36,8,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,32,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,17,0,109,207,4,205,141,207,36,8,0,205,207,0,143,205,143,9,2,205,0,0,209,87,21,0,143,205,146,9,141,207,143,9,25,205,207,17,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,124,169,1,0,141,207,36,8,1,205,0,0,107,207,17,205,2,207,0,0,172,208,221,0,141,204,145,9,3,204,204,202,135,205,135,0,207,204,0,0,143,205,37,8,2,204,0,0,44,156,79,0,82,205,204,0,143,205,38,8,141,204,37,8,102,205,204,60,143,205,39,8,141,205,39,8,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,204,38,8,32,204,204,7,38,204,204,1,52,205,205,204,128,170,1,0,141,204,38,8,32,204,204,7,38,204,204,1,41,204,204,2,19,204,204,200,141,207,39,8,38,207,207,251,20,204,204,207,0,205,204,0,143,205,41,8,141,205,37,8,141,204,41,8,107,205,60,204,141,205,37,8,106,204,205,56,143,204,42,8,141,204,42,8,34,204,204,2,120,204,2,0,119,0,5,0,141,204,37,8,141,205,41,8,39,205,205,1,107,204,60,205,141,204,145,9,3,204,204,202,102,205,204,11,143,205,43,8,141,205,43,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,204,145,9,94,205,204,202,143,205,44,8,141,204,44,8,135,205,21,0,204,0,0,0,141,205,145,9,1,204,0,0,97,205,202,204,141,204,145,9,3,204,204,202,1,205,0,0,109,204,4,205,141,205,145,9,3,205,205,202,1,204,0,0,109,205,8,204,1,205,32,0,135,204,26,0,205,0,0,0,143,204,45,8,141,204,145,9,141,205,45,8,97,204,202,205,141,205,145,9,3,205,205,202,2,204,0,0,32,0,0,128,109,205,8,204,141,204,145,9,3,204,204,202,1,205,17,0,109,204,4,205,141,204,45,8,0,205,204,0,143,205,143,9,2,205,0,0,227,87,21,0,143,205,146,9,141,204,143,9,25,205,204,17,143,205,147,9,141,205,143,9,141,204,146,9,78,204,204,0,83,205,204,0,141,205,143,9,25,204,205,1,143,204,143,9,141,205,146,9,25,204,205,1,143,204,146,9,141,204,143,9,141,205,147,9,54,204,204,205,76,171,1,0,141,204,45,8,1,205,0,0,107,204,17,205,2,204,0,0,172,208,221,0,141,207,145,9,3,207,207,202,135,205,135,0,204,207,0,0,143,205,46,8,2,207,0,0,44,156,79,0,82,205,207,0,143,205,47,8,141,207,46,8,102,205,207,60,143,205,49,8,141,205,49,8,19,205,205,200,43,205,205,2,38,205,205,1,19,205,205,200,141,207,47,8,32,207,207,7,38,207,207,1,52,205,205,207,80,172,1,0,141,207,47,8,32,207,207,7,38,207,207,1,41,207,207,2,19,207,207,200,141,204,49,8,38,204,204,251,20,207,207,204,0,205,207,0,143,205,50,8,141,205,46,8,141,207,50,8,107,205,60,207,141,205,46,8,106,207,205,56,143,207,51,8,141,207,51,8,34,207,207,2,120,207,2,0,119,0,5,0,141,207,46,8,141,205,50,8,39,205,205,1,107,207,60,205,141,207,145,9,3,207,207,202,102,205,207,11,143,205,52,8,141,205,52,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,53,8,141,207,53,8,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,32,0,135,207,26,0,205,0,0,0,143,207,55,8,141,207,145,9,141,205,55,8,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,32,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,22,0,109,207,4,205,141,207,55,8,0,205,207,0,143,205,143,9,2,205,0,0,245,87,21,0,143,205,146,9,141,207,143,9,25,205,207,22,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,28,173,1,0,141,207,55,8,1,205,0,0,107,207,22,205,2,207,0,0,172,208,221,0,141,204,145,9,3,204,204,202,135,205,135,0,207,204,0,0,143,205,56,8,2,204,0,0,122,225,19,0,78,205,204,0,143,205,57,8,141,204,56,8,102,205,204,60,143,205,58,8,141,205,58,8,19,205,205,200,43,205,205,3,38,205,205,1,41,205,205,24,42,205,205,24,141,204,57,8,41,204,204,24,42,204,204,24,52,205,205,204,36,174,1,0,141,205,56,8,141,204,58,8,38,204,204,247,141,207,57,8,41,207,207,3,19,207,207,200,20,204,204,207,107,205,60,204,141,205,56,8,106,204,205,56,143,204,60,8,141,204,60,8,34,204,204,1,120,204,2,0,119,0,10,0,141,204,56,8,141,205,58,8,38,205,205,247,141,207,57,8,41,207,207,3,19,207,207,200,20,205,205,207,39,205,205,1,107,204,60,205,141,204,56,8,2,207,0,0,172,208,221,0,135,205,137,0,204,207,0,0,141,207,145,9,3,207,207,202,102,205,207,11,143,205,61,8,141,205,61,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,63,8,141,207,63,8,135,205,21,0,207,0,0,0,141,205,145,9,1,207,0,0,97,205,202,207,141,207,145,9,3,207,207,202,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,0,0,109,205,8,207,1,205,32,0,135,207,26,0,205,0,0,0,143,207,64,8,141,207,145,9,141,205,64,8,97,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,32,0,0,128,109,205,8,207,141,207,145,9,3,207,207,202,1,205,24,0,109,207,4,205,141,207,64,8,0,205,207,0,143,205,143,9,2,205,0,0,12,88,21,0,143,205,146,9,141,207,143,9,25,205,207,24,143,205,147,9,141,205,143,9,141,207,146,9,78,207,207,0,83,205,207,0,141,205,143,9,25,207,205,1,143,207,143,9,141,205,146,9,25,207,205,1,143,207,146,9,141,207,143,9,141,205,147,9,54,207,207,205,4,175,1,0,141,207,64,8,1,205,0,0,107,207,24,205,2,207,0,0,172,208,221,0,141,204,145,9,3,204,204,202,135,205,135,0,207,204,0,0,143,205,65,8,2,204,0,0,148,223,53,2,78,205,204,0,143,205,66,8,141,204,65,8,102,205,204,60,143,205,67,8,141,205,67,8,19,205,205,200,43,205,205,3,38,205,205,1,41,205,205,24,42,205,205,24,141,204,66,8,41,204,204,24,42,204,204,24,52,205,205,204,12,176,1,0,141,205,65,8,141,204,67,8,38,204,204,247,141,207,66,8,41,207,207,3,19,207,207,200,20,204,204,207,107,205,60,204,141,205,65,8,106,204,205,56,143,204,69,8,141,204,69,8,34,204,204,1,120,204,2,0,119,0,10,0,141,204,65,8,141,205,67,8,38,205,205,247,141,207,66,8,41,207,207,3,19,207,207,200,20,205,205,207,39,205,205,1,107,204,60,205,141,204,65,8,2,207,0,0,172,208,221,0,135,205,137,0,204,207,0,0,141,207,145,9,3,207,207,202,102,205,207,11,143,205,70,8,141,205,70,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,145,9,94,205,207,202,143,205,71,8,141,207,71,8,135,205,21,0,207,0,0,0,135,205,139,0,135,205,140,0,2,207,0,0,4,224,53,2,78,205,207,0,143,205,72,8,141,205,72,8,41,205,205,24,42,205,205,24,32,205,205,0,121,205,14,0,2,205,0,0,4,224,53,2,1,207,1,0,83,205,207,0,1,205,0,0,135,207,141,0,205,0,0,0,1,205,1,0,135,207,141,0,205,0,0,0,1,205,2,0,135,207,141,0,205,0,0,0,2,207,0,0,194,82,71,0,1,205,0,0,83,207,205,0,141,205,145,9,1,207,224,4,1,204,0,0,97,205,207,204,141,204,145,9,1,207,228,4,1,205,0,0,97,204,207,205,135,205,142,0,135,205,143,0,2,207,0,0,172,208,221,0,135,205,144,0,207,0,0,0,2,207,0,0,40,156,79,0,82,205,207,0,143,205,73,8,141,205,145,9,3,205,205,202,1,207,0,0,109,205,4,207,141,207,145,9,3,207,207,202,25,207,207,4,1,205,0,0,109,207,4,205,141,205,145,9,3,205,205,202,1,207,3,0,107,205,11,207,141,207,145,9,2,205,0,0,238,25,21,0,78,205,205,0,95,207,202,205,141,205,145,9,3,205,205,202,2,207,0,0,238,25,21,0,102,207,207,1,107,205,1,207,141,207,145,9,3,207,207,202,2,205,0,0,238,25,21,0,102,205,205,2,107,207,2,205,141,205,145,9,3,205,205,202,1,207,0,0,107,205,3,207,141,205,73,8,141,204,145,9,3,204,204,202,135,207,25,0,205,204,0,0,143,207,75,8,141,204,145,9,3,204,204,202,102,207,204,11,143,207,76,8,141,207,76,8,41,207,207,24,42,207,207,24,34,207,207,0,121,207,7,0,141,204,145,9,94,207,204,202,143,207,77,8,141,204,77,8,135,207,21,0,204,0,0,0,141,207,75,8,1,204,0,0,45,207,207,204,36,178,1,0,2,204,0,0,147,164,21,0,2,205,0,0,242,25,21,0,1,208,125,33,2,210,0,0,236,63,21,0,135,207,38,0,204,205,208,210,141,207,145,9,1,210,0,0,97,207,202,210,141,210,145,9,3,210,210,202,1,207,0,0,109,210,4,207,141,207,145,9,3,207,207,202,1,210,0,0,109,207,8,210,141,210,145,9,3,210,210,202,1,207,8,0,107,210,11,207,141,207,145,9,2,210,0,0,115,104,111,119,97,207,202,210,141,210,145,9,3,210,210,202,2,207,0,0,109,101,110,117,109,210,4,207,141,207,145,9,3,207,207,202,1,210,0,0,107,207,8,210,141,207,75,8,141,208,145,9,3,208,208,202,135,210,27,0,207,208,0,0,141,208,145,9,3,208,208,202,102,210,208,11,143,210,78,8,141,210,78,8,41,210,210,24,42,210,210,24,34,210,210,0,121,210,7,0,141,208,145,9,94,210,208,202,143,210,79,8,141,208,79,8,135,210,21,0,208,0,0,0,135,210,145,0,141,210,145,9,1,208,21,0,97,210,202,208,141,208,145,9,3,208,208,202,1,210,0,0,109,208,4,210,141,208,145,9,3,208,208,202,2,207,0,0,241,63,21,0,141,205,145,9,1,204,208,3,3,205,205,204,135,210,18,0,208,207,205,0,2,205,0,0,2,18,71,0,78,210,205,0,143,210,80,8,141,210,80,8,41,210,210,24,42,210,210,24,32,210,210,0,120,210,4,0,1,205,0,0,135,210,58,0,205,0,0,0,2,210,0,0,1,18,71,0,1,205,0,0,83,210,205,0,2,210,0,0,48,18,71,0,82,205,210,0,143,205,82,8,141,205,82,8,1,210,0,0,52,205,205,210,160,179,1,0,141,210,82,8,1,207,255,7,19,210,210,207,1,207,1,0,135,205,146,0,210,207,0,0,2,210,0,0,162,18,71,0,78,205,210,0,143,205,83,8,141,205,83,8,41,205,205,24,42,205,205,24,32,205,205,0,120,205,4,0,1,210,0,0,135,205,52,0,210,0,0,0,2,210,0,0,76,18,71,0,78,205,210,0,143,205,84,8,141,205,84,8,41,205,205,24,42,205,205,24,32,205,205,0,120,205,2,0,135,205,71,0,135,205,147,0,135,205,148,0,1,2,0,0,1,205,1,0,143,205,44,1,119,0,117,1,141,205,144,9,1,210,17,3,45,205,205,210,56,180,1,0,141,210,145,9,1,207,176,0,3,210,210,207,135,205,42,0,210,0,0,0,119,0,27,0,141,205,144,9,1,210,23,3,45,205,205,210,88,180,1,0,141,210,145,9,25,210,210,112,135,205,42,0,210,0,0,0,119,0,18,0,141,205,144,9,1,210,240,1,45,205,205,210,132,180,1,0,141,210,145,9,1,207,144,2,3,210,210,207,135,205,42,0,210,0,0,0,119,0,8,0,141,205,144,9,1,210,246,1,45,205,205,210,160,180,1,0,141,210,145,9,135,205,42,0,210,0,0,0,2,210,0,0,180,53,21,0,2,207,0,0,238,116,22,0,135,205,7,0,210,207,0,0,143,205,130,9,141,205,130,9,1,207,0,0,52,205,205,207,8,181,1,0,141,207,130,9,135,205,8,0,207,0,0,0,141,205,145,9,1,207,48,2,2,210,0,0,91,54,21,0,97,205,207,210,2,207,0,0,192,53,21,0,141,205,145,9,1,208,48,2,3,205,205,208,135,210,24,0,207,205,0,0,141,210,145,9,1,205,52,4,1,207,0,0,97,210,205,207,141,207,145,9,1,205,52,4,3,207,207,205,1,205,0,0,109,207,4,205,141,205,145,9,1,207,52,4,3,205,205,207,1,207,0,0,109,205,8,207,1,205,32,0,135,207,26,0,205,0,0,0,143,207,177,1,141,205,177,1,0,207,205,0,143,207,143,9,2,207,0,0,33,36,21,0,143,207,146,9,141,205,143,9,25,207,205,22,143,207,147,9,141,207,143,9,141,205,146,9,78,205,205,0,83,207,205,0,141,207,143,9,25,205,207,1,143,205,143,9,141,207,146,9,25,205,207,1,143,205,146,9,141,205,143,9,141,207,147,9,54,205,205,207,116,181,1,0,141,205,177,1,1,207,0,0,107,205,22,207,141,205,145,9,1,210,52,4,3,205,205,210,135,207,17,0,205,0,0,0,141,205,145,9,1,210,52,4,3,205,205,210,141,210,177,1,1,208,22,0,135,207,6,0,205,210,208,0,141,208,145,9,1,210,52,4,3,208,208,210,102,207,208,11,143,207,202,1,141,208,145,9,1,210,52,4,94,207,208,210,143,207,211,1,141,210,202,1,41,210,210,24,42,210,210,24,34,210,210,0,121,210,4,0,141,210,211,1,0,208,210,0,119,0,5,0,141,210,145,9,1,205,52,4,3,210,210,205,0,208,210,0,0,207,208,0,143,207,217,1,141,208,217,1,2,210,0,0,238,116,22,0,135,207,7,0,208,210,0,0,143,207,223,1,141,207,223,1,1,210,0,0,45,207,207,210,124,182,1,0,1,210,0,0,135,207,10,0,210,0,0,0,119,0,33,0,141,210,223,1,135,207,8,0,210,0,0,0,141,210,145,9,1,208,52,4,3,210,210,208,102,207,210,11,143,207,237,1,141,210,145,9,1,208,52,4,94,207,210,208,143,207,252,1,141,208,237,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,252,1,0,210,208,0,119,0,5,0,141,208,145,9,1,205,52,4,3,208,208,205,0,210,208,0,0,207,210,0,143,207,4,2,141,210,4,2,135,207,149,0,210,0,0,0,1,210,0,0,135,207,10,0,210,0,0,0,2,210,0,0,180,53,21,0,2,208,0,0,238,116,22,0,135,207,7,0,210,208,0,0,143,207,194,6,141,207,194,6,1,208,0,0,52,207,207,208,100,183,1,0,141,208,194,6,135,207,8,0,208,0,0,0,141,207,145,9,1,208,32,2,2,210,0,0,204,53,21,0,97,207,208,210,2,208,0,0,192,53,21,0,141,207,145,9,1,205,32,2,3,207,207,205,135,210,24,0,208,207,0,0,141,210,145,9,1,207,52,4,1,208,0,0,97,210,207,208,141,208,145,9,1,207,52,4,3,208,208,207,1,207,0,0,109,208,4,207,141,207,145,9,1,208,52,4,3,207,207,208,1,208,0,0,109,207,8,208,141,208,145,9,1,207,40,4,1,210,0,0,97,208,207,210,141,210,145,9,1,207,40,4,3,210,210,207,1,207,0,0,109,210,4,207,141,207,145,9,1,210,40,4,3,207,207,210,1,210,0,0,109,207,8,210,141,207,145,9,1,208,52,4,3,207,207,208,135,210,17,0,207,0,0,0,141,207,145,9,1,208,40,4,3,207,207,208,135,210,5,0,207,0,0,0,141,207,145,9], eb + 102400);
  HEAPU8.set([1,208,40,4,3,207,207,208,102,210,207,11,143,210,75,7,141,207,145,9,1,208,40,4,94,210,207,208,143,210,164,7,141,207,145,9,1,208,40,4,3,207,207,208,106,210,207,4,143,210,240,7,141,208,75,7,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,164,7,0,207,208,0,119,0,5,0,141,208,145,9,1,205,40,4,3,208,208,205,0,207,208,0,0,210,207,0,143,210,59,8,141,208,75,7,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,240,7,0,207,208,0,119,0,4,0,141,208,75,7,19,208,208,200,0,207,208,0,0,210,207,0,143,210,103,8,141,207,145,9,1,208,52,4,3,207,207,208,141,208,59,8,141,205,103,8,135,210,6,0,207,208,205,0,141,205,145,9,1,208,52,4,3,205,205,208,102,210,205,11,143,210,130,8,141,205,145,9,1,208,52,4,94,210,205,208,143,210,140,8,141,208,130,8,41,208,208,24,42,208,208,24,34,208,208,0,121,208,4,0,141,208,140,8,0,205,208,0,119,0,5,0,141,208,145,9,1,207,52,4,3,208,208,207,0,205,208,0,0,210,205,0,143,210,143,8,141,205,143,8,2,208,0,0,238,116,22,0,135,210,7,0,205,208,0,0,143,210,149,8,141,210,149,8,1,208,0,0,45,210,210,208,80,185,1,0,1,208,0,0,135,210,10,0,208,0,0,0,119,0,37,0,141,208,149,8,135,210,8,0,208,0,0,0,141,208,145,9,1,205,52,4,3,208,208,205,102,210,208,11,143,210,156,8,141,208,145,9,1,205,52,4,94,210,208,205,143,210,168,8,141,205,156,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,4,0,141,205,168,8,0,208,205,0,119,0,5,0,141,205,145,9,1,207,52,4,3,205,205,207,0,208,205,0,0,210,208,0,143,210,174,8,141,208,174,8,135,210,149,0,208,0,0,0,1,208,0,0,135,210,10,0,208,0,0,0,119,0,4,0,1,2,1,0,1,210,0,0,143,210,44,1,141,208,145,9,1,205,224,3,3,208,208,205,102,210,208,11,143,210,85,8,141,210,85,8,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,208,145,9,1,205,224,3,94,210,208,205,143,210,86,8,141,208,86,8,135,210,21,0,208,0,0,0,141,208,145,9,1,205,236,3,3,208,208,205,102,210,208,11,143,210,87,8,141,210,87,8,41,210,210,24,42,210,210,24,34,210,210,0,121,210,8,0,141,208,145,9,1,205,236,3,94,210,208,205,143,210,88,8,141,208,88,8,135,210,21,0,208,0,0,0,141,210,44,1,121,210,154,0,135,210,150,0,135,210,151,0,135,210,152,0,135,210,153,0,135,210,154,0,135,210,155,0,135,210,156,0,135,210,157,0,135,210,158,0,135,210,159,0,1,208,0,0,135,210,160,0,208,0,0,0,1,208,1,0,135,210,50,0,208,0,0,0,2,208,0,0,152,104,17,0,82,210,208,0,143,210,89,8,141,210,89,8,32,210,210,0,120,210,118,0,2,208,0,0,148,104,17,0,82,210,208,0,143,210,90,8,141,210,145,9,1,208,64,4,1,205,21,0,97,210,208,205,141,205,145,9,1,208,64,4,3,205,205,208,1,208,0,0,109,205,4,208,141,205,90,8,106,208,205,8,143,208,92,8,141,205,90,8,25,205,205,16,102,208,205,11,143,208,93,8,141,208,93,8,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,205,90,8,106,208,205,16,143,208,94,8,141,205,94,8,0,208,205,0,143,208,95,8,119,0,4,0,141,205,90,8,25,208,205,16,143,208,95,8,141,208,145,9,1,205,216,3,141,210,92,8,97,208,205,210,141,210,145,9,1,205,216,3,3,210,210,205,141,205,95,8,109,210,4,205,141,210,145,9,1,208,64,4,3,210,210,208,2,208,0,0,12,64,21,0,141,207,145,9,1,204,216,3,3,207,207,204,135,205,18,0,210,208,207,0,141,207,90,8,106,205,207,8,143,205,96,8,141,207,96,8,1,208,255,7,19,207,207,208,1,208,0,0,135,205,146,0,207,208,0,0,2,207,0,0,148,104,17,0,82,205,207,0,143,205,97,8,141,207,97,8,106,205,207,4,143,205,98,8,141,207,97,8,82,205,207,0,143,205,99,8,141,205,99,8,141,207,98,8,109,205,4,207,141,205,97,8,106,207,205,4,143,207,100,8,141,207,100,8,141,205,99,8,85,207,205,0,2,207,0,0,152,104,17,0,82,205,207,0,143,205,101,8,2,205,0,0,152,104,17,0,141,207,101,8,26,207,207,1,85,205,207,0,141,205,97,8,25,205,205,16,102,207,205,11,143,207,102,8,141,207,102,8,41,207,207,24,42,207,207,24,34,207,207,0,121,207,7,0,141,205,97,8,106,207,205,16,143,207,104,8,141,205,104,8,135,207,21,0,205,0,0,0,141,205,97,8,135,207,21,0,205,0,0,0,2,205,0,0,152,104,17,0,82,207,205,0,143,207,105,8,141,207,105,8,32,207,207,0,121,207,141,255,119,0,1,0,135,207,161,0,135,207,162,0,2,205,0,0,172,208,221,0,135,207,163,0,205,0,0,0,2,205,0,0,172,208,221,0,135,207,164,0,205,0,0,0,1,207,0,0,143,207,49,1,119,0,3,0,0,207,2,0,143,207,49,1,141,205,145,9,1,208,112,1,3,205,205,208,135,207,165,0,205,0,0,0,141,205,145,9,1,208,248,3,3,205,205,208,25,205,205,32,102,207,205,11,143,207,106,8,141,207,106,8,41,207,207,24,42,207,207,24,34,207,207,0,121,207,9,0,141,205,145,9,1,208,248,3,3,205,205,208,106,207,205,32,143,207,107,8,141,205,107,8,135,207,21,0,205,0,0,0,141,205,145,9,1,208,248,3,3,205,205,208,106,207,205,28,143,207,109,8,141,207,109,8,32,207,207,0,120,207,73,0,141,205,145,9,1,208,248,3,3,205,205,208,106,207,205,24,143,207,110,8,141,205,145,9,1,208,248,3,3,205,205,208,106,207,205,20,143,207,111,8,141,205,111,8,106,207,205,4,143,207,112,8,141,205,110,8,82,207,205,0,143,207,113,8,141,207,113,8,141,205,112,8,109,207,4,205,141,207,111,8,106,205,207,4,143,205,114,8,141,205,114,8,141,207,113,8,85,205,207,0,141,207,145,9,1,205,248,3,3,207,207,205,1,205,0,0,109,207,28,205,141,205,110,8,141,207,145,9,1,208,248,3,3,207,207,208,25,207,207,20,52,205,205,207,124,190,1,0,141,205,110,8,0,171,205,0,25,205,171,4,143,205,115,8,141,207,115,8,82,205,207,0,143,205,116,8,25,205,171,8,143,205,117,8,141,207,117,8,102,205,207,11,143,205,118,8,141,205,118,8,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,117,8,82,205,207,0,143,205,119,8,141,207,119,8,135,205,21,0,207,0,0,0,135,205,21,0,171,0,0,0,141,205,116,8,141,207,145,9,1,208,248,3,3,207,207,208,25,207,207,20,52,205,205,207,124,190,1,0,141,205,116,8,0,171,205,0,119,0,224,255,141,207,145,9,1,208,248,3,3,207,207,208,102,205,207,11,143,205,121,8,141,205,121,8,41,205,205,24,42,205,205,24,34,205,205,0,120,205,5,0,141,205,145,9,137,205,0,0,141,205,49,1,139,205,0,0,141,207,145,9,1,208,248,3,94,205,207,208,143,205,122,8,141,207,122,8,135,205,21,0,207,0,0,0,141,205,145,9,137,205,0,0,141,205,49,1,139,205,0,0,140,0,20,3,0,0,0,0,2,200,0,0,32,6,0,0,2,201,0,0,88,9,0,0,2,202,0,0,127,223,53,2,1,203,0,0,143,203,16,3,136,204,0,0,0,203,204,0,143,203,17,3,136,203,0,0,1,204,96,9,3,203,203,204,137,203,0,0,2,204,0,0,201,129,237,0,78,203,204,0,143,203,44,2,141,203,44,2,41,203,203,24,42,203,203,24,1,204,80,0,1,205,21,0,138,203,204,205,16,193,1,0,40,193,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,160,191,1,0,44,193,1,0,160,191,1,0,48,193,1,0,141,204,44,2,1,205,255,0,19,204,204,205,34,204,204,108,121,204,82,0,2,205,0,0,99,25,21,0,78,204,205,0,143,204,47,2,141,204,47,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,19,0,2,205,0,0,50,168,18,0,80,204,205,0,143,204,53,2,1,205,0,0,25,205,205,16,141,206,53,2,2,207,0,0,255,255,0,0,19,206,206,207,41,206,206,4,3,205,205,206,135,204,166,0,205,0,0,0,143,204,69,2,141,204,69,2,0,0,204,0,119,0,9,0,2,205,0,0,198,187,19,0,141,206,17,3,1,207,80,6,3,206,206,207,135,204,24,0,205,206,0,0,1,0,0,0,2,206,0,0,255,255,0,0,19,206,0,206,0,204,206,0,143,204,72,2,2,206,0,0,156,130,237,0,82,204,206,0,143,204,77,2,2,206,0,0,216,129,237,0,80,204,206,0,143,204,82,2,141,206,72,2,41,206,206,4,25,206,206,46,141,205,77,2,41,205,205,16,141,207,82,2,26,207,207,18,41,207,207,16,42,207,207,16,2,208,0,0,255,255,0,0,19,207,207,208,20,205,205,207,135,204,167,0,206,205,0,0,2,204,0,0,201,129,237,0,78,19,204,0,26,204,19,1,41,204,204,24,42,204,204,24,1,205,255,0,19,204,204,205,34,204,204,12,121,204,4,0,1,204,9,0,143,204,16,3,119,0,21,0,0,204,19,0,143,204,103,2,1,204,7,0,143,204,16,3,119,0,16,0,141,205,44,2,0,204,205,0,143,204,103,2,1,204,7,0,143,204,16,3,119,0,10,0,141,205,44,2,0,204,205,0,143,204,103,2,1,204,7,0,143,204,16,3,119,0,4,0,119,0,250,255,119,0,249,255,119,0,248,255,141,203,16,3,32,203,203,7,121,203,106,0,141,203,103,2,41,203,203,24,42,203,203,24,1,204,0,0,1,205,77,0,138,203,204,205,144,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,160,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,140,194,1,0,164,194,1,0,119,0,7,0,141,205,103,2,0,204,205,0,143,204,114,2,119,0,18,0,119,0,252,255,119,0,251,255,2,204,0,0,148,156,79,0,78,203,204,0,143,203,106,2,141,203,106,2,41,203,203,24,42,203,203,24,32,203,203,0,121,203,5,0,141,204,103,2,0,203,204,0,143,203,114,2,119,0,3,0,1,203,9,0,143,203,16,3,141,203,16,3,32,203,203,9,121,203,15,0,135,203,168,0,143,203,110,2,141,203,110,2,121,203,7,0,2,203,0,0,201,129,237,0,78,21,203,0,0,203,21,0,143,203,114,2,119,0,5,0,141,203,17,3,137,203,0,0,1,203,0,0,139,203,0,0,141,203,114,2,41,203,203,24,42,203,203,24,1,209,0,0,1,210,114,0,138,203,209,210,212,197,1,0,168,199,1,0,88,200,1,0,184,200,1,0,88,201,1,0,8,202,1,0,152,202,1,0,160,203,1,0,220,203,1,0,76,204,1,0,24,205,1,0,252,208,1,0,92,209,1,0,184,211,1,0,188,211,1,0,236,211,1,0,188,212,1,0,140,213,1,0,92,214,1,0,44,215,1,0,252,215,1,0,184,216,1,0,116,217,1,0,68,218,1,0,8,197,1,0,180,218,1,0,208,218,1,0,140,219,1,0,208,219,1,0,8,197,1,0,8,197,1,0,36,220,1,0,8,197,1,0,164,221,1,0,116,222,1,0,68,223,1,0,180,223,1,0,244,223,1,0,92,224,1,0,72,225,1,0,12,226,1,0,208,226,1,0,72,228,1,0,228,239,1,0,24,246,1,0,84,0,2,0,220,5,2,0,16,6,2,0,112,7,2,0,116,8,2,0,44,10,2,0,48,10,2,0,32,13,2,0,144,13,2,0,60,14,2,0,68,15,2,0,64,16,2,0,72,17,2,0,8,18,2,0,92,19,2,0,28,20,2,0,156,22,2,0,192,24,2,0,52,26,2,0,144,29,2,0,24,33,2,0,204,34,2,0,200,36,2,0,120,39,2,0,184,39,2,0,16,40,2,0,132,40,2,0,76,41,2,0,0,42,2,0,116,42,2,0,84,43,2,0,224,44,2,0,252,45,2,0,64,46,2,0,24,47,2,0,120,47,2,0,12,48,2,0,168,48,2,0,84,49,2,0,132,49,2,0,168,49,2,0,124,50,2,0,136,51,2,0,232,52,2,0,168,54,2,0,36,55,2,0,100,56,2,0,192,57,2,0,220,58,2,0,8,197,1,0,220,59,2,0,252,59,2,0,8,197,1,0,36,61,2,0,192,61,2,0,124,62,2,0,204,62,2,0,200,69,2,0,200,70,2,0,184,71,2,0,40,72,2,0,8,197,1,0,8,197,1,0,168,73,2,0,8,197,1,0,8,197,1,0,8,197,1,0,8,197,1,0,168,74,2,0,141,206,114,2,1,210,255,0,19,206,206,210,34,204,206,109,143,204,181,1,141,204,181,1,121,204,40,0,141,204,17,3,1,206,48,8,1,210,14,0,97,204,206,210,141,210,17,3,1,206,48,8,3,210,210,206,1,206,3,0,109,210,4,206,141,210,114,2,1,204,255,0,19,210,210,204,0,206,210,0,143,206,182,1,2,210,0,0,200,129,237,0,78,206,210,0,143,206,183,1,141,206,17,3,1,210,40,8,141,204,182,1,97,206,210,204,141,204,17,3,1,210,40,8,3,204,204,210,141,210,183,1,1,206,255,0,19,210,210,206,109,204,4,210,141,204,17,3,1,206,48,8,3,204,204,206,2,206,0,0,87,210,19,0,141,209,17,3,1,205,40,8,3,209,209,205,135,210,18,0,204,206,209,0,2,210,0,0,200,129,237,0,1,209,0,0,83,210,209,0,119,0,91,33,2,205,0,0,216,129,237,0,80,204,205,0,143,204,116,2,2,204,0,0,250,255,0,0,141,205,116,2,2,206,0,0,255,255,0,0,19,205,205,206,47,204,204,205,236,198,1,0,141,204,17,3,1,205,80,9,1,206,14,0,97,204,205,206,141,206,17,3,1,205,80,9,3,206,206,205,1,205,2,0,109,206,4,205,141,206,17,3,1,204,80,9,3,206,206,204,2,204,0,0,100,203,19,0,141,207,17,3,1,208,88,6,3,207,207,208,135,205,18,0,206,204,207,0,135,205,169,0,135,205,169,0,143,205,123,2,135,205,169,0,141,205,17,3,1,207,72,9,1,204,14,0,97,205,207,204,141,204,17,3,1,207,72,9,3,204,204,207,1,207,0,0,109,204,4,207,141,207,17,3,1,204,96,6,141,205,123,2,2,206,0,0,255,255,0,0,19,205,205,206,97,207,204,205,141,204,17,3,1,207,72,9,3,204,204,207,2,207,0,0,194,203,19,0,141,206,17,3,1,208,96,6,3,206,206,208,135,205,18,0,204,207,206,0,141,206,123,2,2,207,0,0,255,255,0,0,19,206,206,207,1,207,0,0,1,204,0,0,135,205,170,0,206,207,204,0,119,0,20,0,2,204,0,0,188,130,237,0,82,205,204,0,143,205,135,2,141,204,116,2,2,207,0,0,255,255,0,0,19,204,204,207,25,204,204,2,141,207,135,2,3,204,204,207,135,205,166,0,204,0,0,0,143,205,149,2,141,204,149,2,1,207,0,0,1,206,0,0,135,205,170,0,204,207,206,0,2,206,0,0,128,223,53,2,78,205,206,0,143,205,152,2,141,205,152,2,41,205,205,24,42,205,205,24,32,205,205,0,121,205,6,0,2,205,0,0,129,223,53,2,1,206,0,0,83,205,206,0,119,0,244,32,1,205,4,0,135,206,171,0,205,0,0,0,143,206,165,2,141,206,165,2,1,205,0,0,85,206,205,0,141,206,165,2,2,207,0,0,144,89,17,0,1,204,0,0,135,205,172,0,206,207,204,0,119,0,230,32,141,205,17,3,1,204,1,0,84,205,204,0,2,204,0,0,149,156,79,0,1,205,1,0,83,204,205,0,1,204,0,0,141,207,17,3,3,207,207,200,141,206,17,3,135,205,173,0,204,207,206,0,141,206,17,3,90,205,206,200,143,205,170,2,141,205,170,2,41,205,205,24,42,205,205,24,32,205,205,3,121,205,12,0,1,205,1,0,83,202,205,0,135,205,168,0,143,205,181,2,141,205,181,2,121,205,203,32,141,205,17,3,90,30,205,200,0,205,30,0,143,205,187,2,119,0,4,0,141,206,170,2,0,205,206,0,143,205,187,2,2,205,0,0,200,129,237,0,141,206,187,2,83,205,206,0,2,206,0,0,149,156,79,0,1,205,0,0,83,206,205,0,119,0,186,32,2,206,0,0,208,129,237,0,78,205,206,0,143,205,194,2,141,205,17,3,141,206,194,2,95,205,200,206,141,206,17,3,1,205,1,0,84,206,205,0,1,206,1,0,141,207,17,3,3,207,207,200,141,204,17,3,135,205,174,0,206,207,204,0,141,204,17,3,90,205,204,200,143,205,199,2,2,205,0,0,200,129,237,0,141,204,199,2,83,205,204,0,119,0,162,32,1,205,0,4,135,204,166,0,205,0,0,0,143,204,203,2,2,205,0,0,96,37,28,0,82,204,205,0,143,204,223,2,141,204,203,2,41,204,204,16,42,204,204,16,32,204,204,0,141,205,223,2,1,207,0,0,13,205,205,207,20,204,204,205,120,204,145,32,141,205,203,2,2,207,0,0,255,255,0,0,19,205,205,207,25,205,205,4,1,207,3,0,135,204,175,0,205,207,0,0,2,207,0,0,96,37,28,0,82,204,207,0,143,204,241,2,141,207,241,2,2,205,0,0,200,129,237,0,141,206,17,3,3,206,206,200,1,208,1,0,1,209,255,255,135,204,176,0,207,205,206,208,209,0,0,0,119,0,122,32,1,209,0,4,135,204,166,0,209,0,0,0,143,204,246,2,2,204,0,0,96,37,28,0,82,31,204,0,141,204,246,2,41,204,204,16,42,204,204,16,32,204,204,0,1,209,0,0,13,209,31,209,20,204,204,209,120,204,107,32,141,209,246,2,2,208,0,0,255,255,0,0,19,209,209,208,25,209,209,4,1,208,3,0,135,204,175,0,209,208,0,0,2,204,0,0,96,37,28,0,82,48,204,0,2,204,0,0,208,129,237,0,78,54,204,0,1,208,1,0,1,209,1,0,1,206,255,255,135,204,177,0,48,54,208,209,206,0,0,0,141,206,246,2,2,209,0,0,255,255,0,0,19,206,206,209,25,206,206,4,1,209,1,0,135,204,175,0,206,209,0,0,119,0,78,32,2,204,0,0,20,195,79,0,82,60,204,0,1,204,0,0,45,204,60,204,108,202,1,0,2,204,0,0,24,195,79,0,82,68,204,0,1,204,0,0,45,204,68,204,100,202,1,0,2,209,0,0,28,195,79,0,82,204,209,0,143,204,184,1,141,204,184,1,1,209,0,0,52,204,204,209,60,75,2,0,141,204,184,1,0,18,204,0,119,0,4,0,0,18,68,0,119,0,2,0,0,18,60,0,82,78,18,0,106,90,78,36,2,204,0,0,208,129,237,0,78,96,204,0,1,209,255,1,19,209,90,209,135,204,178,0,209,18,96,0,119,0,42,32,2,204,0,0,208,129,237,0,78,98,204,0,41,204,98,24,42,204,204,24,32,204,204,255,120,204,19,0,141,204,17,3,95,204,200,98,141,204,17,3,1,209,1,0,84,204,209,0,1,204,1,0,141,206,17,3,3,206,206,200,141,208,17,3,135,209,174,0,204,206,208,0,2,209,0,0,208,129,237,0,78,139,209,0,2,209,0,0,200,129,237,0,83,209,139,0,119,0,17,32,2,209,0,0,232,129,237,0,80,106,209,0,2,209,0,0,232,129,237,0,2,208,0,0,255,255,0,0,19,208,106,208,25,208,208,2,2,206,0,0,255,255,0,0,19,208,208,206,84,209,208,0,135,128,179,0,121,128,19,0,141,208,17,3,1,209,1,0,84,208,209,0,1,208,0,0,141,206,17,3,3,206,206,200,141,204,17,3,135,209,173,0,208,206,204,0,141,209,17,3,90,133,209,200,2,209,0,0,200,129,237,0,83,209,133,0,1,204,0,0,135,209,180,0,204,0,0,0,119,0,240,31,2,209,0,0,200,129,237,0,1,204,0,0,83,209,204,0,1,209,1,0,135,204,180,0,209,0,0,0,119,0,232,31,141,204,17,3,1,209,1,0,84,204,209,0,1,204,0,0,141,206,17,3,3,206,206,200,141,208,17,3,135,209,173,0,204,206,208,0,141,209,17,3,90,145,209,200,2,209,0,0,200,129,237,0,83,209,145,0,119,0,217,31,141,209,17,3,1,208,1,0,84,209,208,0,1,209,0,0,141,206,17,3,3,206,206,200,141,204,17,3,135,208,173,0,209,206,204,0,141,208,17,3,90,151,208,200,41,208,151,24,42,208,208,24,32,208,208,3,121,208,9,0,1,208,1,0,83,202,208,0,135,162,168,0,121,162,198,31,141,208,17,3,90,29,208,200,0,167,29,0,119,0,2,0,0,167,151,0,2,208,0,0,200,129,237,0,83,208,167,0,119,0,189,31,141,208,17,3,1,204,1,0,84,208,204,0,2,204,0,0,192,130,237,0,82,173,204,0,2,204,0,0,208,129,237,0,80,181,204,0,2,208,0,0,255,255,0,0,19,208,181,208,3,208,173,208,135,204,181,0,208,0,0,0,143,204,7,1,141,204,17,3,141,208,7,1,95,204,200,208,141,208,7,1,41,208,208,24,42,208,208,24,32,208,208,36,120,208,165,31,2,208,0,0,255,255,0,0,19,208,181,208,3,13,173,208,25,208,13,1,143,208,21,1,1,204,1,0,141,206,17,3,3,206,206,200,141,209,17,3,135,208,174,0,204,206,209,0,141,209,21,1,135,208,181,0,209,0,0,0,143,208,27,1,141,208,17,3,141,209,27,1,95,208,200,209,141,209,27,1,41,209,209,24,42,209,209,24,32,209,209,36,120,209,141,31,141,209,21,1,0,13,209,0,119,0,234,255,2,208,0,0,192,130,237,0,82,209,208,0,143,209,42,1,2,208,0,0,208,129,237,0,80,209,208,0,143,209,46,1,141,208,42,1,141,206,46,1,2,204,0,0,255,255,0,0,19,206,206,204,3,208,208,206,135,209,181,0,208,0,0,0,143,209,60,1,141,209,17,3,1,208,1,0,84,209,208,0,141,208,60,1,41,208,208,24,42,208,208,24,32,208,208,0,120,208,113,31,135,208,168,0,143,208,81,1,141,208,81,1,121,208,109,31,1,15,0,0,41,209,15,24,42,209,209,24,141,206,60,1,26,206,206,1,41,206,206,24,42,206,206,24,41,206,206,24,42,206,206,24,13,208,209,206,143,208,96,1,141,208,96,1,121,208,65,0,1,206,0,0,141,209,17,3,3,209,209,200,141,204,17,3,135,208,173,0,206,209,204,0,141,204,17,3,90,208,204,200,143,208,114,1,141,208,114,1,41,208,208,24,42,208,208,24,1,204,3,0,1,209,6,0,138,208,204,209,36,206,1,0,20,206,1,0,20,206,1,0,20,206,1,0,20,206,1,0,84,206,1,0,141,209,114,1,0,204,209,0,143,204,138,1,119,0,16,0,1,204,1,0,83,202,204,0,135,204,168,0,143,204,133,1,141,204,133,1,120,204,2,0,119,0,64,31,141,204,17,3,90,28,204,200,0,204,28,0,143,204,138,1,119,0,4,0,1,204,54,0,143,204,16,3,119,0,62,0,141,204,138,1,41,204,204,24,42,204,204,24,32,208,204,13,143,208,145,1,141,208,145,1,121,208,4,0,1,208,61,0,143,208,16,3,119,0,52,0,141,208,17,3,1,204,7,0,95,208,201,204,1,208,1,0,141,209,17,3,3,209,209,201,141,206,17,3,135,204,174,0,208,209,206,0,135,204,168,0,143,204,150,1,141,204,150,1,120,204,194,255,119,0,32,31,1,206,0,0,141,209,17,3,3,209,209,200,141,208,17,3,135,204,173,0,206,209,208,0,141,208,17,3,90,204,208,200,143,204,100,1,141,204,100,1,41,204,204,24,42,204,204,24,1,208,3,0,1,209,6,0,138,204,208,209,32,207,1,0,20,207,1,0,20,207,1,0,20,207,1,0,20,207,1,0,36,207,1,0,1,208,61,0,143,208,16,3,119,0,14,0,119,0,4,0,1,208,54,0,143,208,16,3,119,0,10,0,1,204,1,0,83,202,204,0,135,204,168,0,143,204,108,1,141,204,108,1,121,204,254,30,1,204,61,0,143,204,16,3,119,0,1,0,141,204,16,3,32,204,204,54,121,204,43,0,1,204,0,0,143,204,16,3,41,208,15,24,42,208,208,24,32,204,208,0,143,204,119,1,141,204,119,1,121,204,3,0,1,14,0,0,119,0,78,0,1,208,1,0,141,209,17,3,3,209,209,200,141,206,17,3,135,204,174,0,208,209,206,0,141,204,17,3,1,206,32,0,95,204,200,206,1,204,1,0,141,209,17,3,3,209,209,200,141,208,17,3,135,206,174,0,204,209,208,0,141,206,17,3,1,208,8,0,95,206,200,208,1,206,1,0,141,209,17,3,3,209,209,200,141,204,17,3,135,208,174,0,206,209,204,0,26,204,15,1,41,204,204,24,42,204,204,24,0,208,204,0,143,208,123,1,141,208,123,1,0,14,208,0,119,0,46,0,141,208,16,3,32,208,208,61,121,208,43,0,1,208,0,0,143,208,16,3,1,204,255,0,19,204,15,204,0,208,204,0,143,208,157,1,1,204,1,0,141,209,17,3,3,209,209,200,141,206,17,3,135,208,174,0,204,209,206,0,141,206,17,3,90,208,206,200,143,208,166,1,141,206,42,1,141,209,46,1,2,204,0,0,255,255,0,0,19,209,209,204,3,206,206,209,25,206,206,2,141,209,157,1,3,206,206,209,141,209,166,1,135,208,182,0,206,209,0,0,141,209,17,3,90,208,209,200,143,208,174,1,141,208,174,1,41,208,208,24,42,208,208,24,32,208,208,13,120,208,14,0,25,209,15,1,41,209,209,24,42,209,209,24,0,208,209,0,143,208,185,1,141,208,185,1,0,14,208,0,135,208,168,0,143,208,129,1,141,208,129,1,121,208,157,30,0,15,14,0,119,0,48,255,141,209,42,1,141,206,46,1,2,204,0,0,255,255,0,0,19,206,206,204,3,209,209,206,25,209,209,1,135,208,182,0,209,15,0,0,119,0,145,30,135,208,179,0,143,208,186,1,2,208,0,0,200,129,237,0,141,209,186,1,41,209,209,31,42,209,209,31,83,208,209,0,2,208,0,0,232,129,237,0,80,209,208,0,143,209,187,1,2,209,0,0,232,129,237,0,141,208,187,1,2,206,0,0,255,255,0,0,19,208,208,206,25,208,208,2,2,206,0,0,255,255,0,0,19,208,208,206,84,209,208,0,119,0,121,30,2,209,0,0,99,25,21,0,78,208,209,0,143,208,188,1,141,208,188,1,41,208,208,24,42,208,208,24,32,208,208,0,121,208,19,0,2,209,0,0,50,168,18,0,80,208,209,0,143,208,189,1,1,209,0,0,25,209,209,16,141,206,189,1,2,204,0,0,255,255,0,0,19,206,206,204,41,206,206,4,3,209,209,206,135,208,166,0,209,0,0,0,143,208,190,1,141,208,190,1,0,1,208,0,119,0,9,0,2,209,0,0,198,187,19,0,141,206,17,3,1,204,104,6,3,206,206,204,135,208,24,0,209,206,0,0,1,1,0,0,2,206,0,0,255,255,0,0,19,206,1,206,0,208,206,0,143,208,191,1,141,208,17,3,141,206,191,1,41,206,206,4,97,208,200,206,141,206,17,3,3,206,206,200,108,206,4,1,141,208,17,3,3,208,208,200,1,209,0,0,135,206,183,0,208,209,0,0,143,206,192,1,141,206,192,1,41,206,206,24,42,206,206,24,32,206,206,255,120,206,51,0,2,209,0,0,232,156,79,0,82,206,209,0,143,206,193,1,141,209,193,1,141,208,192,1,1,204,255,0,19,208,208,204,41,208,208,2,94,206,209,208,143,206,194,1,141,206,194,1,1,209,0,0,52,206,206,209,12,211,1,0,141,209,194,1,82,206,209,0,143,206,195,1,141,209,195,1,106,206,209,44,143,206,196,1,141,209,196,1,1,208,255,1,19,209,209,208,141,208,194,1,2,204,0,0,176,137,20,0,135,206,178,0,209,208,204,0,143,206,197,1,141,206,197,1,121,206,19,0,135,206,179,0,143,206,198,1,141,206,198,1,121,206,15,0,141,206,17,3,1,209,1,0,84,206,209,0,1,206,0,0,141,204,17,3,3,204,204,200,141,208,17,3,135,209,173,0,206,204,208,0,135,209,179,0,143,209,199,1,141,209,199,1,120,209,244,255,119,0,1,0,2,208,0,0,200,129,237,0,78,209,208,0,143,209,200,1,141,209,200,1,41,209,209,24,42,209,209,24,1,204,1,0,1,208,10,0,138,209,204,208,112,211,1,0,92,211,1,0,92,211,1,0,92,211,1,0,92,211,1,0,168,211,1,0,172,211,1,0,176,211,1,0,92,211,1,0,180,211,1,0,2,208,0,0,200,129,237,0,1,204,0,0,83,208,204,0,119,0,244,29,2,204,0,0,201,129,237,0,78,208,204,0,143,208,201,1,2,208,0,0,201,129,237,0,141,204,200,1,83,208,204,0,135,204,184,0,2,204,0,0,201,129,237,0,141,208,201,1,83,204,208,0,119,0,230,29,119,0,242,255,119,0,241,255,119,0,240,255,119,0,239,255,119,0,225,29,2,204,0,0,208,129,237,0,78,209,204,0,143,209,202,1,141,204,202,1,135,209,185,0,204,0,0,0,2,209,0,0,200,129,237,0,1,204,26,0,83,209,204,0,119,0,213,29,2,209,0,0,160,130,237,0,82,204,209,0,143,204,203,1,2,209,0,0,208,129,237,0,80,204,209,0,143,204,204,1,141,209,203,1,2,208,0,0,255,255,0,0,19,209,209,208,141,208,204,1,135,204,186,0,209,208,0,0,143,204,205,1,2,204,0,0,200,129,237,0,141,208,205,1,40,208,208,1,41,208,208,31,42,208,208,31,83,204,208,0,141,208,17,3,1,204,64,9,1,209,10,0,97,208,204,209,141,209,17,3,1,204,64,9,3,209,209,204,1,204,1,0,109,209,4,204,141,204,17,3,1,209,112,6,141,208,205,1,40,208,208,1,41,208,208,31,42,208,208,31,1,206,255,0,19,208,208,206,97,204,209,208,141,209,17,3,1,204,64,9,3,209,209,204,2,204,0,0,247,203,19,0,141,206,17,3,1,205,112,6,3,206,206,205,135,208,18,0,209,204,206,0,119,0,161,29,2,206,0,0,160,130,237,0,82,208,206,0,143,208,206,1,2,206,0,0,208,129,237,0,80,208,206,0,143,208,207,1,141,206,206,1,2,204,0,0,255,255,0,0,19,206,206,204,141,204,207,1,135,208,187,0,206,204,0,0,143,208,208,1,2,208,0,0,200,129,237,0,141,204,208,1,40,204,204,1,41,204,204,31,42,204,204,31,83,208,204,0,141,204,17,3,1,208,56,9,1,206,10,0,97,204,208,206,141,206,17,3,1,208,56,9,3,206,206,208,1,208,1,0,109,206,4,208,141,208,17,3,1,206,120,6,141,204,208,1,40,204,204,1,41,204,204,31,42,204,204,31,1,209,255,0,19,204,204,209,97,208,206,204,141,206,17,3,1,208,56,9,3,206,206,208,2,208,0,0,32,204,19,0,141,209,17,3,1,205,120,6,3,209,209,205,135,204,18,0,206,208,209,0,119,0,109,29,2,209,0,0,160,130,237,0,82,204,209,0,143,204,209,1,2,209,0,0,208,129,237,0,80,204,209,0,143,204,210,1,141,209,209,1,2,208,0,0,255,255,0,0,19,209,209,208,141,208,210,1,135,204,188,0,209,208,0,0,143,204,211,1,2,204,0,0,200,129,237,0,141,208,211,1,40,208,208,1,41,208,208,31,42,208,208,31,83,204,208,0,141,208,17,3,1,204,48,9,1,209,10,0,97,208,204,209,141,209,17,3,1,204,48,9,3,209,209,204,1,204,1,0,109,209,4,204,141,204,17,3,1,209,128,6,141,208,211,1,40,208,208,1,41,208,208,31,42,208,208,31,1,206,255,0,19,208,208,206,97,204,209,208,141,209,17,3,1,204,48,9,3,209,209,204,2,204,0,0,74,204,19,0,141,206,17,3,1,205,128,6,3,206,206,205,135,208,18,0,209,204,206,0,119,0,57,29,2,206,0,0,160,130,237,0,82,208,206,0,143,208,212,1,2,206,0,0,208,129,237,0,80,208,206,0,143,208,213,1,141,206,212,1,2,204,0,0,255,255,0,0,19,206,206,204,141,204,213,1,135,208,189,0,206,204,0,0,143,208,214,1,2,208,0,0,200,129,237,0,141,204,214,1,40,204,204,1,41,204,204,31,42,204,204,31,83,208,204,0,141,204,17,3,1,208,40,9,1,206,10,0,97,204,208,206,141,206,17,3,1,208,40,9,3,206,206,208,1,208,1,0,109,206,4,208,141,208,17,3,1,206,136,6,141,204,214,1,40,204,204,1,41,204,204,31,42,204,204,31,1,209,255,0,19,204,204,209,97,208,206,204,141,206,17,3,1,208,40,9,3,206,206,208,2,208,0,0,116,204,19,0,141,209,17,3,1,205,136,6,3,209,209,205,135,204,18,0,206,208,209,0,119,0,5,29,2,209,0,0,160,130,237,0,82,204,209,0,143,204,215,1,2,209,0,0,208,129,237,0,80,204,209,0,143,204,216,1,141,209,215,1,2,208,0,0,255,255,0,0,19,209,209,208,141,208,216,1,135,204,190,0,209,208,0,0,143,204,217,1,2,204,0,0,200,129,237,0,141,208,217,1,40,208,208,1,41,208,208,31,42,208,208,31,83,204,208,0,141,208,17,3,1,204,32,9,1,209,10,0,97,208,204,209,141,209,17,3,1,204,32,9,3,209,209,204,1,204,1,0,109,209,4,204,141,204,17,3,1,209,144,6,141,208,217,1,40,208,208,1,41,208,208,31,42,208,208,31,1,206,255,0,19,208,208,206,97,204,209,208,141,209,17,3,1,204,32,9,3,209,209,204,2,204,0,0,157,204,19,0,141,206,17,3,1,205,144,6,3,206,206,205,135,208,18,0,209,204,206,0,119,0,209,28,2,206,0,0,160,130,237,0,82,208,206,0,143,208,218,1,2,206,0,0,208,129,237,0,80,208,206,0,143,208,219,1,141,206,218,1,2,204,0,0,255,255,0,0,19,206,206,204,141,204,219,1,1,209,0,0,135,208,191,0,206,204,209,0,143,208,220,1,2,208,0,0,200,129,237,0,141,209,220,1,83,208,209,0,141,209,17,3,1,208,24,9,1,204,10,0,97,209,208,204,141,204,17,3,1,208,24,9,3,204,204,208,1,208,1,0,109,204,4,208,141,208,17,3,1,204,152,6,141,209,220,1,1,206,255,0,19,209,209,206,97,208,204,209,141,204,17,3,1,208,24,9,3,204,204,208,2,208,0,0,196,204,19,0,141,206,17,3,1,205,152,6,3,206,206,205,135,209,18,0,204,208,206,0,119,0,162,28,2,206,0,0,160,130,237,0,82,209,206,0,143,209,221,1,2,206,0,0,208,129,237,0,80,209,206,0,143,209,222,1,141,206,221,1,2,208,0,0,255,255,0,0,19,206,206,208,141,208,222,1,1,204,0,0,135,209,192,0,206,208,204,0,143,209,223,1,2,209,0,0,200,129,237,0,141,204,223,1,83,209,204,0,141,204,17,3,1,209,16,9,1,208,10,0,97,204,209,208,141,208,17,3,1,209,16,9,3,208,208,209,1,209,1,0,109,208,4,209,141,209,17,3,1,208,160,6,141,204,223,1,1,206,255,0,19,204,204,206,97,209,208,204,141,208,17,3,1,209,16,9,3,208,208,209,2,209,0,0,233,204,19,0,141,206,17,3,1,205,160,6,3,206,206,205,135,204,18,0,208,209,206,0,119,0,115,28,2,206,0,0,160,130,237,0,82,204,206,0,143,204,224,1,2,206,0,0,208,129,237,0,80,204,206,0,143,204,225,1,141,206,224,1,2,209,0,0,255,255,0,0,19,206,206,209,141,209,225,1,135,204,193,0,206,209,0,0,143,204,226,1,2,204,0,0,200,129,237,0,141,209,226,1,40,209,209,1,41,209,209,31,42,209,209,31,83,204,209,0,141,209,17,3,1,204,8,9,1,206,10,0,97,209,204,206,141,206,17,3,1,204,8,9,3,206,206,204,1,204,1,0,109,206,4,204,141,204,17,3,1,206,168,6,141,209,226,1,40,209,209,1,41,209,209,31,42,209,209,31,1,208,255,0,19,209,209,208,97,204,206,209,141,206,17,3,1,204,8,9,3,206,206,204,2,204,0,0,15,205,19,0,141,208,17,3,1,205,168,6,3,208,208,205,135,209,18,0,206,204,208,0,119,0,63,28,2,208,0,0,160,130,237,0,82,209,208,0,143,209,227,1,2,208,0,0,208,129,237,0,80,209,208,0,143,209,228,1,141,208,227,1,2,204,0,0,255,255,0,0,19,208,208,204,141,204,228,1,135,209,194,0,208,204,0,0,143,209,229,1,141,209,229,1,121,209,6,0,2,209,0,0,200,129,237,0,1,204,0,0,83,209,204,0,119,0,40,28,2,204,0,0,200,129,237,0,1,209,255,255,83,204,209,0,119,0,35,28,135,205,195,0,143,205,2,2,2,205,0,0,200,129,237,0,141,204,2,2,83,205,204,0,119,0,28,28,2,205,0,0,99,25,21,0,78,204,205,0,143,204,3,2,141,204,3,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,31,0,2,205,0,0,160,130,237,0,82,204,205,0,143,204,4,2,2,205,0,0,208,129,237,0,80,204,205,0,143,204,5,2,2,205,0,0,50,168,18,0,80,204,205,0,143,204,6,2,1,205,0,0,25,205,205,12,141,207,6,2,2,208,0,0,255,255,0,0,19,207,207,208,41,207,207,4,3,205,205,207,141,207,4,2,41,207,207,16,141,208,5,2,2,209,0,0,255,255,0,0,19,208,208,209,20,207,207,208,135,204,167,0,205,207,0,0,119,0,245,27,2,207,0,0,46,189,19,0,141,205,17,3,1,208,216,6,3,205,205,208,135,204,24,0,207,205,0,0,119,0,237,27,1,204,0,0,2,208,0,0,204,129,237,0,2,206,0,0,200,129,237,0,2,205,0,0,208,129,237,0,135,209,196,0,204,208,206,205,143,209,230,1,141,209,230,1,120,209,225,27,2,209,0,0,200,129,237,0,1,205,255,255,83,209,205,0,119,0,220,27,2,209,0,0,208,129,237,0,78,205,209,0,143,205,231,1,141,209,231,1,2,206,0,0,204,129,237,0,2,208,0,0,200,129,237,0,2,204,0,0,208,129,237,0,135,205,196,0,209,206,208,204,143,205,232,1,141,205,232,1,120,205,204,27,2,205,0,0,200,129,237,0,1,204,255,255,83,205,204,0,119,0,199,27,2,207,0,0,208,129,237,0,78,204,207,0,143,204,175,2,141,207,114,2,41,207,207,24,42,207,207,24,32,204,207,31,143,204,176,2,141,204,176,2,141,207,175,2,41,207,207,24,42,207,207,24,32,207,207,0,20,204,204,207,121,204,6,0,135,204,195,0,143,204,177,2,141,204,177,2,0,16,204,0,119,0,6,0,141,204,175,2,26,204,204,1,41,204,204,24,42,204,204,24,0,16,204,0,1,207,255,0,19,207,16,207,0,204,207,0,143,204,178,2,2,207,0,0,144,161,23,0,141,208,178,2,41,208,208,2,94,204,207,208,143,204,179,2,141,204,179,2,1,207,0,0,45,204,204,207,216,220,1,0,2,204,0,0,200,129,237,0,1,207,255,255,83,204,207,0,119,0,154,27,2,207,0,0,200,129,237,0,1,204,0,0,83,207,204,0,2,207,0,0,184,156,79,0,80,204,207,0,143,204,180,2,2,204,0,0,160,130,237,0,141,207,180,2,2,208,0,0,255,255,0,0,19,207,207,208,85,204,207,0,2,207,0,0,192,130,237,0,141,204,180,2,2,208,0,0,255,255,0,0,19,204,204,208,41,204,204,4,85,207,204,0,1,207,255,0,19,207,16,207,0,204,207,0,143,204,182,2,2,204,0,0,212,129,237,0,141,207,182,2,84,204,207,0,141,207,17,3,1,204,208,8,1,208,14,0,97,207,204,208,141,208,17,3,1,204,208,8,3,208,208,204,1,204,3,0,109,208,4,204,141,208,17,3,1,207,208,8,3,208,208,207,2,207,0,0,113,206,19,0,141,205,17,3,1,209,24,7,3,205,205,209,135,204,18,0,208,207,205,0,119,0,103,27,141,204,17,3,1,205,1,0,96,204,200,205,2,204,0,0,160,130,237,0,82,205,204,0,143,205,233,1,2,204,0,0,208,129,237,0,80,205,204,0,143,205,234,1,141,204,233,1,2,208,0,0,255,255,0,0,19,204,204,208,141,208,234,1,141,206,17,3,3,206,206,200,1,209,1,0,135,205,197,0,204,208,206,209,143,205,235,1,2,205,0,0,200,129,237,0,141,209,235,1,83,205,209,0,141,209,17,3,1,205,0,9,1,206,10,0,97,209,205,206,141,206,17,3,1,205,0,9,3,206,206,205,1,205,1,0,109,206,4,205,141,205,17,3,1,206,176,6,141,209,235,1,1,208,255,0,19,209,209,208,97,205,206,209,141,206,17,3,1,205,0,9,3,206,206,205,2,205,0,0,54,205,19,0,141,208,17,3,1,204,176,6,3,208,208,204,135,209,18,0,206,205,208,0,119,0,51,27,141,209,17,3,1,208,1,0,96,209,200,208,2,209,0,0,160,130,237,0,82,208,209,0,143,208,236,1,2,209,0,0,208,129,237,0,80,208,209,0,143,208,237,1,141,209,236,1,2,205,0,0,255,255,0,0,19,209,209,205,141,205,237,1,141,206,17,3,3,206,206,200,1,204,1,0,135,208,198,0,209,205,206,204,143,208,238,1,2,208,0,0,200,129,237,0,141,204,238,1,83,208,204,0,141,204,17,3,1,208,248,8,1,206,10,0,97,204,208,206,141,206,17,3,1,208,248,8,3,206,206,208,1,208,1,0,109,206,4,208,141,208,17,3,1,206,184,6,141,204,238,1,1,205,255,0,19,204,204,205,97,208,206,204,141,206,17,3,1,208,248,8,3,206,206,208,2,208,0,0,98,205,19,0,141,205,17,3,1,209,184,6,3,205,205,209,135,204,18,0,206,208,205,0,119,0,255,26,2,205,0,0,160,130,237,0,82,204,205,0,143,204,239,1,2,205,0,0,208,129,237,0,80,204,205,0,143,204,240,1,141,205,239,1,2,208,0,0,255,255,0,0,19,205,205,208,141,208,240,1,135,204,199,0,205,208,0,0,143,204,241,1,141,204,241,1,121,204,6,0,2,204,0,0,200,129,237,0,1,208,0,0,83,204,208,0,119,0,232,26,2,208,0,0,200,129,237,0,1,204,255,255,83,208,204,0,119,0,227,26,2,208,0,0,160,130,237,0,82,204,208,0,143,204,242,1,2,208,0,0,208,129,237,0,80,204,208,0,143,204,243,1,141,208,242,1,2,205,0,0,255,255,0,0,19,208,208,205,141,205,243,1,135,204,200,0,208,205,0,0,119,0,211,26,2,205,0,0,200,129,237,0,78,204,205,0], eb + 112640);
  HEAPU8.set([143,204,7,2,2,205,0,0,208,129,237,0,80,204,205,0,143,204,8,2,2,205,0,0,160,130,237,0,82,204,205,0,143,204,9,2,141,205,7,2,1,207,255,0,19,205,205,207,41,205,205,2,141,207,9,2,41,207,207,16,141,208,8,2,2,209,0,0,255,255,0,0,19,208,208,209,20,207,207,208,135,204,167,0,205,207,0,0,119,0,185,26,2,207,0,0,208,129,237,0,80,204,207,0,143,204,10,2,2,207,0,0,99,25,21,0,78,204,207,0,143,204,11,2,141,204,11,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,19,0,2,207,0,0,50,168,18,0,80,204,207,0,143,204,12,2,1,207,0,0,25,207,207,16,141,205,12,2,2,208,0,0,255,255,0,0,19,205,205,208,41,205,205,4,3,207,207,205,135,204,166,0,207,0,0,0,143,204,13,2,141,204,13,2,0,10,204,0,119,0,9,0,2,207,0,0,198,187,19,0,141,205,17,3,1,208,224,6,3,205,205,208,135,204,24,0,207,205,0,0,1,10,0,0,2,205,0,0,255,255,0,0,19,205,10,205,0,204,205,0,143,204,14,2,141,205,14,2,41,205,205,4,39,205,205,2,135,204,166,0,205,0,0,0,143,204,15,2,141,205,10,2,141,207,15,2,135,204,201,0,205,207,0,0,2,204,0,0,200,129,237,0,1,207,240,255,83,204,207,0,119,0,126,26,2,205,0,0,160,130,237,0,82,204,205,0,143,204,244,1,2,205,0,0,208,129,237,0,80,204,205,0,143,204,245,1,141,205,244,1,2,208,0,0,255,255,0,0,19,205,205,208,141,208,245,1,2,206,0,0,204,129,237,0,1,209,0,0,135,204,197,0,205,208,206,209,143,204,246,1,2,204,0,0,200,129,237,0,141,209,246,1,83,204,209,0,141,209,17,3,1,204,240,8,1,206,10,0,97,209,204,206,141,206,17,3,1,204,240,8,3,206,206,204,1,204,1,0,109,206,4,204,141,204,17,3,1,206,192,6,141,209,246,1,1,208,255,0,19,209,209,208,97,204,206,209,141,206,17,3,1,204,240,8,3,206,206,204,2,204,0,0,143,205,19,0,141,208,17,3,1,205,192,6,3,208,208,205,135,209,18,0,206,204,208,0,119,0,77,26,2,208,0,0,160,130,237,0,82,209,208,0,143,209,247,1,2,208,0,0,208,129,237,0,80,209,208,0,143,209,248,1,141,208,247,1,2,204,0,0,255,255,0,0,19,208,208,204,141,204,248,1,2,206,0,0,204,129,237,0,1,205,0,0,135,209,198,0,208,204,206,205,143,209,249,1,2,209,0,0,200,129,237,0,141,205,249,1,83,209,205,0,141,205,17,3,1,209,232,8,1,206,10,0,97,205,209,206,141,206,17,3,1,209,232,8,3,206,206,209,1,209,1,0,109,206,4,209,141,209,17,3,1,206,200,6,141,205,249,1,1,204,255,0,19,205,205,204,97,209,206,205,141,206,17,3,1,209,232,8,3,206,206,209,2,209,0,0,194,205,19,0,141,204,17,3,1,208,200,6,3,204,204,208,135,205,18,0,206,209,204,0,119,0,28,26,2,204,0,0,192,130,237,0,82,205,204,0,143,205,250,1,2,204,0,0,224,129,237,0,80,205,204,0,143,205,251,1,141,204,250,1,141,209,251,1,2,206,0,0,255,255,0,0,19,209,209,206,3,204,204,209,141,209,17,3,1,206,255,3,135,205,202,0,204,209,206,0,2,206,0,0,148,130,237,0,82,205,206,0,143,205,252,1,2,206,0,0,228,129,237,0,80,205,206,0,143,205,253,1,2,206,0,0,200,129,237,0,78,205,206,0,143,205,254,1,141,206,252,1,2,209,0,0,255,255,0,0,19,206,206,209,141,209,253,1,141,204,254,1,141,208,17,3,141,207,17,3,3,207,207,200,135,205,203,0,206,209,204,208,207,0,0,0,143,205,255,1,2,205,0,0,200,129,237,0,141,207,255,1,83,205,207,0,141,205,17,3,90,207,205,200,143,207,0,2,2,205,0,0,224,129,237,0,80,207,205,0,143,207,1,2,2,207,0,0,224,129,237,0,141,205,1,2,2,208,0,0,255,255,0,0,19,205,205,208,141,208,0,2,1,204,255,0,19,208,208,204,3,205,205,208,2,208,0,0,255,255,0,0,19,205,205,208,84,207,205,0,141,205,17,3,1,207,224,8,1,208,10,0,97,205,207,208,141,208,17,3,1,207,224,8,3,208,208,207,1,207,1,0,109,208,4,207,141,207,17,3,1,208,208,6,141,205,255,1,1,204,255,0,19,205,205,204,97,207,208,205,141,208,17,3,1,207,224,8,3,208,208,207,2,207,0,0,246,205,19,0,141,204,17,3,1,209,208,6,3,204,204,209,135,205,18,0,208,207,204,0,119,0,190,25,2,204,0,0,103,224,53,2,78,207,204,0,143,207,16,2,2,204,0,0,44,156,79,0,82,207,204,0,143,207,17,2,141,207,16,2,41,207,207,24,42,207,207,24,33,207,207,0,141,204,17,2,32,204,204,7,20,207,207,204,121,207,192,1,2,204,0,0,200,129,237,0,80,207,204,0,143,207,18,2,141,204,18,2,2,205,0,0,255,255,0,0,19,204,204,205,135,207,204,0,204,0,0,0,141,207,17,2,32,207,207,7,121,207,252,0,2,204,0,0,212,129,237,0,80,207,204,0,143,207,19,2,141,204,19,2,2,205,0,0,255,255,0,0,19,204,204,205,135,207,204,0,204,0,0,0,2,204,0,0,148,130,237,0,82,207,204,0,143,207,20,2,141,204,20,2,2,205,0,0,255,255,0,0,19,204,204,205,135,207,204,0,204,0,0,0,2,204,0,0,216,129,237,0,80,207,204,0,143,207,21,2,2,207,0,0,216,129,237,0,141,204,21,2,2,205,0,0,255,255,0,0,19,204,204,205,2,205,0,0,250,255,0,0,3,204,204,205,2,205,0,0,255,255,0,0,19,204,204,205,84,207,204,0,2,204,0,0,201,129,237,0,1,207,0,0,83,204,207,0,2,207,0,0,212,129,237,0,141,204,21,2,2,205,0,0,255,255,0,0,19,204,204,205,2,205,0,0,250,255,0,0,3,204,204,205,2,205,0,0,255,255,0,0,19,204,204,205,84,207,204,0,2,207,0,0,156,130,237,0,82,204,207,0,143,204,22,2,2,204,0,0,148,130,237,0,141,207,22,2,2,205,0,0,255,255,0,0,19,207,207,205,85,204,207,0,2,207,0,0,180,130,237,0,141,204,22,2,2,205,0,0,255,255,0,0,19,204,204,205,41,204,204,4,85,207,204,0,1,207,28,0,135,204,205,0,207,0,0,0,2,207,0,0,148,130,237,0,82,204,207,0,143,204,23,2,2,207,0,0,212,129,237,0,80,204,207,0,143,204,24,2,141,207,23,2,41,207,207,4,2,205,0,0,240,255,15,0,19,207,207,205,141,205,24,2,2,208,0,0,255,255,0,0,19,205,205,208,3,204,207,205,143,204,25,2,2,205,0,0,216,129,237,0,80,204,205,0,143,204,26,2,2,204,0,0,216,129,237,0,141,205,26,2,2,207,0,0,255,255,0,0,19,205,205,207,25,205,205,6,2,207,0,0,255,255,0,0,19,205,205,207,84,204,205,0,135,205,169,0,143,205,27,2,2,205,0,0,148,130,237,0,141,204,27,2,2,207,0,0,255,255,0,0,19,204,204,207,85,205,204,0,2,204,0,0,180,130,237,0,141,205,27,2,2,207,0,0,255,255,0,0,19,205,205,207,41,205,205,4,85,204,205,0,135,205,169,0,143,205,28,2,2,205,0,0,212,129,237,0,141,204,28,2,2,207,0,0,255,255,0,0,19,204,204,207,84,205,204,0,135,204,169,0,143,204,29,2,2,204,0,0,200,129,237,0,141,205,29,2,2,207,0,0,255,255,0,0,19,205,205,207,84,204,205,0,141,204,25,2,135,205,181,0,204,0,0,0,143,205,30,2,141,204,25,2,135,205,181,0,204,0,0,0,143,205,31,2,141,204,30,2,1,207,255,0,19,204,204,207,43,204,204,4,27,204,204,10,141,207,31,2,38,207,207,15,1,208,255,0,19,207,207,208,3,204,204,207,1,207,108,7,3,205,204,207,143,205,32,2,141,204,32,2,1,208,188,7,48,204,204,208,156,231,1,0,141,204,30,2,1,208,255,0,19,204,204,208,43,204,204,4,27,204,204,10,141,208,31,2,38,208,208,15,1,209,255,0,19,208,208,209,3,204,204,208,1,208,208,7,3,204,204,208,0,207,204,0,119,0,3,0,141,204,32,2,0,207,204,0,0,205,207,0,143,205,9,3,2,205,0,0,204,129,237,0,141,207,9,3,2,204,0,0,255,255,0,0,19,207,207,204,84,205,207,0,141,205,25,2,25,205,205,1,135,207,181,0,205,0,0,0,141,205,25,2,25,205,205,1,135,207,181,0,205,0,0,0,143,207,33,2,2,207,0,0,208,129,237,0,141,205,33,2,1,204,255,0,19,205,205,204,43,205,205,4,107,207,1,205,141,207,25,2,25,207,207,2,135,205,181,0,207,0,0,0,143,205,34,2,141,207,25,2,25,207,207,2,135,205,181,0,207,0,0,0,143,205,35,2,2,205,0,0,208,129,237,0,141,207,34,2,1,204,255,0,19,207,207,204,43,207,207,4,27,207,207,10,141,204,35,2,38,204,204,15,1,208,255,0,19,204,204,208,3,207,207,204,1,204,255,0,19,207,207,204,83,205,207,0,141,205,25,2,25,205,205,1,135,207,181,0,205,0,0,0,141,205,25,2,25,205,205,1,135,207,181,0,205,0,0,0,143,207,36,2,2,207,0,0,200,129,237,0,141,205,36,2,38,205,205,15,83,207,205,0,119,0,166,24,2,205,0,0,201,129,237,0,1,207,4,0,83,205,207,0,1,205,26,0,135,207,205,0,205,0,0,0,135,207,169,0,143,207,37,2,2,207,0,0,200,129,237,0,141,205,37,2,2,204,0,0,255,255,0,0,19,205,205,204,84,207,205,0,2,207,0,0,204,129,237,0,102,205,207,1,143,205,38,2,2,205,0,0,204,129,237,0,141,207,38,2,1,204,255,0,19,207,207,204,43,207,207,4,27,207,207,10,141,204,38,2,1,208,255,0,19,204,204,208,38,204,204,15,3,207,207,204,1,204,255,0,19,207,207,204,107,205,1,207,2,205,0,0,204,129,237,0,78,207,205,0,143,207,39,2,141,205,39,2,1,204,255,0,19,205,205,204,43,205,205,4,27,205,205,10,141,204,39,2,1,208,255,0,19,204,204,208,38,204,204,15,3,205,205,204,1,204,255,0,19,205,205,204,141,204,38,2,1,208,255,0,19,204,204,208,43,204,204,4,27,204,204,10,141,208,38,2,1,209,255,0,19,208,208,209,38,208,208,15,3,204,204,208,1,208,255,0,19,204,204,208,27,204,204,100,3,207,205,204,143,207,40,2,2,207,0,0,204,129,237,0,141,204,40,2,2,205,0,0,255,255,0,0,19,204,204,205,84,207,204,0,2,207,0,0,208,129,237,0,102,204,207,1,143,204,41,2,2,204,0,0,208,129,237,0,141,207,41,2,1,205,255,0,19,207,207,205,43,207,207,4,27,207,207,10,141,205,41,2,1,208,255,0,19,205,205,208,38,205,205,15,3,207,207,205,1,205,255,0,19,207,207,205,107,204,1,207,2,204,0,0,208,129,237,0,78,207,204,0,143,207,42,2,2,207,0,0,208,129,237,0,141,204,42,2,1,205,255,0,19,204,204,205,43,204,204,4,27,204,204,10,141,205,42,2,1,208,255,0,19,205,205,208,38,205,205,15,3,204,204,205,1,205,255,0,19,204,204,205,83,207,204,0,141,207,41,2,1,205,255,0,19,207,207,205,43,207,207,4,27,207,207,10,141,205,41,2,1,208,255,0,19,205,205,208,38,205,205,15,3,207,207,205,1,205,255,0,19,207,207,205,0,204,207,0,143,204,43,2,141,207,40,2,1,205,255,0,19,207,207,205,1,205,14,0,141,208,43,2,4,205,205,208,28,205,205,12,38,205,205,255,4,204,207,205,143,204,45,2,2,204,0,0,200,129,237,0,141,205,45,2,141,207,42,2,1,208,255,0,19,207,207,208,43,207,207,4,27,207,207,10,141,208,42,2,1,209,255,0,19,208,208,209,38,208,208,15,3,207,207,208,1,208,255,0,19,207,207,208,3,205,205,207,141,207,45,2,28,207,207,4,38,207,207,255,3,205,205,207,141,207,45,2,28,207,207,156,38,207,207,255,3,205,205,207,141,207,45,2,1,208,144,1,6,207,207,208,38,207,207,255,3,205,205,207,1,207,14,0,141,208,43,2,4,207,207,208,28,207,207,12,38,207,207,255,27,207,207,12,141,208,43,2,3,207,207,208,27,207,207,31,26,207,207,62,28,207,207,12,38,207,207,255,3,205,205,207,30,205,205,7,38,205,205,255,1,207,255,0,19,205,205,207,83,204,205,0,119,0,239,23,2,205,0,0,200,129,237,0,1,204,0,0,84,205,204,0,1,205,26,0,135,204,205,0,205,0,0,0,2,205,0,0,200,129,237,0,78,204,205,0,143,204,46,2,141,204,46,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,12,0,2,204,0,0,126,156,79,0,78,26,204,0,2,204,0,0,127,156,79,0,78,27,204,0,0,204,26,0,143,204,56,2,0,204,27,0,143,204,60,2,119,0,180,0,2,205,0,0,127,156,79,0,78,204,205,0,143,204,48,2,141,205,48,2,1,207,255,0,19,205,205,207,141,207,46,2,1,208,255,0,19,207,207,208,3,205,205,207,1,207,255,0,19,205,205,207,0,204,205,0,143,204,49,2,2,204,0,0,127,156,79,0,141,205,49,2,83,204,205,0,2,204,0,0,126,156,79,0,78,205,204,0,143,205,50,2,2,204,0,0,30,206,19,0,141,207,50,2,1,208,255,0,19,207,207,208,90,205,204,207,143,205,51,2,141,205,51,2,1,204,255,0,19,205,205,204,141,204,48,2,1,207,255,0,19,204,204,207,141,207,46,2,1,208,255,0,19,207,207,208,3,204,204,207,1,207,255,0,19,204,204,207,48,205,205,204,164,238,1,0,2,204,0,0,124,156,79,0,80,205,204,0,143,205,52,2,141,205,50,2,41,205,205,24,42,205,205,24,32,205,205,2,141,204,52,2,38,204,204,3,41,204,204,16,42,204,204,16,32,204,204,0,19,205,205,204,121,205,53,0,1,205,29,0,141,204,48,2,1,207,255,0,19,204,204,207,141,207,46,2,1,208,255,0,19,207,207,208,3,204,204,207,1,207,255,0,19,204,204,207,55,205,205,204,36,237,1,0,1,205,2,0,143,205,56,2,141,204,49,2,0,205,204,0,143,205,60,2,119,0,103,0,2,205,0,0,126,156,79,0,1,204,3,0,83,205,204,0,2,204,0,0,127,156,79,0,141,205,48,2,1,207,255,0,19,205,205,207,141,207,46,2,1,208,255,0,19,207,207,208,3,205,205,207,1,207,227,0,3,205,205,207,1,207,255,0,19,205,205,207,83,204,205,0,1,205,3,0,143,205,56,2,141,204,48,2,1,207,255,0,19,204,204,207,141,207,46,2,1,208,255,0,19,207,207,208,3,204,204,207,1,207,227,0,3,204,204,207,1,207,255,0,19,204,204,207,0,205,204,0,143,205,60,2,119,0,69,0,2,205,0,0,126,156,79,0,141,204,50,2,25,204,204,1,41,204,204,24,42,204,204,24,83,205,204,0,141,205,48,2,1,207,255,0,19,205,205,207,141,207,46,2,1,208,255,0,19,207,207,208,3,205,205,207,141,207,51,2,1,208,255,0,19,207,207,208,4,205,205,207,1,207,255,0,19,205,205,207,0,204,205,0,143,204,54,2,2,204,0,0,127,156,79,0,141,205,54,2,83,204,205,0,1,205,12,0,141,204,50,2,25,204,204,1,41,204,204,24,42,204,204,24,1,207,255,0,19,204,204,207,54,205,205,204,96,238,1,0,141,204,50,2,25,204,204,1,41,204,204,24,42,204,204,24,0,205,204,0,143,205,56,2,141,204,54,2,0,205,204,0,143,205,60,2,119,0,24,0,2,205,0,0,126,156,79,0,1,204,1,0,83,205,204,0,2,204,0,0,124,156,79,0,141,205,52,2,25,205,205,1,41,205,205,16,42,205,205,16,84,204,205,0,1,205,1,0,143,205,56,2,141,204,54,2,0,205,204,0,143,205,60,2,119,0,7,0,141,204,50,2,0,205,204,0,143,205,56,2,141,204,49,2,0,205,204,0,143,205,60,2,141,204,56,2,1,207,255,0,19,204,204,207,0,205,204,0,143,205,55,2,2,204,0,0,124,156,79,0,80,205,204,0,143,205,57,2,141,204,57,2,2,207,0,0,255,255,0,0,19,204,204,207,1,207,14,0,141,208,55,2,4,207,207,208,28,207,207,12,38,207,207,255,4,205,204,207,143,205,58,2,141,207,60,2,1,204,255,0,19,207,207,204,0,205,207,0,143,205,59,2,2,205,0,0,200,129,237,0,141,207,58,2,141,204,59,2,3,207,207,204,141,204,58,2,28,204,204,4,38,204,204,255,3,207,207,204,141,204,58,2,28,204,204,156,38,204,204,255,3,207,207,204,141,204,58,2,1,208,144,1,6,204,204,208,38,204,204,255,3,207,207,204,1,204,14,0,141,208,55,2,4,204,204,208,28,204,204,12,38,204,204,255,27,204,204,12,141,208,55,2,3,204,204,208,27,204,204,31,26,204,204,62,28,204,204,12,38,204,204,255,3,207,207,204,30,207,207,7,38,207,207,255,1,204,255,0,19,207,207,204,83,205,207,0,2,207,0,0,204,129,237,0,141,205,57,2,84,207,205,0,2,205,0,0,208,129,237,0,141,207,56,2,107,205,1,207,2,207,0,0,208,129,237,0,141,205,60,2,83,207,205,0,119,0,215,22,2,207,0,0,103,224,53,2,78,205,207,0,143,205,61,2,141,205,61,2,41,205,205,24,42,205,205,24,32,205,205,0,120,205,32,1,141,207,17,3,3,205,207,200,143,205,15,3,1,205,48,11,143,205,18,3,141,207,15,3,25,205,207,48,143,205,19,3,141,205,15,3,141,207,18,3,82,207,207,0,85,205,207,0,141,205,15,3,25,207,205,4,143,207,15,3,141,205,18,3,25,207,205,4,143,207,18,3,141,207,15,3,141,205,19,3,54,207,207,205,40,240,1,0,2,205,0,0,204,129,237,0,80,207,205,0,143,207,62,2,141,207,62,2,2,205,0,0,255,255,0,0,19,207,207,205,38,207,207,3,32,207,207,0,121,207,22,0,141,207,62,2,2,205,0,0,255,255,0,0,19,207,207,205,31,207,207,100,38,207,207,255,33,207,207,0,141,205,62,2,2,204,0,0,255,255,0,0,19,205,205,204,1,204,144,1,9,205,205,204,38,205,205,255,32,205,205,0,20,207,207,205,121,207,5,0,141,207,17,3,3,207,207,200,1,205,29,0,109,207,4,205,1,205,83,31,141,207,62,2,1,204,188,7,4,207,207,204,41,207,207,16,42,207,207,16,2,204,0,0,255,255,0,0,19,207,207,204,47,205,205,207,24,241,1,0,1,205,255,255,143,205,14,3,119,0,215,0,2,207,0,0,208,129,237,0,102,205,207,1,143,205,63,2,1,205,11,0,141,207,63,2,26,207,207,1,41,207,207,24,42,207,207,24,1,204,255,0,19,207,207,204,47,205,205,207,88,241,1,0,1,205,255,255,143,205,14,3,119,0,199,0,2,207,0,0,208,129,237,0,78,205,207,0,143,205,64,2,141,205,64,2,41,205,205,24,42,205,205,24,32,205,205,0,121,205,4,0,1,205,255,255,143,205,14,3,119,0,187,0,141,207,17,3,3,207,207,200,141,204,63,2,1,208,255,0,19,204,204,208,41,204,204,2,94,205,207,204,143,205,65,2,141,205,65,2,141,207,64,2,1,204,255,0,19,207,207,204,47,205,205,207,204,241,1,0,1,205,255,255,143,205,14,3,119,0,170,0,2,207,0,0,200,129,237,0,80,205,207,0,143,205,66,2,141,207,66,2,2,204,0,0,255,255,0,0,19,207,207,204,135,205,204,0,207,0,0,0,2,207,0,0,204,129,237,0,80,205,207,0,143,205,67,2,141,207,67,2,2,204,0,0,255,255,0,0,19,207,207,204,135,205,204,0,207,0,0,0,2,207,0,0,208,129,237,0,80,205,207,0,143,205,68,2,141,207,68,2,2,204,0,0,255,255,0,0,19,207,207,204,135,205,204,0,207,0,0,0,2,205,0,0,200,129,237,0,1,207,5,0,83,205,207,0,2,207,0,0,204,129,237,0,141,205,62,2,2,204,0,0,255,255,0,0,19,205,205,204,1,204,232,3,7,205,205,204,38,205,205,255,41,205,205,4,141,204,62,2,2,208,0,0,255,255,0,0,19,204,204,208,29,204,204,100,38,204,204,255,31,204,204,10,38,204,204,255,20,205,205,204,1,204,255,0,19,205,205,204,107,207,1,205,141,207,62,2,2,204,0,0,255,255,0,0,19,207,207,204,141,204,62,2,2,208,0,0,255,255,0,0,19,204,204,208,29,204,204,100,38,204,204,255,27,204,204,100,4,205,207,204,143,205,70,2,2,205,0,0,204,129,237,0,141,204,70,2,29,204,204,10,38,204,204,255,41,204,204,4,141,207,70,2,141,208,70,2,29,208,208,10,38,208,208,255,27,208,208,10,4,207,207,208,20,204,204,207,1,207,255,0,19,204,204,207,83,205,204,0,2,205,0,0,208,129,237,0,102,204,205,1,143,204,71,2,2,204,0,0,208,129,237,0,141,205,71,2,1,207,255,0,19,205,205,207,29,205,205,10,38,205,205,255,41,205,205,4,141,207,71,2,1,208,255,0,19,207,207,208,141,208,71,2,1,209,255,0,19,208,208,209,29,208,208,10,38,208,208,255,27,208,208,10,4,207,207,208,20,205,205,207,1,207,255,0,19,205,205,207,107,204,1,205,2,204,0,0,208,129,237,0,78,205,204,0,143,205,73,2,2,205,0,0,208,129,237,0,141,204,73,2,1,207,255,0,19,204,204,207,29,204,204,10,38,204,204,255,41,204,204,4,141,207,73,2,1,208,255,0,19,207,207,208,141,208,73,2,1,209,255,0,19,208,208,209,29,208,208,10,38,208,208,255,27,208,208,10,4,207,207,208,20,204,204,207,1,207,255,0,19,204,204,207,83,205,204,0,1,205,26,0,135,204,205,0,205,0,0,0,135,204,169,0,143,204,74,2,2,204,0,0,208,129,237,0,141,205,74,2,2,207,0,0,255,255,0,0,19,205,205,207,84,204,205,0,135,205,169,0,143,205,75,2,2,205,0,0,204,129,237,0,141,204,75,2,2,207,0,0,255,255,0,0,19,204,204,207,84,205,204,0,135,204,169,0,143,204,76,2,2,204,0,0,200,129,237,0,141,205,76,2,2,207,0,0,255,255,0,0,19,205,205,207,84,204,205,0,1,205,0,0,143,205,14,3,2,205,0,0,200,129,237,0,141,204,14,3,83,205,204,0,119,0,175,21,2,205,0,0,204,129,237,0,80,204,205,0,143,204,78,2,141,204,78,2,2,205,0,0,255,255,0,0,19,204,204,205,1,205,188,7,47,204,204,205,196,244,1,0,2,204,0,0,200,129,237,0,1,205,255,255,83,204,205,0,119,0,159,21,2,204,0,0,208,129,237,0,102,205,204,1,143,205,79,2,1,205,11,0,141,204,79,2,26,204,204,1,41,204,204,24,42,204,204,24,1,207,255,0,19,204,204,207,47,205,205,204,12,245,1,0,2,205,0,0,200,129,237,0,1,204,255,255,83,205,204,0,119,0,141,21,2,205,0,0,208,129,237,0,78,204,205,0,143,204,80,2,141,204,80,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,6,0,2,204,0,0,200,129,237,0,1,205,255,255,83,204,205,0,119,0,127,21,2,204,0,0,30,206,19,0,141,207,79,2,1,208,255,0,19,207,207,208,90,205,204,207,143,205,81,2,141,205,81,2,1,204,255,0,19,205,205,204,141,204,80,2,1,207,255,0,19,204,204,207,47,205,205,204,212,245,1,0,141,205,78,2,38,205,205,3,41,205,205,16,42,205,205,16,32,205,205,0,141,204,79,2,41,204,204,24,42,204,204,24,32,204,204,2,19,205,205,204,141,204,80,2,41,204,204,24,42,204,204,24,32,204,204,29,19,205,205,204,120,205,6,0,2,205,0,0,200,129,237,0,1,204,255,255,83,205,204,0,119,0,91,21,2,204,0,0,124,156,79,0,141,205,78,2,84,204,205,0,2,205,0,0,126,156,79,0,141,204,79,2,83,205,204,0,2,204,0,0,127,156,79,0,141,205,80,2,83,204,205,0,2,205,0,0,200,129,237,0,1,204,0,0,83,205,204,0,119,0,74,21,2,205,0,0,103,224,53,2,78,204,205,0,143,204,83,2,2,205,0,0,44,156,79,0,82,204,205,0,143,204,84,2,141,204,83,2,41,204,204,24,42,204,204,24,33,204,204,0,141,205,84,2,32,205,205,7,20,204,204,205,121,204,115,1,2,205,0,0,200,129,237,0,80,204,205,0,143,204,85,2,141,205,85,2,2,207,0,0,255,255,0,0,19,205,205,207,135,204,204,0,205,0,0,0,141,204,84,2,32,204,204,7,121,204,13,1,2,205,0,0,212,129,237,0,80,204,205,0,143,204,86,2,141,205,86,2,2,207,0,0,255,255,0,0,19,205,205,207,135,204,204,0,205,0,0,0,2,205,0,0,148,130,237,0,82,204,205,0,143,204,87,2,141,205,87,2,2,207,0,0,255,255,0,0,19,205,205,207,135,204,204,0,205,0,0,0,2,205,0,0,216,129,237,0,80,204,205,0,143,204,88,2,2,204,0,0,216,129,237,0,141,205,88,2,2,207,0,0,255,255,0,0,19,205,205,207,2,207,0,0,250,255,0,0,3,205,205,207,2,207,0,0,255,255,0,0,19,205,205,207,84,204,205,0,2,205,0,0,201,129,237,0,1,204,0,0,83,205,204,0,2,204,0,0,212,129,237,0,141,205,88,2,2,207,0,0,255,255,0,0,19,205,205,207,2,207,0,0,250,255,0,0,3,205,205,207,2,207,0,0,255,255,0,0,19,205,205,207,84,204,205,0,2,204,0,0,156,130,237,0,82,205,204,0,143,205,89,2,2,205,0,0,148,130,237,0,141,204,89,2,2,207,0,0,255,255,0,0,19,204,204,207,85,205,204,0,2,204,0,0,180,130,237,0,141,205,89,2,2,207,0,0,255,255,0,0,19,205,205,207,41,205,205,4,85,204,205,0,1,204,28,0,135,205,205,0,204,0,0,0,2,204,0,0,148,130,237,0,82,205,204,0,143,205,90,2,2,204,0,0,212,129,237,0,80,205,204,0,143,205,91,2,2,204,0,0,216,129,237,0,80,205,204,0,143,205,92,2,2,205,0,0,216,129,237,0,141,204,92,2,2,207,0,0,255,255,0,0,19,204,204,207,25,204,204,6,2,207,0,0,255,255,0,0,19,204,204,207,84,205,204,0,135,204,169,0,143,204,93,2,2,204,0,0,148,130,237,0,141,205,93,2,2,207,0,0,255,255,0,0,19,205,205,207,85,204,205,0,2,205,0,0,180,130,237,0,141,204,93,2,2,207,0,0,255,255,0,0,19,204,204,207,41,204,204,4,85,205,204,0,135,204,169,0,143,204,94,2,2,204,0,0,212,129,237,0,141,205,94,2,2,207,0,0,255,255,0,0,19,205,205,207,84,204,205,0,135,205,169,0,143,205,95,2,2,205,0,0,200,129,237,0,141,204,95,2,2,207,0,0,255,255,0,0,19,204,204,207,84,205,204,0,141,205,90,2,41,205,205,4,2,207,0,0,240,255,15,0,19,205,205,207,141,207,91,2,2,208,0,0,255,255,0,0,19,207,207,208,3,205,205,207,25,205,205,3,135,204,181,0,205,0,0,0,143,204,96,2,141,205,90,2,41,205,205,4,2,207,0,0,240,255,15,0,19,205,205,207,141,207,91,2,2,208,0,0,255,255,0,0,19,207,207,208,3,205,205,207,25,205,205,3,135,204,181,0,205,0,0,0,143,204,97,2,2,204,0,0,204,129,237,0,141,205,96,2,1,207,255,0,19,205,205,207,43,205,205,4,27,205,205,10,141,207,97,2,38,207,207,15,1,208,255,0,19,207,207,208,3,205,205,207,1,207,255,0,19,205,205,207,107,204,1,205,141,204,90,2,41,204,204,4,2,207,0,0,240,255,15,0,19,204,204,207,141,207,91,2,2,208,0,0,255,255,0,0,19,207,207,208,3,204,204,207,25,204,204,4,135,205,181,0,204,0,0,0,143,205,98,2,141,204,90,2,41,204,204,4,2,207,0,0,240,255,15,0,19,204,204,207,141,207,91,2,2,208,0,0,255,255,0,0,19,207,207,208,3,204,204,207,25,204,204,4,135,205,181,0,204,0,0,0,143,205,99,2,2,205,0,0,204,129,237,0,141,204,98,2,1,207,255,0,19,204,204,207,43,204,204,4,27,204,204,10,141,207,99,2,38,207,207,15,1,208,255,0,19,207,207,208,3,204,204,207,1,207,255,0,19,204,204,207,83,205,204,0,141,205,90,2,41,205,205,4,2,207,0,0,240,255,15,0,19,205,205,207,141,207,91,2,2,208,0,0,255,255,0,0,19,207,207,208,3,205,205,207,25,205,205,5,135,204,181,0,205,0,0,0,143,204,100,2,141,205,90,2,41,205,205,4,2,207,0,0,240,255,15,0,19,205,205,207,141,207,91,2,2,208,0,0,255,255,0,0,19,207,207,208,3,205,205,207,25,205,205,5,135,204,181,0,205,0,0,0,143,204,101,2,2,204,0,0,208,129,237,0,141,205,100,2,1,207,255,0,19,205,205,207,43,205,205,4,27,205,205,10,141,207,101,2,38,207,207,15,1,208,255,0,19,207,207,208,3,205,205,207,1,207,255,0,19,205,205,207,107,204,1,205,2,205,0,0,208,129,237,0,1,204,0,0,83,205,204,0,119,0,33,20,2,204,0,0,201,129,237,0,1,205,2,0,83,204,205,0,1,204,26,0,135,205,205,0,204,0,0,0,135,205,169,0,143,205,102,2,2,205,0,0,200,129,237,0,141,204,102,2,2,207,0,0,255,255,0,0,19,204,204,207,84,205,204,0,2,205,0,0,204,129,237,0,102,204,205,1,143,204,104,2,2,204,0,0,204,129,237,0,141,205,104,2,1,207,255,0,19,205,205,207,43,205,205,4,27,205,205,10,141,207,104,2,1,208,255,0,19,207,207,208,38,207,207,15,3,205,205,207,1,207,255,0,19,205,205,207,107,204,1,205,2,204,0,0,204,129,237,0,78,205,204,0,143,205,105,2,2,205,0,0,204,129,237,0,141,204,105,2,1,207,255,0,19,204,204,207,43,204,204,4,27,204,204,10,141,207,105,2,1,208,255,0,19,207,207,208,38,207,207,15,3,204,204,207,1,207,255,0,19,204,204,207,83,205,204,0,2,205,0,0,208,129,237,0,102,204,205,1,143,204,107,2,2,204,0,0,208,129,237,0,141,205,107,2,1,207,255,0,19,205,205,207,43,205,205,4,27,205,205,10,141,207,107,2,1,208,255,0,19,207,207,208,38,207,207,15,3,205,205,207,1,207,255,0,19,205,205,207,107,204,1,205,1,204,108,4,135,205,206,0,204,0,0,0,143,205,108,2,2,205,0,0,208,129,237,0,141,204,108,2,31,204,204,20,38,204,204,255,27,204,204,55,31,204,204,100,38,204,204,255,1,207,255,0,19,204,204,207,83,205,204,0,119,0,200,19,2,204,0,0,200,129,237,0,1,205,0,0,84,204,205,0,1,204,26,0,135,205,205,0,204,0,0,0,2,204,0,0,200,129,237,0,78,205,204,0,143,205,109,2,141,205,109,2,41,205,205,24,42,205,205,24,32,205,205,0,120,205,134,0,2,204,0,0,127,156,79,0,78,205,204,0,143,205,111,2,2,205,0,0,127,156,79,0,141,204,111,2,1,207,255,0,19,204,204,207,141,207,109,2,1,208,255,0,19,207,207,208,3,204,204,207,1,207,255,0,19,204,204,207,83,205,204,0,2,205,0,0,126,156,79,0,78,204,205,0,143,204,112,2,2,205,0,0,30,206,19,0,141,207,112,2,1,208,255,0,19,207,207,208,90,204,205,207,143,204,113,2,141,204,113,2,1,205,255,0,19,204,204,205,141,205,111,2,1,207,255,0,19,205,205,207,141,207,109,2,1,208,255,0,19,207,207,208,3,205,205,207,1,207,255,0,19,205,205,207,48,204,204,205,116,254,1,0,2,205,0,0,124,156,79,0,80,204,205,0,143,204,115,2,141,204,112,2,41,204,204,24,42,204,204,24,32,204,204,2,141,205,115,2,38,205,205,3,41,205,205,16,42,205,205,16,32,205,205,0,19,204,204,205,121,204,33,0,1,204,29,0,141,205,111,2,1,207,255,0,19,205,205,207,141,207,109,2,1,208,255,0,19,207,207,208,3,205,205,207,1,207,255,0,19,205,205,207,55,204,204,205,116,253,1,0,119,0,65,0,2,204,0,0,126,156,79,0,1,205,3,0,83,204,205,0,2,205,0,0,127,156,79,0,141,204,111,2,1,207,255,0,19,204,204,207,141,207,109,2,1,208,255,0,19,207,207,208,3,204,204,207,1,207,227,0,3,204,204,207,1,207,255,0,19,204,204,207,83,205,204,0,119,0,46,0,2,204,0,0,126,156,79,0,141,205,112,2,25,205,205,1,41,205,205,24,42,205,205,24,83,204,205,0,2,205,0,0,127,156,79,0,141,204,111,2,1,207,255,0,19,204,204,207,141,207,109,2,1,208,255,0,19,207,207,208,3,204,204,207,141,207,113,2,1,208,255,0,19,207,207,208,4,204,204,207,1,207,255,0,19,204,204,207,83,205,204,0,1,204,12,0,141,205,112,2,25,205,205,1,41,205,205,24,42,205,205,24,1,207,255,0,19,205,205,207,54,204,204,205,68,254,1,0,119,0,13,0,2,204,0,0,126,156,79,0,1,205,1,0,83,204,205,0,2,205,0,0,124,156,79,0,141,204,115,2,25,204,204,1,41,204,204,16,42,204,204,16,84,205,204,0,119,0,1,0,2,204,0,0,201,129,237,0,1,205,44,0,83,204,205,0,2,204,0,0,204,129,237,0,80,205,204,0,143,205,117,2,2,204,0,0,208,129,237,0,80,205,204,0,143,205,118,2,2,204,0,0,204,156,79,0,82,205,204,0,143,205,119,2,141,204,117,2,2,207,0,0,255,255,0,0,19,204,204,207,41,204,204,16,141,207,118,2,2,208,0,0,255,255,0,0,19,207,207,208,20,204,204,207,141,207,119,2,16,204,204,207,1,207,0,0,141,208,119,2,125,205,204,207,208,0,0,0,143,205,120,2,2,208,0,0,140,141,18,0,82,205,208,0,143,205,121,2,59,208,100,0,141,207,121,2,77,207,207,0,61,204,0,0,0,0,128,55,65,207,207,204,66,208,208,207,141,207,117,2,2,204,0,0,255,255,0,0,19,207,207,204,41,207,207,16,141,204,118,2,2,209,0,0,255,255,0,0,19,204,204,209,20,207,207,204,141,204,120,2,4,207,207,204,77,207,207,0,65,208,208,207,75,205,208,0,143,205,122,2,2,205,0,0,208,129,237,0,141,208,122,2,141,207,122,2,29,207,207,100,38,207,207,255,27,207,207,100,4,208,208,207,1,207,255,0,19,208,208,207,83,205,208,0,2,208,0,0,208,129,237,0,141,205,122,2,29,205,205,100,38,205,205,255,31,205,205,60,38,205,205,255,1,207,255,0,19,205,205,207,107,208,1,205,2,205,0,0,204,129,237,0,141,208,122,2,1,207,112,23,7,208,208,207,38,208,208,255,31,208,208,60,38,208,208,255,1,207,255,0,19,208,208,207,83,205,208,0,2,208,0,0,204,129,237,0,141,205,122,2,2,207,0,0,64,126,5,0,7,205,205,207,38,205,205,255,31,205,205,24,38,205,205,255,1,207,255,0,19,205,205,207,107,208,1,205,2,208,0,0,232,129,237,0,80,205,208,0,143,205,124,2,2,205,0,0,232,129,237,0,141,208,124,2,2,207,0,0,255,255,0,0,19,208,208,207,25,208,208,2,2,207,0,0,255,255,0,0,19,208,208,207,84,205,208,0,119,0,187,18,2,205,0,0,103,224,53,2,78,208,205,0,143,208,125,2,141,208,125,2,41,208,208,24,42,208,208,24,32,208,208,0,121,208,105,0,141,208,17,3,1,205,216,8,1,207,14,0,97,208,205,207,141,207,17,3,1,205,216,8,3,207,207,205,1,205,3,0,109,207,4,205,141,207,17,3,1,208,216,8,3,207,207,208,2,208,0,0,43,206,19,0,141,204,17,3,1,209,232,6,3,204,204,209,135,205,18,0,207,208,204,0,2,204,0,0,204,129,237,0,102,205,204,1,143,205,141,2,2,204,0,0,204,129,237,0,78,205,204,0,143,205,142,2,2,204,0,0,208,129,237,0,102,205,204,1,143,205,143,2,2,204,0,0,208,129,237,0,78,205,204,0,143,205,144,2,1,205,23,0,141,204,141,2,1,208,255,0,19,204,204,208,15,205,205,204,1,204,59,0,141,208,142,2,1,207,255,0,19,208,208,207,15,204,204,208,20,205,205,204,1,204,59,0,141,208,143,2,1,207,255,0,19,208,208,207,15,204,204,208,20,205,205,204,1,204,99,0,141,208,144,2,1,207,255,0,19,208,208,207,15,204,204,208,20,205,205,204,121,205,6,0,2,205,0,0,200,129,237,0,1,204,255,255,83,205,204,0,119,0,114,18,2,205,0,0,204,129,237,0,80,204,205,0,143,204,145,2,2,205,0,0,208,129,237,0,80,204,205,0,143,204,146,2,141,204,146,2,141,205,145,2,20,204,204,205,41,204,204,16,42,204,204,16,32,204,204,0,121,204,17,0,1,205,108,4,135,204,206,0,205,0,0,0,143,204,147,2,2,204,0,0,204,156,79,0,141,205,147,2,85,204,205,0,2,204,0,0,77,206,19,0,141,208,17,3,1,207,240,6,3,208,208,207,135,205,24,0,204,208,0,0,119,0,5,0,2,205,0,0,204,156,79,0,1,208,0,0,85,205,208,0,2,208,0,0,200,129,237,0,1,205,0,0,83,208,205,0,119,0,74,18,2,208,0,0,204,129,237,0,102,205,208,1,143,205,126,2,1,205,23,0,141,208,126,2,1,204,255,0,19,208,208,204,54,205,205,208,200,5,2,0,2,208,0,0,204,129,237,0,78,205,208,0,143,205,127,2,1,205,59,0,141,208,127,2,1,204,255,0,19,208,208,204,54,205,205,208,200,5,2,0,2,208,0,0,208,129,237,0,102,205,208,1,143,205,128,2,1,205,59,0,141,208,128,2,1,204,255,0,19,208,208,204,54,205,205,208,200,5,2,0,2,208,0,0,208,129,237,0,78,205,208,0,143,205,129,2,1,205,99,0,141,208,129,2,1,204,255,0,19,208,208,204,54,205,205,208,200,5,2,0,141,208,126,2,1,204,255,0,19,208,208,204,27,208,208,60,141,204,127,2,1,207,255,0,19,204,204,207,3,208,208,204,27,208,208,60,141,204,128,2,1,207,255,0,19,204,204,207,3,208,208,204,27,208,208,100,141,204,129,2,1,207,255,0,19,204,204,207,3,208,208,204,27,208,208,10,28,208,208,55,38,208,208,255,0,205,208,0,143,205,130,2,2,208,0,0,200,129,237,0,80,205,208,0,143,205,131,2,141,208,131,2,2,204,0,0,255,255,0,0,19,208,208,204,135,205,204,0,208,0,0,0,2,208,0,0,204,129,237,0,80,205,208,0,143,205,132,2,141,208,132,2,2,204,0,0,255,255,0,0,19,208,208,204,135,205,204,0,208,0,0,0,2,208,0,0,208,129,237,0,80,205,208,0,143,205,133,2,141,208,133,2,2,204,0,0,255,255,0,0,19,208,208,204,135,205,204,0,208,0,0,0,2,205,0,0,201,129,237,0,1,208,3,0,83,205,208,0,2,205,0,0,204,129,237,0,102,208,205,1,143,208,134,2,2,208,0,0,204,129,237,0,141,205,134,2,1,204,255,0,19,205,205,204,29,205,205,10,38,205,205,255,41,205,205,4,141,204,134,2,1,207,255,0,19,204,204,207,141,207,134,2,1,209,255,0,19,207,207,209,29,207,207,10,38,207,207,255,27,207,207,10,4,204,204,207,20,205,205,204,1,204,255,0,19,205,205,204,107,208,1,205,2,208,0,0,204,129,237,0,78,205,208,0,143,205,136,2,2,205,0,0,204,129,237,0,141,208,136,2,1,204,255,0,19,208,208,204,29,208,208,10,38,208,208,255,41,208,208,4,141,204,136,2,1,207,255,0,19,204,204,207,141,207,136,2,1,209,255,0,19,207,207,209,29,207,207,10,38,207,207,255,27,207,207,10,4,204,204,207,20,208,208,204,1,204,255,0,19,208,208,204,83,205,208,0,2,205,0,0,208,129,237,0,102,208,205,1,143,208,137,2,2,208,0,0,208,129,237,0,141,205,137,2,1,204,255,0,19,205,205,204,29,205,205,10,38,205,205,255,41,205,205,4,141,204,137,2,1,207,255,0,19,204,204,207,141,207,137,2,1,209,255,0,19,207,207,209,29,207,207,10,38,207,207,255,27,207,207,10,4,204,204,207,20,205,205,204,1,204,255,0,19,205,205,204,107,208,1,205,2,205,0,0,208,129,237,0,1,208,0,0,83,205,208,0,1,205,26,0,135,208,205,0,205,0,0,0,2,208,0,0,201,129,237,0,1,205,1,0,83,208,205,0,2,205,0,0,204,129,237,0,141,208,130,2,43,208,208,16,2,204,0,0,255,255,0,0,19,208,208,204,84,205,208,0,2,208,0,0,208,129,237,0,141,205,130,2,2,204,0,0,255,255,0,0,19,205,205,204,84,208,205,0,1,208,26,0,135,205,205,0,208,0,0,0,135,205,169,0,143,205,138,2,2,205,0,0,208,129,237,0,141,208,138,2,2,204,0,0,255,255,0,0,19,208,208,204,84,205,208,0,135,208,169,0,143,208,139,2,2,208,0,0,204,129,237,0,141,205,139,2,2,204,0,0,255,255,0,0,19,205,205,204,84,208,205,0,135,205,169,0,143,205,140,2,2,205,0,0,200,129,237,0,141,208,140,2,2,204,0,0,255,255,0,0,19,208,208,204,84,205,208,0,2,208,0,0,200,129,237,0,1,205,0,0,83,208,205,0,119,0,94,17,2,205,0,0,200,129,237,0,1,208,255,255,83,205,208,0,119,0,89,17,2,205,0,0,200,129,237,0,78,208,205,0,143,208,148,2,2,208,0,0,147,156,79,0,141,205,148,2,41,205,205,24,42,205,205,24,32,205,205,1,38,205,205,1,83,208,205,0,119,0,76,17,2,208,0,0,99,25,21,0,78,205,208,0,143,205,150,2,141,205,150,2,41,205,205,24,42,205,205,24,32,205,205,0,121,205,20,0,2,208,0,0,50,168,18,0,80,205,208,0,143,205,151,2,1,208,0,0,25,208,208,12,141,204,151,2,2,207,0,0,255,255,0,0,19,204,204,207,41,204,204,4,3,208,208,204,135,205,206,0,208,0,0,0,143,205,153,2,141,205,153,2,43,205,205,16,0,9,205,0,119,0,9,0,2,208,0,0,180,188,19,0,141,204,17,3,1,207,248,6,3,204,204,207,135,205,24,0,208,204,0,0,1,9,0,0,2,205,0,0,148,130,237,0,85,205,9,0,41,204,9,4,0,205,204,0,143,205,154,2,2,205,0,0,180,130,237,0,141,204,154,2,85,205,204,0,2,205,0,0,99,25,21,0,78,204,205,0,143,204,155,2,141,204,155,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,22,0,2,205,0,0,50,168,18,0,80,204,205,0,143,204,156,2,1,205,0,0,25,205,205,12,141,208,156,2,2,207,0,0,255,255,0,0,19,208,208,207,41,208,208,4,3,205,205,208,135,204,206,0,205,0,0,0,143,204,157,2,141,204,157,2,2,205,0,0,255,255,0,0,19,204,204,205,0,8,204,0,119,0,9,0,2,205,0,0,180,188,19,0,141,208,17,3,1,207,0,7,3,208,208,207,135,204,24,0,205,208,0,0,1,8,0,0,2,204,0,0,212,129,237,0,84,204,8,0,119,0,244,16,2,208,0,0,200,129,237,0,78,204,208,0,143,204,158,2,141,204,158,2,41,204,204,24,42,204,204,24,1,208,0,0,1,205,2,0,138,204,208,205,164,7,2,0,184,7,2,0,119,0,28,0,2,208,0,0,212,129,237,0,1,205,255,255,107,208,1,205,119,0,23,0,2,208,0,0,192,186,19,0,78,205,208,0,143,205,159,2,141,205,159,2,41,205,205,24,42,205,205,24,32,205,205,0,120,205,14,0,135,205,207,0,143,205,160,2,141,205,160,2,121,205,10,0,135,205,208,0,143,205,161,2,141,205,161,2,121,205,6,0,2,205,0,0], eb + 122880);
  HEAPU8.set([212,129,237,0,1,208,16,0,107,205,1,208,119,0,1,0,2,208,0,0,129,156,79,0,78,204,208,0,143,204,162,2,2,204,0,0,200,129,237,0,141,208,162,2,83,204,208,0,2,204,0,0,130,156,79,0,78,208,204,0,143,208,163,2,2,208,0,0,201,129,237,0,141,204,163,2,83,208,204,0,2,204,0,0,212,129,237,0,1,208,0,0,83,204,208,0,2,208,0,0,204,129,237,0,1,204,0,0,84,208,204,0,119,0,179,16,2,208,0,0,99,25,21,0,78,204,208,0,143,204,164,2,141,204,164,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,19,0,2,208,0,0,50,168,18,0,80,204,208,0,143,204,166,2,1,208,0,0,25,208,208,16,141,205,166,2,2,207,0,0,255,255,0,0,19,205,205,207,41,205,205,4,3,208,208,205,135,204,166,0,208,0,0,0,143,204,167,2,141,204,167,2,0,7,204,0,119,0,9,0,2,208,0,0,198,187,19,0,141,205,17,3,1,207,8,7,3,205,205,207,135,204,24,0,208,205,0,0,1,7,0,0,2,205,0,0,208,129,237,0,135,204,209,0,7,205,0,0,2,205,0,0,99,25,21,0,78,204,205,0,143,204,168,2,141,204,168,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,19,0,2,205,0,0,50,168,18,0,80,204,205,0,143,204,169,2,1,205,0,0,25,205,205,16,141,208,169,2,2,207,0,0,255,255,0,0,19,208,208,207,41,208,208,4,3,205,205,208,135,204,166,0,205,0,0,0,143,204,171,2,141,204,171,2,0,6,204,0,119,0,9,0,2,205,0,0,198,187,19,0,141,208,17,3,1,207,16,7,3,208,208,207,135,204,24,0,205,208,0,0,1,6,0,0,2,208,0,0,200,129,237,0,78,204,208,0,143,204,172,2,1,208,1,0,141,205,172,2,135,204,170,0,6,208,205,0,2,205,0,0,128,223,53,2,78,204,205,0,143,204,173,2,141,204,173,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,6,0,2,204,0,0,129,223,53,2,1,205,0,0,83,204,205,0,119,0,83,16,1,204,4,0,135,205,171,0,204,0,0,0,143,205,174,2,141,205,174,2,1,204,0,0,85,205,204,0,141,205,174,2,2,208,0,0,144,89,17,0,1,207,0,0,135,204,172,0,205,208,207,0,119,0,69,16,119,0,126,244,2,205,0,0,200,129,237,0,78,204,205,0,143,204,183,2,141,204,183,2,41,204,204,24,42,204,204,24,1,209,0,0,1,208,8,0,138,204,209,208,240,10,2,0,20,11,2,0,72,11,2,0,156,11,2,0,24,12,2,0,28,12,2,0,48,12,2,0,28,13,2,0,141,208,17,3,1,205,192,8,1,207,14,0,97,208,205,207,141,207,17,3,1,205,192,8,3,207,207,205,1,205,3,0,109,207,4,205,141,205,17,3,1,207,40,7,141,208,183,2,1,209,255,0,19,208,208,209,97,205,207,208,141,207,17,3,1,205,192,8,3,207,207,205,2,205,0,0,169,206,19,0,141,209,17,3,1,206,40,7,3,209,209,206,135,208,18,0,207,205,209,0,2,208,0,0,200,129,237,0,1,209,255,255,83,208,209,0,119,0,20,16,2,207,0,0,148,156,79,0,78,205,207,0,143,205,184,2,2,205,0,0,208,129,237,0,141,207,184,2,83,205,207,0,119,0,11,16,2,205,0,0,208,129,237,0,78,207,205,0,143,207,185,2,2,207,0,0,148,156,79,0,141,205,185,2,41,205,205,24,42,205,205,24,33,205,205,0,38,205,205,1,83,207,205,0,119,0,254,15,2,207,0,0,148,156,79,0,78,205,207,0,143,205,186,2,2,207,0,0,208,129,237,0,78,205,207,0,143,205,188,2,2,205,0,0,148,156,79,0,141,207,188,2,41,207,207,24,42,207,207,24,33,207,207,0,38,207,207,1,83,205,207,0,2,207,0,0,208,129,237,0,141,205,186,2,83,207,205,0,119,0,233,15,141,205,17,3,1,207,200,8,1,208,14,0,97,205,207,208,141,208,17,3,1,207,200,8,3,208,208,207,1,207,3,0,109,208,4,207,2,208,0,0,200,129,237,0,80,207,208,0,143,207,189,2,141,207,17,3,1,208,32,7,141,205,189,2,2,209,0,0,255,255,0,0,19,205,205,209,97,207,208,205,141,208,17,3,1,207,200,8,3,208,208,207,2,207,0,0,140,206,19,0,141,209,17,3,1,206,32,7,3,209,209,206,135,205,18,0,208,207,209,0,119,0,202,15,119,0,225,255,2,205,0,0,208,129,237,0,1,209,3,0,83,205,209,0,119,0,196,15,2,205,0,0,129,156,79,0,78,209,205,0,143,209,190,2,2,209,0,0,212,129,237,0,141,205,190,2,83,209,205,0,2,209,0,0,130,156,79,0,78,205,209,0,143,205,191,2,2,205,0,0,212,129,237,0,141,209,191,2,107,205,1,209,2,205,0,0,131,156,79,0,78,209,205,0,143,209,192,2,2,209,0,0,208,129,237,0,141,205,192,2,83,209,205,0,2,209,0,0,192,186,19,0,78,205,209,0,143,205,193,2,141,205,193,2,41,205,205,24,42,205,205,24,32,205,205,0,121,205,4,0,1,205,0,0,143,205,197,2,119,0,19,0,135,205,207,0,143,205,195,2,141,205,195,2,121,205,13,0,135,205,208,0,143,205,196,2,141,209,196,2,1,207,16,0,1,208,0,0,125,205,209,207,208,0,0,0,143,205,13,3,141,208,13,3,0,205,208,0,143,205,197,2,119,0,3,0,1,205,0,0,143,205,197,2,2,205,0,0,208,129,237,0,141,208,197,2,107,205,1,208,119,0,137,15,119,0,136,15,2,209,0,0,50,168,18,0,80,204,209,0,143,204,198,2,2,204,0,0,148,130,237,0,141,209,198,2,2,208,0,0,255,255,0,0,19,209,209,208,85,204,209,0,2,209,0,0,180,130,237,0,141,204,198,2,2,208,0,0,255,255,0,0,19,204,204,208,41,204,204,4,85,209,204,0,2,204,0,0,212,129,237,0,1,209,0,0,25,209,209,1,2,208,0,0,255,255,0,0,19,209,209,208,84,204,209,0,119,0,108,15,2,204,0,0,200,129,237,0,78,209,204,0,143,209,200,2,141,204,200,2,1,208,255,0,19,204,204,208,41,204,204,2,135,209,166,0,204,0,0,0,143,209,201,2,2,209,0,0,212,129,237,0,141,204,201,2,84,209,204,0,2,209,0,0,200,129,237,0,78,204,209,0,143,204,202,2,141,209,202,2,1,208,255,0,19,209,209,208,41,209,209,2,39,209,209,2,135,204,166,0,209,0,0,0,143,204,204,2,2,204,0,0,148,130,237,0,141,209,204,2,2,208,0,0,255,255,0,0,19,209,209,208,85,204,209,0,2,209,0,0,180,130,237,0,141,204,204,2,2,208,0,0,255,255,0,0,19,204,204,208,41,204,204,4,85,209,204,0,119,0,65,15,2,209,0,0,208,129,237,0,78,204,209,0,143,204,205,2,141,209,205,2,141,208,17,3,3,208,208,200,141,205,17,3,1,207,90,9,3,205,205,207,141,207,17,3,141,206,17,3,3,206,206,201,135,204,210,0,209,208,205,207,206,0,0,0,143,204,206,2,141,204,206,2,121,204,33,0,141,206,17,3,1,207,90,9,90,204,206,207,143,204,207,2,2,204,0,0,200,129,237,0,141,206,207,2,1,207,255,0,19,206,206,207,84,204,206,0,141,204,17,3,92,206,204,201,143,206,208,2,2,206,0,0,212,129,237,0,141,204,208,2,84,206,204,0,141,206,17,3,92,204,206,200,143,204,209,2,2,204,0,0,204,129,237,0,141,206,209,2,84,204,206,0,141,204,17,3,80,206,204,0,143,206,210,2,2,206,0,0,208,129,237,0,141,204,210,2,84,206,204,0,119,0,14,15,2,206,0,0,208,129,237,0,78,204,206,0,143,204,211,2,141,204,211,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,2,0,135,204,195,0,2,204,0,0,200,129,237,0,1,206,255,255,84,204,206,0,119,0,255,14,2,204,0,0,200,129,237,0,78,206,204,0,143,206,212,2,141,206,212,2,41,206,206,24,42,206,206,24,1,204,0,0,1,207,4,0,138,206,204,207,128,15,2,0,164,15,2,0,184,15,2,0,220,15,2,0,119,0,29,0,2,204,0,0,200,129,237,0,1,207,0,0,83,204,207,0,2,207,0,0,208,129,237,0,1,204,47,0,83,207,204,0,119,0,20,0,2,204,0,0,200,129,237,0,1,207,0,0,83,204,207,0,119,0,15,0,2,207,0,0,200,129,237,0,1,204,0,0,83,207,204,0,2,204,0,0,208,129,237,0,1,207,47,0,83,204,207,0,119,0,6,0,2,207,0,0,200,129,237,0,1,204,0,0,83,207,204,0,119,0,1,0,141,206,17,3,1,204,184,8,1,207,21,0,97,206,204,207,141,207,17,3,1,204,184,8,3,207,207,204,1,204,3,0,109,207,4,204,141,207,17,3,1,206,184,8,3,207,207,206,2,206,0,0,189,206,19,0,141,205,17,3,1,208,48,7,3,205,205,208,135,204,18,0,207,206,205,0,119,0,192,14,2,205,0,0,200,129,237,0,78,204,205,0,143,204,213,2,141,204,213,2,41,204,204,24,42,204,204,24,32,204,204,0,121,204,35,0,2,205,0,0,192,130,237,0,82,204,205,0,143,204,214,2,2,205,0,0,208,129,237,0,80,204,205,0,143,204,215,2,2,205,0,0,180,156,79,0,82,204,205,0,143,204,216,2,141,205,214,2,141,206,215,2,2,207,0,0,255,255,0,0,19,206,206,207,3,205,205,206,141,206,216,2,1,207,24,0,135,204,211,0,205,206,207,0,2,204,0,0,212,129,237,0,1,207,1,0,84,204,207,0,2,207,0,0,200,129,237,0,1,204,1,0,84,207,204,0,1,207,0,0,135,204,212,0,207,0,0,0,119,0,149,14,141,204,17,3,1,207,176,8,1,206,21,0,97,204,207,206,141,206,17,3,1,207,176,8,3,206,206,207,1,207,3,0,109,206,4,207,141,206,17,3,1,204,176,8,3,206,206,204,2,204,0,0,232,206,19,0,141,205,17,3,1,208,56,7,3,205,205,208,135,207,18,0,206,204,205,0,1,205,1,0,135,207,212,0,205,0,0,0,119,0,126,14,2,205,0,0,192,130,237,0,82,207,205,0,143,207,217,2,2,205,0,0,208,129,237,0,80,207,205,0,143,207,218,2,141,205,217,2,141,204,218,2,2,206,0,0,255,255,0,0,19,204,204,206,3,205,205,204,141,204,17,3,1,206,16,5,3,204,204,206,1,206,0,1,135,207,202,0,205,204,206,0,141,206,17,3,1,204,16,5,3,206,206,204,135,207,213,0,206,0,0,0,143,207,219,2,141,207,219,2,121,207,9,0,2,207,0,0,200,129,237,0,1,206,5,0,84,207,206,0,1,207,0,0,135,206,212,0,207,0,0,0,119,0,90,14,2,207,0,0,134,156,79,0,80,206,207,0,143,206,220,2,2,206,0,0,200,129,237,0,141,207,220,2,84,206,207,0,1,206,1,0,135,207,212,0,206,0,0,0,119,0,78,14,2,206,0,0,192,130,237,0,82,207,206,0,143,207,221,2,2,206,0,0,208,129,237,0,80,207,206,0,143,207,222,2,141,206,221,2,141,204,222,2,2,205,0,0,255,255,0,0,19,204,204,205,3,206,206,204,141,204,17,3,1,205,16,5,3,204,204,205,1,205,0,1,135,207,202,0,206,204,205,0,141,205,17,3,1,204,16,5,3,205,205,204,135,207,214,0,205,0,0,0,143,207,224,2,141,207,224,2,121,207,9,0,2,207,0,0,200,129,237,0,1,205,5,0,84,207,205,0,1,207,0,0,135,205,212,0,207,0,0,0,119,0,42,14,2,207,0,0,134,156,79,0,80,205,207,0,143,205,225,2,2,205,0,0,200,129,237,0,141,207,225,2,84,205,207,0,1,205,1,0,135,207,212,0,205,0,0,0,141,207,17,3,1,205,168,8,1,204,21,0,97,207,205,204,141,204,17,3,1,205,168,8,3,204,204,205,1,205,1,0,109,204,4,205,2,204,0,0,134,156,79,0,80,205,204,0,143,205,226,2,141,205,17,3,1,204,64,7,141,207,17,3,1,206,16,5,3,207,207,206,97,205,204,207,141,207,17,3,1,204,64,7,3,207,207,204,141,204,226,2,2,205,0,0,255,255,0,0,19,204,204,205,109,207,4,204,141,207,17,3,1,205,168,8,3,207,207,205,2,205,0,0,15,207,19,0,141,206,17,3,1,208,64,7,3,206,206,208,135,204,18,0,207,205,206,0,119,0,249,13,2,206,0,0,192,130,237,0,82,204,206,0,143,204,227,2,2,206,0,0,208,129,237,0,80,204,206,0,143,204,228,2,141,206,227,2,141,205,228,2,2,207,0,0,255,255,0,0,19,205,205,207,3,206,206,205,141,205,17,3,1,207,16,5,3,205,205,207,1,207,0,1,135,204,202,0,206,205,207,0,141,207,17,3,1,205,16,5,3,207,207,205,135,204,215,0,207,0,0,0,143,204,229,2,141,204,229,2,121,204,9,0,2,204,0,0,200,129,237,0,1,207,0,0,84,204,207,0,1,204,0,0,135,207,212,0,204,0,0,0,119,0,213,13,2,204,0,0,134,156,79,0,80,207,204,0,143,207,230,2,2,207,0,0,200,129,237,0,141,204,230,2,84,207,204,0,1,207,1,0,135,204,212,0,207,0,0,0,119,0,201,13,2,207,0,0,199,186,19,0,78,204,207,0,143,204,231,2,2,207,0,0,192,130,237,0,82,204,207,0,143,204,232,2,2,207,0,0,208,129,237,0,80,204,207,0,143,204,233,2,141,207,232,2,141,205,233,2,2,206,0,0,255,255,0,0,19,205,205,206,3,207,207,205,141,205,17,3,1,206,16,5,3,205,205,206,1,206,0,1,135,204,202,0,207,205,206,0,2,206,0,0,204,129,237,0,80,204,206,0,143,204,234,2,141,206,17,3,1,205,16,5,3,206,206,205,141,205,234,2,2,207,0,0,200,129,237,0,135,204,216,0,206,205,207,0,143,204,235,2,141,204,235,2,121,204,5,0,1,207,0,0,135,204,212,0,207,0,0,0,119,0,12,0,2,207,0,0,134,156,79,0,80,204,207,0,143,204,236,2,2,204,0,0,200,129,237,0,141,207,236,2,84,204,207,0,1,204,1,0,135,207,212,0,204,0,0,0,2,204,0,0,120,90,17,0,82,207,204,0,143,207,237,2,141,207,237,2,32,207,207,0,121,207,8,0,141,207,231,2,41,207,207,24,42,207,207,24,33,11,207,0,1,207,189,1,143,207,16,3,119,0,133,13,2,204,0,0,188,243,223,0,82,207,204,0,143,207,238,2,2,204,0,0,72,149,18,0,82,207,204,0,143,207,239,2,2,204,0,0,68,149,18,0,82,207,204,0,143,207,240,2,2,204,0,0,252,130,237,0,82,207,204,0,143,207,242,2,141,204,239,2,141,205,240,2,4,204,204,205,141,205,242,2,4,207,204,205,76,207,207,0,145,207,207,0,144,207,243,2,141,205,239,2,76,205,205,0,145,207,205,0,144,207,244,2,142,205,243,2,142,204,244,2,66,207,205,204,145,207,207,0,144,207,245,2,135,207,217,0,135,207,218,0,2,204,0,0,188,243,223,0,82,207,204,0,143,207,247,2,2,204,0,0,72,149,18,0,82,207,204,0,143,207,248,2,2,204,0,0,68,149,18,0,82,207,204,0,143,207,249,2,2,204,0,0,252,130,237,0,82,207,204,0,143,207,250,2,141,204,248,2,141,205,249,2,4,204,204,205,141,205,250,2,4,207,204,205,76,207,207,0,145,207,207,0,144,207,251,2,141,205,248,2,76,205,205,0,145,207,205,0,144,207,252,2,142,205,251,2,142,204,252,2,66,207,205,204,145,207,207,0,144,207,253,2,141,207,247,2,77,207,207,0,142,204,253,2,63,207,207,204,59,204,0,8,141,205,237,2,76,205,205,0,66,204,204,205,59,205,232,3,65,204,204,205,141,205,238,2,77,205,205,0,142,206,245,2,63,205,205,206,63,204,204,205,71,207,207,204,120,207,206,255,141,207,231,2,41,207,207,24,42,207,207,24,33,11,207,0,1,207,189,1,143,207,16,3,119,0,41,13,2,204,0,0,199,186,19,0,78,207,204,0,143,207,254,2,2,204,0,0,192,130,237,0,82,207,204,0,143,207,255,2,2,204,0,0,208,129,237,0,80,207,204,0,143,207,0,3,141,204,255,2,141,205,0,3,2,206,0,0,255,255,0,0,19,205,205,206,3,204,204,205,141,205,17,3,1,206,16,5,3,205,205,206,1,206,0,1,135,207,202,0,204,205,206,0,2,206,0,0,200,129,237,0,78,207,206,0,143,207,1,3,141,206,17,3,1,205,16,5,3,206,206,205,141,205,1,3,2,204,0,0,200,129,237,0,135,207,219,0,206,205,204,0,143,207,2,3,141,207,2,3,121,207,5,0,1,204,0,0,135,207,212,0,204,0,0,0,119,0,12,0,2,204,0,0,134,156,79,0,80,207,204,0,143,207,3,3,2,207,0,0,200,129,237,0,141,204,3,3,84,207,204,0,1,207,1,0,135,204,212,0,207,0,0,0,2,207,0,0,120,90,17,0,82,204,207,0,143,204,4,3,141,204,4,3,32,204,204,0,121,204,8,0,141,204,254,2,41,204,204,24,42,204,204,24,33,11,204,0,1,204,189,1,143,204,16,3,119,0,229,12,2,207,0,0,188,243,223,0,82,204,207,0,143,204,5,3,2,207,0,0,72,149,18,0,82,204,207,0,143,204,6,3,2,207,0,0,68,149,18,0,82,204,207,0,143,204,7,3,2,204,0,0,252,130,237,0,82,32,204,0,141,204,6,3,141,207,7,3,4,204,204,207,4,33,204,32,76,204,33,0,145,33,204,0,141,204,6,3,76,204,204,0,145,34,204,0,66,35,33,34,145,35,35,0,135,204,217,0,135,204,218,0,2,204,0,0,188,243,223,0,82,36,204,0,2,204,0,0,72,149,18,0,82,37,204,0,2,204,0,0,68,149,18,0,82,38,204,0,2,204,0,0,252,130,237,0,82,39,204,0,4,204,37,38,4,40,204,39,76,204,40,0,145,40,204,0,76,204,37,0,145,41,204,0,66,42,40,41,145,42,42,0,77,204,36,0,63,204,204,42,59,207,0,4,141,205,4,3,76,205,205,0,66,207,207,205,59,205,232,3,65,207,207,205,141,205,5,3,77,205,205,0,63,205,205,35,63,207,207,205,71,204,204,207,120,204,222,255,141,204,254,2,41,204,204,24,42,204,204,24,33,11,204,0,1,204,189,1,143,204,16,3,119,0,160,12,2,204,0,0,199,186,19,0,78,43,204,0,2,204,0,0,212,129,237,0,80,44,204,0,135,45,220,0,44,0,0,0,121,45,5,0,1,207,0,0,135,204,212,0,207,0,0,0,119,0,10,0,2,204,0,0,134,156,79,0,80,46,204,0,2,204,0,0,200,129,237,0,84,204,46,0,1,207,1,0,135,204,212,0,207,0,0,0,2,204,0,0,120,90,17,0,82,47,204,0,32,204,47,0,121,204,7,0,41,204,43,24,42,204,204,24,33,11,204,0,1,204,189,1,143,204,16,3,119,0,127,12,2,204,0,0,188,243,223,0,82,49,204,0,2,204,0,0,72,149,18,0,82,50,204,0,2,204,0,0,68,149,18,0,82,51,204,0,2,204,0,0,252,130,237,0,82,52,204,0,4,204,50,51,4,53,204,52,76,204,53,0,145,53,204,0,76,204,50,0,145,55,204,0,66,56,53,55,145,56,56,0,135,204,217,0,135,204,218,0,2,204,0,0,188,243,223,0,82,57,204,0,2,204,0,0,72,149,18,0,82,58,204,0,2,204,0,0,68,149,18,0,82,59,204,0,2,204,0,0,252,130,237,0,82,61,204,0,4,204,58,59,4,62,204,61,76,204,62,0,145,62,204,0,76,204,58,0,145,63,204,0,66,64,62,63,145,64,64,0,77,204,57,0,63,204,204,64,59,207,0,2,76,205,47,0,66,207,207,205,59,205,232,3,65,207,207,205,77,205,49,0,63,205,205,56,63,207,207,205,71,204,204,207,120,204,224,255,41,204,43,24,42,204,204,24,33,11,204,0,1,204,189,1,143,204,16,3,119,0,67,12,2,204,0,0,199,186,19,0,78,65,204,0,2,204,0,0,204,129,237,0,80,66,204,0,141,204,17,3,96,204,200,66,2,204,0,0,208,129,237,0,80,67,204,0,2,204,0,0,255,255,0,0,2,207,0,0,255,255,0,0,19,207,67,207,2,205,0,0,255,255,0,0,19,205,66,205,3,207,207,205,48,204,204,207,144,27,2,0,2,204,0,0,255,255,0,0,19,204,67,204,38,204,204,15,32,204,204,0,120,204,60,0,2,205,0,0,255,255,0,0,19,205,66,205,1,206,0,0,2,208,0,0,255,255,0,0,19,208,67,208,38,208,208,15,4,206,206,208,2,208,0,0,255,255,0,0,19,206,206,208,48,205,205,206,228,26,2,0,0,207,66,0,119,0,11,0,1,205,0,0,2,206,0,0,255,255,0,0,19,206,67,206,38,206,206,15,4,205,205,206,2,206,0,0,255,255,0,0,19,205,205,206,0,207,205,0,0,204,207,0,143,204,10,3,141,204,17,3,1,207,72,7,2,205,0,0,255,255,0,0,19,205,67,205,97,204,207,205,141,205,17,3,1,207,72,7,3,205,205,207,2,207,0,0,255,255,0,0,19,207,66,207,109,205,4,207,141,207,17,3,1,205,72,7,3,207,207,205,141,205,10,3,2,204,0,0,255,255,0,0,19,205,205,204,109,207,8,205,2,207,0,0,53,207,19,0,141,204,17,3,1,206,72,7,3,204,204,206,135,205,24,0,207,204,0,0,141,205,17,3,141,204,10,3,96,205,200,204,2,204,0,0,149,156,79,0,1,205,1,0,83,204,205,0,2,205,0,0,212,129,237,0,80,69,205,0,2,205,0,0,32,161,22,0,141,204,17,3,3,204,204,200,135,70,173,0,69,205,204,0,121,70,29,0,2,204,0,0,192,130,237,0,82,71,204,0,2,204,0,0,208,129,237,0,80,72,204,0,141,204,17,3,92,73,204,200,2,205,0,0,255,255,0,0,19,205,72,205,3,205,71,205,2,207,0,0,32,161,22,0,2,206,0,0,255,255,0,0,19,206,73,206,135,204,211,0,205,207,206,0,141,204,17,3,92,74,204,200,2,204,0,0,200,129,237,0,84,204,74,0,1,206,0,0,135,204,212,0,206,0,0,0,119,0,10,0,2,204,0,0,134,156,79,0,80,75,204,0,2,204,0,0,200,129,237,0,84,204,75,0,1,206,1,0,135,204,212,0,206,0,0,0,2,204,0,0,120,90,17,0,82,76,204,0,32,204,76,0,120,204,62,0,2,204,0,0,200,129,237,0,80,77,204,0,2,204,0,0,188,243,223,0,82,79,204,0,2,204,0,0,72,149,18,0,82,80,204,0,2,204,0,0,68,149,18,0,82,81,204,0,2,204,0,0,252,130,237,0,82,82,204,0,4,204,80,81,4,83,204,82,76,204,83,0,145,83,204,0,76,204,80,0,145,84,204,0,66,85,83,84,145,85,85,0,135,204,217,0,135,204,218,0,2,204,0,0,188,243,223,0,82,86,204,0,2,204,0,0,72,149,18,0,82,87,204,0,2,204,0,0,68,149,18,0,82,88,204,0,2,204,0,0,252,130,237,0,82,89,204,0,4,204,87,88,4,91,204,89,76,204,91,0,145,91,204,0,76,204,87,0,145,92,204,0,66,93,91,92,145,93,93,0,77,204,86,0,63,204,204,93,2,206,0,0,255,255,0,0,19,206,77,206,76,206,206,0,76,207,76,0,66,206,206,207,59,207,232,3,65,206,206,207,77,207,79,0,63,207,207,85,63,206,206,207,71,204,204,206,120,204,221,255,119,0,1,0,2,204,0,0,149,156,79,0,1,206,0,0,83,204,206,0,41,206,65,24,42,206,206,24,32,206,206,0,120,206,111,11,1,206,190,1,143,206,16,3,119,0,108,11,2,206,0,0,199,186,19,0,78,94,206,0,2,206,0,0,204,129,237,0,80,95,206,0,141,206,17,3,96,206,200,95,2,206,0,0,208,129,237,0,80,97,206,0,2,206,0,0,255,255,0,0,2,204,0,0,255,255,0,0,19,204,97,204,2,207,0,0,255,255,0,0,19,207,95,207,3,204,204,207,48,206,206,204,68,31,2,0,2,206,0,0,255,255,0,0,19,206,97,206,38,206,206,15,32,206,206,0,121,206,10,0,2,206,0,0,255,255,0,0,19,206,95,206,0,22,206,0,2,206,0,0,255,255,0,0,19,206,97,206,0,23,206,0,119,0,81,0,2,207,0,0,255,255,0,0,19,207,95,207,1,205,0,0,2,208,0,0,255,255,0,0,19,208,97,208,38,208,208,15,4,205,205,208,2,208,0,0,255,255,0,0,19,205,205,208,48,207,207,205,100,30,2,0,0,204,95,0,119,0,11,0,1,207,0,0,2,205,0,0,255,255,0,0,19,205,97,205,38,205,205,15,4,207,207,205,2,205,0,0,255,255,0,0,19,207,207,205,0,204,207,0,0,206,204,0,143,206,11,3,141,206,17,3,1,204,88,7,2,207,0,0,255,255,0,0,19,207,97,207,97,206,204,207,141,207,17,3,1,204,88,7,3,207,207,204,2,204,0,0,255,255,0,0,19,204,95,204,109,207,4,204,141,204,17,3,1,207,88,7,3,204,204,207,141,207,11,3,2,206,0,0,255,255,0,0,19,207,207,206,109,204,8,207,2,204,0,0,127,207,19,0,141,206,17,3,1,205,88,7,3,206,206,205,135,207,24,0,204,206,0,0,141,207,17,3,141,206,11,3,96,207,200,206,2,206,0,0,208,129,237,0,80,25,206,0,141,206,11,3,2,207,0,0,255,255,0,0,19,206,206,207,0,22,206,0,2,206,0,0,255,255,0,0,19,206,25,206,0,23,206,0,119,0,9,0,2,206,0,0,255,255,0,0,19,206,95,206,0,22,206,0,2,206,0,0,255,255,0,0,19,206,97,206,0,23,206,0,2,206,0,0,192,130,237,0,82,99,206,0,3,100,99,23,2,207,0,0,32,161,22,0,135,206,221,0,100,207,22,0,2,206,0,0,212,129,237,0,80,101,206,0,2,206,0,0,32,161,22,0,141,207,17,3,3,207,207,200,135,102,174,0,101,206,207,0,121,102,10,0,141,207,17,3,92,103,207,200,2,207,0,0,200,129,237,0,84,207,103,0,1,206,0,0,135,207,212,0,206,0,0,0,119,0,10,0,2,207,0,0,134,156,79,0,80,104,207,0,2,207,0,0,200,129,237,0,84,207,104,0,1,206,1,0,135,207,212,0,206,0,0,0,2,207,0,0,120,90,17,0,82,105,207,0,32,207,105,0,120,207,62,0,2,207,0,0,200,129,237,0,80,107,207,0,2,207,0,0,188,243,223,0,82,108,207,0,2,207,0,0,72,149,18,0,82,109,207,0,2,207,0,0,68,149,18,0,82,110,207,0,2,207,0,0,252,130,237,0,82,111,207,0,4,207,109,110,4,112,207,111,76,207,112,0,145,112,207,0,76,207,109,0,145,113,207,0,66,114,112,113,145,114,114,0,135,207,217,0,135,207,218,0,2,207,0,0,188,243,223,0,82,115,207,0,2,207,0,0,72,149,18,0,82,116,207,0,2,207,0,0,68,149,18,0,82,117,207,0,2,207,0,0,252,130,237,0,82,118,207,0,4,207,116,117,4,119,207,118,76,207,119,0,145,119,207,0,76,207,116,0,145,120,207,0,66,121,119,120,145,121,121,0,77,207,115,0,63,207,207,121,2,206,0,0,255,255,0,0,19,206,107,206,76,206,206,0,76,204,105,0,66,206,206,204,59,204,232,3,65,206,206,204,77,204,108,0,63,204,204,114,63,206,206,204,71,207,207,206,120,207,221,255,119,0,1,0,41,207,94,24,42,207,207,24,32,207,207,0,120,207,141,10,1,207,190,1,143,207,16,3,119,0,138,10,2,207,0,0,199,186,19,0,78,122,207,0,2,207,0,0,192,130,237,0,82,123,207,0,2,207,0,0,208,129,237,0,80,124,207,0,2,206,0,0,255,255,0,0,19,206,124,206,3,206,123,206,141,204,17,3,1,205,16,5,3,204,204,205,1,205,0,1,135,207,202,0,206,204,205,0,141,207,17,3,1,205,16,5,3,207,207,205,135,125,222,0,207,0,0,0,121,125,5,0,1,205,0,0,135,207,212,0,205,0,0,0,119,0,10,0,2,207,0,0,134,156,79,0,80,126,207,0,2,207,0,0,200,129,237,0,84,207,126,0,1,205,1,0,135,207,212,0,205,0,0,0,2,207,0,0,120,90,17,0,82,127,207,0,32,207,127,0,121,207,7,0,41,207,122,24,42,207,207,24,33,11,207,0,1,207,189,1,143,207,16,3,119,0,89,10,2,207,0,0,188,243,223,0,82,129,207,0,2,207,0,0,72,149,18,0,82,130,207,0,2,207,0,0,68,149,18,0,82,131,207,0,2,207,0,0,252,130,237,0,82,132,207,0,4,207,130,131,4,134,207,132,76,207,134,0,145,134,207,0,76,207,130,0,145,135,207,0,66,136,134,135,145,136,136,0,135,207,217,0,135,207,218,0,2,207,0,0,188,243,223,0,82,137,207,0,2,207,0,0,72,149,18,0,82,138,207,0,2,207,0,0,68,149,18,0,82,140,207,0,2,207,0,0,252,130,237,0,82,141,207,0,4,207,138,140,4,142,207,141,76,207,142,0,145,142,207,0,76,207,138,0,145,143,207,0,66,144,142,143,145,144,144,0,77,207,137,0,63,207,207,144,59,205,0,4,76,204,127,0,66,205,205,204,59,204,232,3,65,205,205,204,77,204,129,0,63,204,204,136,63,205,205,204,71,207,207,205,120,207,224,255,41,207,122,24,42,207,207,24,33,11,207,0,1,207,189,1,143,207,16,3,119,0,29,10,2,207,0,0,199,186,19,0,78,146,207,0,2,207,0,0,204,129,237,0,80,147,207,0,2,207,0,0,208,129,237,0,80,148,207,0,141,207,17,3,2,205,0,0,255,255,0,0,19,205,147,205,41,205,205,16,2,204,0,0,255,255,0,0,19,204,148,204,20,205,205,204,97,207,200,205,2,205,0,0,212,129,237,0,80,149,205,0,2,205,0,0,200,129,237,0,78,150,205,0,141,205,17,3,3,205,205,200,1,207,255,0,19,207,150,207,135,152,223,0,149,205,207,0,121,152,20,0,141,207,17,3,94,153,207,200,2,207,0,0,208,129,237,0,43,205,153,16,2,204,0,0,255,255,0,0,19,205,205,204,84,207,205,0,2,205,0,0,200,129,237,0,2,207,0,0,255,255,0,0,19,207,153,207,84,205,207,0,1,205,0,0,135,207,212,0,205,0,0,0,119,0,10,0,2,207,0,0,134,156,79,0,80,154,207,0,2,207,0,0,200,129,237,0,84,207,154,0,1,205,1,0,135,207,212,0,205,0,0,0,2,207,0,0,120,90,17,0,82,155,207,0,32,207,155,0,120,207,56,0,2,207,0,0,188,243,223,0,82,156,207,0,2,207,0,0,72,149,18,0,82,157,207,0,2,207,0,0,68,149,18,0,82,158,207,0,2,207,0,0,252,130,237,0,82,159,207,0,4,207,157,158,4,160,207,159,76,207,160,0,145,160,207,0,76,207,157,0,145,161,207,0,66,163,160,161,145,163,163,0,135,207,217,0,135,207,218,0,2,207,0,0,188,243,223,0,82,164,207,0,2,207,0,0,72,149,18,0,82,165,207,0,2,207,0,0,68,149,18,0,82,166,207,0,2,207,0,0,252,130,237,0,82,168,207,0,4,207,165,166,4,169,207,168,76,207,169,0,145,169,207,0,76,207,165,0,145,170,207,0,66,171,169,170,145,171,171,0,77,207,164,0,63,207,207,171,59,205,32,0,76,204,155,0,66,205,205,204,59,204,232,3,65,205,205,204,77,204,156,0,63,204,204,163,63,205,205,204,71,207,207,205,120,207,224,255,119,0,1,0,41,207,146,24,42,207,207,24,32,207,207,0,120,207,161,9,1,207,190,1,143,207,16,3,119,0,158,9,2,207,0,0,199,186,19,0,78,172,207,0,2,207,0,0,192,130,237,0,82,174,207,0,2,207,0,0,208,129,237,0,80,175,207,0,2,205,0,0,255,255,0,0,19,205,175,205,3,205,174,205,141,204,17,3,1,206,16,5,3,204,204,206,1,206,0,1,135,207,202,0,205,204,206,0,2,207,0,0,200,129,237,0,78,176,207,0,41,207,176,24,42,207,207,24,1,205,0,0,1,208,2,0,138,207,205,208,212,37,2,0,120,38,2,0,141,208,17,3,1,204,152,8,1,206,21,0,97,208,204,206,141,206,17,3,1,204,152,8,3,206,206,204,1,204,3,0,109,206,4,204,141,204,17,3,1,206,112,7,1,208,255,0,19,208,176,208,97,204,206,208,141,206,17,3,1,204,152,8,3,206,206,204,2,204,0,0,247,207,19,0,141,205,17,3,1,209,112,7,3,205,205,209,135,208,18,0,206,204,205,0,2,208,0,0,200,129,237,0,1,205,1,0,84,208,205,0,1,208,1,0,135,205,212,0,208,0,0,0,41,205,172,24,42,205,205,24,33,205,205,0,121,205,94,9,1,205,190,1,143,205,16,3,119,0,91,9,2,206,0,0,204,129,237,0,80,177,206,0,141,206,17,3,96,206,200,177,141,206,17,3,1,204,16,5,3,206,206,204,141,204,17,3,3,204,204,200,135,178,224,0,206,204,0,0,121,178,13,0,141,204,17,3,92,179,204,200,2,204,0,0,204,129,237,0,84,204,179,0,2,204,0,0,200,129,237,0,84,204,179,0,1,206,0,0,135,204,212,0,206,0,0,0,119,0,10,0,1,206,1,0,135,204,212,0,206,0,0,0,2,204,0,0,134,156,79,0,80,180,204,0,2,204,0,0,200,129,237,0,84,204,180,0,41,204,172,24,42,204,204,24,33,204,204,0,121,204,53,9,1,204,190,1,143,204,16,3,119,0,50,9,141,204,17,3,1,206,160,8,1,205,21,0,97,204,206,205,141,205,17,3,1,206,160,8,3,205,205,206,1,206,3,0,109,205,4,206,141,206,17,3,1,205,104,7,141,204,17,3,1,208,16,5,3,204,204,208,97,206,205,204,141,205,17,3,1,206,160,8,3,205,205,206,2,206,0,0,202,207,19,0,141,208,17,3,1,209,104,7,3,208,208,209,135,204,18,0,205,206,208,0,2,204,0,0,204,129,237,0,80,182,204,0,141,204,17,3,1,208,16,5,3,204,204,208,135,183,225,0,204,182,0,0,121,183,15,0,2,204,0,0,200,129,237,0,1,208,2,2,84,204,208,0,1,204,0,0,135,208,212,0,204,0,0,0,41,208,172,24,42,208,208,24,33,208,208,0,121,208,5,9,1,208,190,1,143,208,16,3,119,0,2,9,1,204,1,0,135,208,212,0,204,0,0,0,2,208,0,0,134,156,79,0,80,184,208,0,2,208,0,0,200,129,237,0,84,208,184,0,41,208,172,24,42,208,208,24,33,208,208,0,121,208,245,8,1,208,190,1,143,208,16,3,119,0,242,8,135,185,226,0,121,185,5,0,1,205,0,0,135,207,212,0,205,0,0,0,119,0,236,8,2,207,0,0,134,156,79,0,80,186,207,0,2,207,0,0,200,129,237,0,84,207,186,0,1,205,1,0,135,207,212,0,205,0,0,0,119,0,226,8,2,207,0,0,212,129,237,0,80,187,207,0,2,207,0,0,200,129,237,0,135,188,227,0,187,207,0,0,121,188,5,0,1,205,0,0,135,207,212,0,205,0,0,0,119,0,214,8,2,207,0,0,134,156,79,0,80,189,207,0,2,207,0,0,200,129,237,0,84,207,189,0,1,205,1,0,135,207,212,0,205,0,0,0,119,0,204,8,2,207,0,0,212,129,237,0,80,190,207,0,2,207,0,0,204,129,237,0,80,191,207,0,135,192,228,0,190,191,0,0,121,192,11,0,2,207,0,0,204,129,237,0,80,193,207,0,2,207,0,0,200,129,237,0,84,207,193,0,1,205,0,0,135,207,212,0,205,0,0,0,119,0,185,8,2,207,0,0,134,156,79,0,80,194,207,0,2,207,0,0,200,129,237,0,84,207,194,0,1,205,1,0,135,207,212,0,205,0,0,0,119,0,175,8,2,207,0,0,208,129,237,0,78,195,207,0,141,207,17,3,1,205,16,5,3,207,207,205,135,196,229,0,195,207,0,0,121,196,30,0,2,207,0,0,192,130,237,0,82,197,207,0,2,207,0,0,224,129,237,0,80,198,207,0,141,207,17,3,1,205,16,5,3,207,207,205,135,199,41,0,207,0,0,0,2,205,0,0,255,255,0,0,19,205,198,205,3,205,197,205,141,208,17,3,1,204,16,5,3,208,208,204,25,204,199,1,135,207,211,0,205,208,204,0,2,207,0,0,200,129,237,0,1,204,0,1,84,207,204,0,1,207,0,0,135,204,212,0,207,0,0,0,119,0,137,8,2,207,0,0,134,156,79,0,80,204,207,0,143,204,0,1,2,204,0,0,200,129,237,0,141,207,0,1,84,204,207,0,1,204,1,0,135,207,212,0,204,0,0,0,119,0,125,8,2,204,0,0,212,129,237,0,80,207,204,0,143,207,1,1,141,207,17,3,141,204,1,1,96,207,200,204,141,207,17,3,141,208,17,3,3,208,208,200,135,204,230,0,207,208,0,0,143,204,2,1,141,204,2,1,121,204,12,0,141,208,17,3,80,204,208,0,143,204,3,1,2,204,0,0,200,129,237,0,141,208,3,1,84,204,208,0,1,204,0,0,135,208,212,0,204,0,0,0,119,0,99,8,2,204,0,0,134,156,79,0,80,208,204,0,143,208,4,1,2,208,0,0,200,129,237,0,141,204,4,1,84,208,204,0,141,208,17,3,92,204,208,200,143,204,5,1,2,204,0,0,212,129,237,0,141,208,5,1,84,204,208,0,1,204,1,0,135,208,212,0,204,0,0,0,119,0,80,8,2,204,0,0,148,130,237,0,82,208,204,0,143,208,6,1,141,204,6,1,2,207,0,0,255,255,0,0,19,204,204,207,135,208,231,0,204,0,0,0,143,208,8,1,141,208,8,1,121,208,5,0,1,204,0,0,135,208,212,0,204,0,0,0,119,0,63,8,2,204,0,0,134,156,79,0,80,208,204,0,143,208,9,1,2,208,0,0,200,129,237,0,141,204,9,1,84,208,204,0,1,208,1,0,135,204,212,0,208,0,0,0,119,0,51,8,2,208,0,0,212,129,237,0,80,204,208,0,143,204,10,1,141,204,17,3,141,208,10,1,96,204,200,208,2,204,0,0,148,130,237,0,82,208,204,0,143,208,11,1,141,204,11,1,2,207,0,0,255,255,0,0,19,204,204,207,141,207,17,3,3,207,207,200,135,208,209,0,204,207,0,0,143,208,12,1,141,208,12,1,121,208,16,0,2,207,0,0,148,130,237,0,82,208,207,0,143,208,13,1,2,208,0,0,200,129,237,0,141,207,13,1,2,204,0,0,255,255,0,0,19,207,207,204,84,208,207,0,1,208,0,0,135,207,212,0,208,0,0,0,119,0,14,8,2,208,0,0,134,156,79,0,80,207,208,0,143,207,14,1,2,207,0,0,200,129,237,0,141,208,14,1,84,207,208,0,141,207,17,3,92,208,207,200,143,208,15,1,2,208,0,0,212,129,237,0,141,207,15,1,84,208,207,0,1,208,1,0,135,207,212,0,208,0,0,0,119,0,251,7,2,208,0,0,192,130,237,0,82,207,208,0,143,207,16,1,2,208,0,0,208,129,237,0,80,207,208,0,143,207,17,1,141,208,16,1,141,204,17,1,2,205,0,0,255,255,0,0,19,204,204,205,3,208,208,204,141,204,17,3,1,205,16,5,3,204,204,205,1,205,0,1,135,207,202,0,208,204,205,0,141,207,17,3,1,205,144,8,1,204,13,0,97,207,205,204,141,204,17,3,1,205,144,8,3,204,204,205,1,205,1,0,109,204,4,205,2,204,0,0,200,129,237,0,78,205,204,0,143,205,18,1,141,205,17,3,1,204,120,7,141,207,17,3,1,208,16,5,3,207,207,208,97,205,204,207,141,207,17,3,1,204,120,7,3,207,207,204,141,204,18,1,1,205,255,0,19,204,204,205,109,207,4,204,141,207,17,3,1,205,144,8,3,207,207,205,2,205,0,0,24,208,19,0,141,208,17,3,1,206,120,7,3,208,208,206,135,204,18,0,207,205,208,0,2,208,0,0,180,130,237,0,82,204,208,0,143,204,19,1,2,208,0,0,212,129,237,0,80,204,208,0,143,204,20,1,2,208,0,0,200,129,237,0,78,204,208,0,143,204,22,1,141,208,17,3,1,205,16,5,3,208,208,205,141,205,19,1,141,207,20,1,2,206,0,0,255,255,0,0,19,207,207,206,3,205,205,207,141,207,22,1,135,204,232,0,208,205,207,0,143,204,23,1,141,204,23,1,120,204,12,0,2,207,0,0,134,156,79,0,80,204,207,0,143,204,24,1,2,204,0,0,200,129,237,0,141,207,24,1,84,204,207,0,1,204,1,0,135,207,212,0,204,0,0,0,2,207,0,0,129,223,53,2,1,204,1,0,83,207,204,0,119,0,152,7,2,207,0,0,99,25,21,0,78,204,207,0,143,204,25,1,141,204,25,1,41,204,204,24,42,204,204,24,32,204,204,0,121,204,19,0,2,207,0,0,50,168,18,0,80,204,207,0,143,204,26,1,1,207,0,0,25,207,207,16,141,205,26,1,2,208,0,0,255,255,0,0,19,205,205,208,41,205,205,4,3,207,207,205,135,204,166,0,207,0,0,0,143,204,28,1,141,204,28,1,0,5,204,0,119,0,9,0,2,207,0,0,198,187,19,0,141,205,17,3,1,208,128,7,3,205,205,208,135,204,24,0,207,205,0,0,1,5,0,0,2,205,0,0,200,129,237,0,78,204,205,0,143,204,29,1,1,205,0,0,141,207,29,1,135,204,170,0,5,205,207,0,2,207,0,0,128,223,53,2,78,204,207,0,143,204,30,1,141,204,30,1,41,204,204,24,42,204,204,24,32,204,204,0,121,204,6,0,2,204,0,0,129,223,53,2,1,207,0,0,83,204,207,0,119,0,95,7,1,204,4,0,135,207,171,0,204,0,0,0,143,207,31,1,141,207,31,1,1,204,0,0,85,207,204,0,141,207,31,1,2,205,0,0,144,89,17,0,1,208,0,0,135,204,172,0,207,205,208,0,119,0,81,7,2,208,0,0,144,156,79,0,78,204,208,0,143,204,32,1,2,204,0,0,200,129,237,0,141,208,32,1,83,204,208,0,2,204,0,0,145,156,79,0,78,208,204,0,143,208,33,1,2,208,0,0,201,129,237,0,141,204,33,1,83,208,204,0,119,0,64,7,2,208,0,0,192,130,237,0,82,204,208,0,143,204,34,1,2,208,0,0,208,129,237,0,80,204,208,0,143,204,35,1,141,208,34,1,141,205,35,1,2,207,0,0,255,255,0,0,19,205,205,207,3,208,208,205,141,205,17,3,1,207,16,5,3,205,205,207,1,207,0,1,135,204,202,0,208,205,207,0,2,207,0,0,204,129,237,0,80,204,207,0,143,204,36,1,141,207,17,3,1,205,16,5,3,207,207,205,141,205,36,1,1,208,0,0,135,204,233,0,207,205,208,0,143,204,37,1,141,204,37,1,121,204,9,0,1,208,0,0,135,204,212,0,208,0,0,0,2,204,0,0,200,129,237,0,1,208,0,0,84,204,208,0,119,0,22,7,2,204,0,0,134,156,79,0,80,208,204,0,143,208,38,1,2,208,0,0,200,129,237,0,141,204,38,1,84,208,204,0,1,208,1,0,135,204,212,0,208,0,0,0,119,0,10,7,135,204,234,0,143,204,39,1,141,204,39,1,121,204,9,0,1,208,0,0,135,204,212,0,208,0,0,0,2,204,0,0,200,129,237,0,1,208,0,0,84,204,208,0,119,0,254,6,2,204,0,0,134,156,79,0,80,208,204,0,143,208,40,1,2,208,0,0,200,129,237,0,141,204,40,1,84,208,204,0,1,208,1,0,135,204,212,0,208,0,0,0,119,0,242,6,2,208,0,0,99,25,21,0,78,204,208,0,143,204,41,1,141,204,41,1,41,204,204,24,42,204,204,24,32,204,204,0,121,204,21,0,2,208,0,0,212,129,237,0,80,204,208,0,143,204,43,1,2,208,0,0,50,168,18,0,80,204,208,0,143,204,44,1,1,208,0,0,25,208,208,16,141,205,44,1,2,207,0,0,255,255,0,0,19,205,205,207,41,205,205,4,3,208,208,205,141,205,43,1,135,204,235,0,208,205,0,0,119,0,213,6,2,205,0,0,56,188,19,0,141,208,17,3,1,207,136,7,3,208,208,207], eb + 133120);
  HEAPU8.set([135,204,24,0,205,208,0,0,119,0,205,6,2,208,0,0,99,25,21,0,78,204,208,0,143,204,45,1,141,204,45,1,41,204,204,24,42,204,204,24,32,204,204,0,121,204,19,0,2,208,0,0,50,168,18,0,80,204,208,0,143,204,47,1,1,208,0,0,25,208,208,16,141,205,47,1,2,207,0,0,255,255,0,0,19,205,205,207,41,205,205,4,3,208,208,205,135,204,166,0,208,0,0,0,143,204,48,1,141,204,48,1,0,4,204,0,119,0,9,0,2,208,0,0,198,187,19,0,141,205,17,3,1,207,144,7,3,205,205,207,135,204,24,0,208,205,0,0,1,4,0,0,2,204,0,0,212,129,237,0,84,204,4,0,119,0,166,6,2,205,0,0,192,156,79,0,135,204,236,0,205,0,0,0,143,204,49,1,2,204,0,0,148,130,237,0,141,205,49,1,43,205,205,16,85,204,205,0,2,205,0,0,180,130,237,0,141,204,49,1,43,204,204,16,41,204,204,4,85,205,204,0,2,204,0,0,212,129,237,0,141,205,49,1,2,208,0,0,255,255,0,0,19,205,205,208,84,204,205,0,141,205,17,3,1,204,136,8,1,208,14,0,97,205,204,208,141,208,17,3,1,204,136,8,3,208,208,204,1,204,1,0,109,208,4,204,141,208,17,3,1,205,136,8,3,208,208,205,2,205,0,0,38,208,19,0,141,207,17,3,1,206,152,7,3,207,207,206,135,204,18,0,208,205,207,0,119,0,123,6,141,204,17,3,1,207,160,7,1,205,83,0,97,204,207,205,2,207,0,0,95,208,19,0,141,204,17,3,1,208,160,7,3,204,204,208,135,205,31,0,207,204,0,0,119,0,111,6,2,204,0,0,147,156,79,0,78,205,204,0,143,205,50,1,2,205,0,0,200,129,237,0,141,204,50,1,83,205,204,0,119,0,102,6,2,205,0,0,208,129,237,0,80,204,205,0,143,204,51,1,2,205,0,0,224,129,237,0,80,204,205,0,143,204,52,1,141,205,51,1,141,207,52,1,135,204,237,0,205,207,0,0,2,207,0,0,99,25,21,0,78,204,207,0,143,204,53,1,141,204,53,1,41,204,204,24,42,204,204,24,32,204,204,0,121,204,21,0,2,207,0,0,208,129,237,0,80,204,207,0,143,204,54,1,2,207,0,0,50,168,18,0,80,204,207,0,143,204,55,1,1,207,0,0,25,207,207,16,141,205,55,1,2,208,0,0,255,255,0,0,19,205,205,208,41,205,205,4,3,207,207,205,141,205,54,1,135,204,235,0,207,205,0,0,119,0,8,0,2,205,0,0,56,188,19,0,141,207,17,3,1,208,168,7,3,207,207,208,135,204,24,0,205,207,0,0,2,204,0,0,200,129,237,0,1,207,240,255,83,204,207,0,119,0,49,6,2,204,0,0,192,130,237,0,82,207,204,0,143,207,56,1,2,204,0,0,208,129,237,0,80,207,204,0,143,207,57,1,141,204,56,1,141,205,57,1,2,208,0,0,255,255,0,0,19,205,205,208,3,204,204,205,141,205,17,3,1,208,16,5,3,205,205,208,1,208,0,1,135,207,202,0,204,205,208,0,2,208,0,0,180,130,237,0,82,207,208,0,143,207,58,1,2,208,0,0,228,129,237,0,80,207,208,0,143,207,59,1,141,208,58,1,141,205,59,1,2,204,0,0,255,255,0,0,19,205,205,204,3,208,208,205,141,205,17,3,1,204,0,4,3,205,205,204,1,204,0,1,135,207,202,0,208,205,204,0,141,204,17,3,1,205,16,5,3,204,204,205,141,205,17,3,1,208,0,4,3,205,205,208,135,207,238,0,204,205,0,0,143,207,61,1,141,207,61,1,121,207,5,0,1,205,0,0,135,207,212,0,205,0,0,0,119,0,250,5,2,205,0,0,134,156,79,0,80,207,205,0,143,207,62,1,2,207,0,0,200,129,237,0,141,205,62,1,84,207,205,0,1,207,1,0,135,205,212,0,207,0,0,0,119,0,238,5,2,207,0,0,200,129,237,0,78,205,207,0,143,205,63,1,141,205,63,1,41,205,205,24,42,205,205,24,1,207,0,0,1,206,2,0,138,205,207,206,32,52,2,0,120,52,2,0,141,207,17,3,1,204,128,8,1,208,14,0,97,207,204,208,141,208,17,3,1,204,128,8,3,208,208,204,1,204,3,0,109,208,4,204,141,204,17,3,1,208,176,7,141,207,63,1,1,206,255,0,19,207,207,206,97,204,208,207,141,208,17,3,1,204,128,8,3,208,208,204,2,204,0,0,122,208,19,0,141,206,17,3,1,209,176,7,3,206,206,209,135,207,18,0,208,204,206,0,119,0,200,5,2,204,0,0,212,129,237,0,80,207,204,0,143,207,64,1,141,204,64,1,2,208,0,0,204,129,237,0,2,206,0,0,208,129,237,0,135,207,239,0,204,208,206,0,143,207,65,1,141,207,65,1,121,207,5,0,1,206,0,0,135,207,212,0,206,0,0,0,119,0,182,5,1,206,1,0,135,207,212,0,206,0,0,0,119,0,178,5,2,206,0,0,212,129,237,0,80,207,206,0,143,207,66,1,2,206,0,0,204,129,237,0,80,207,206,0,143,207,67,1,2,206,0,0,208,129,237,0,80,207,206,0,143,207,68,1,141,206,66,1,141,208,67,1,141,204,68,1,135,207,240,0,206,208,204,0,143,207,69,1,141,207,69,1,121,207,5,0,1,204,0,0,135,207,212,0,204,0,0,0,119,0,154,5,1,204,1,0,135,207,212,0,204,0,0,0,119,0,150,5,2,207,0,0,200,129,237,0,78,205,207,0,143,205,70,1,141,205,70,1,41,205,205,24,42,205,205,24,1,208,0,0,1,207,4,0,138,205,208,207,164,53,2,0,192,53,2,0,24,54,2,0,80,54,2,0,141,207,17,3,1,206,120,8,1,204,14,0,97,207,206,204,141,204,17,3,1,206,120,8,3,204,204,206,1,206,3,0,109,204,4,206,141,206,17,3,1,204,184,7,141,207,70,1,1,208,255,0,19,207,207,208,97,206,204,207,141,204,17,3,1,206,120,8,3,204,204,206,2,206,0,0,152,208,19,0,141,208,17,3,1,209,184,7,3,208,208,209,135,207,18,0,204,206,208,0,2,207,0,0,200,129,237,0,1,208,1,0,84,207,208,0,1,207,1,0,135,208,212,0,207,0,0,0,119,0,103,5,135,207,241,0,143,207,71,1,2,207,0,0,200,129,237,0,141,206,71,1,84,207,206,0,119,0,96,5,2,207,0,0,212,129,237,0,80,206,207,0,143,206,72,1,141,207,72,1,135,206,242,0,207,0,0,0,143,206,73,1,141,206,73,1,121,206,5,0,1,207,0,0,135,206,212,0,207,0,0,0,119,0,82,5,2,206,0,0,200,129,237,0,1,207,1,0,84,206,207,0,1,206,1,0,135,207,212,0,206,0,0,0,119,0,74,5,2,206,0,0,192,156,79,0,135,207,243,0,206,0,0,0,143,207,74,1,2,207,0,0,200,129,237,0,141,206,74,1,38,206,206,1,83,207,206,0,1,207,0,0,135,206,212,0,207,0,0,0,119,0,60,5,2,207,0,0,212,129,237,0,80,206,207,0,143,206,75,1,141,207,75,1,135,206,244,0,207,0,0,0,143,206,76,1,141,206,76,1,121,206,5,0,1,207,0,0,135,206,212,0,207,0,0,0,119,0,46,5,2,206,0,0,200,129,237,0,1,207,1,0,84,206,207,0,1,206,1,0,135,207,212,0,206,0,0,0,119,0,38,5,2,208,0,0,134,156,79,0,80,205,208,0,143,205,77,1,2,205,0,0,200,129,237,0,141,208,77,1,84,205,208,0,141,205,77,1,38,205,205,254,41,205,205,16,42,205,205,16,32,205,205,2,1,207,8,0,1,206,0,0,125,208,205,207,206,0,0,0,143,208,12,3,2,208,0,0,212,129,237,0,141,206,12,3,107,208,1,206,2,206,0,0,212,129,237,0,1,208,1,0,83,206,208,0,2,208,0,0,204,129,237,0,1,206,0,0,107,208,1,206,119,0,7,5,2,208,0,0,192,130,237,0,82,206,208,0,143,206,78,1,2,208,0,0,208,129,237,0,80,206,208,0,143,206,79,1,141,208,78,1,141,207,79,1,2,205,0,0,255,255,0,0,19,207,207,205,3,208,208,207,141,207,17,3,1,205,16,5,3,207,207,205,1,205,0,1,135,206,202,0,208,207,205,0,141,205,17,3,1,207,16,5,3,205,205,207,141,207,17,3,3,207,207,200,135,206,245,0,205,207,0,0,143,206,80,1,141,206,80,1,121,206,39,0,141,207,17,3,92,206,207,200,143,206,82,1,2,206,0,0,200,129,237,0,141,207,82,1,84,206,207,0,2,206,0,0,192,130,237,0,82,207,206,0,143,207,83,1,2,206,0,0,208,129,237,0,80,207,206,0,143,207,84,1,141,206,17,3,1,205,16,5,3,206,206,205,135,207,41,0,206,0,0,0,143,207,85,1,141,206,83,1,141,205,84,1,2,208,0,0,255,255,0,0,19,205,205,208,3,206,206,205,141,205,17,3,1,208,16,5,3,205,205,208,141,208,85,1,25,208,208,1,135,207,211,0,206,205,208,0,1,208,0,0,135,207,212,0,208,0,0,0,119,0,195,4,2,208,0,0,134,156,79,0,80,207,208,0,143,207,86,1,2,207,0,0,200,129,237,0,141,208,86,1,84,207,208,0,1,207,1,0,135,208,212,0,207,0,0,0,119,0,183,4,2,207,0,0,192,130,237,0,82,208,207,0,143,208,87,1,2,207,0,0,208,129,237,0,80,208,207,0,143,208,88,1,141,207,87,1,141,205,88,1,2,206,0,0,255,255,0,0,19,205,205,206,3,207,207,205,141,205,17,3,1,206,16,5,3,205,205,206,1,206,0,1,135,208,202,0,207,205,206,0,141,206,17,3,1,205,16,5,3,206,206,205,1,205,0,0,141,207,17,3,3,207,207,200,135,208,219,0,206,205,207,0,143,208,89,1,141,208,89,1,121,208,19,0,141,207,17,3,92,208,207,200,143,208,90,1,141,207,90,1,135,208,220,0,207,0,0,0,2,208,0,0,134,156,79,0,1,207,80,0,84,208,207,0,2,207,0,0,200,129,237,0,1,208,80,0,84,207,208,0,1,207,1,0,135,208,212,0,207,0,0,0,119,0,134,4,2,207,0,0,204,129,237,0,80,208,207,0,143,208,91,1,141,207,17,3,1,205,16,5,3,207,207,205,141,205,91,1,141,206,17,3,3,206,206,200,135,208,216,0,207,205,206,0,143,208,92,1,141,208,92,1,121,208,12,0,141,206,17,3,92,208,206,200,143,208,93,1,2,208,0,0,200,129,237,0,141,206,93,1,84,208,206,0,1,208,0,0,135,206,212,0,208,0,0,0,119,0,108,4,2,208,0,0,134,156,79,0,80,206,208,0,143,206,94,1,2,206,0,0,200,129,237,0,141,208,94,1,84,206,208,0,1,206,1,0,135,208,212,0,206,0,0,0,119,0,96,4,2,206,0,0,204,129,237,0,80,208,206,0,143,208,95,1,2,206,0,0,208,129,237,0,80,208,206,0,143,208,97,1,2,206,0,0,224,129,237,0,80,208,206,0,143,208,98,1,2,206,0,0,228,129,237,0,80,208,206,0,143,208,99,1,2,206,0,0,212,129,237,0,80,208,206,0,143,208,101,1,2,206,0,0,200,129,237,0,78,208,206,0,143,208,102,1,141,206,101,1,141,205,102,1,141,207,95,1,2,204,0,0,255,255,0,0,19,207,207,204,41,207,207,16,141,204,97,1,2,209,0,0,255,255,0,0,19,204,204,209,20,207,207,204,141,204,98,1,2,209,0,0,255,255,0,0,19,204,204,209,41,204,204,16,141,209,99,1,2,210,0,0,255,255,0,0,19,209,209,210,20,204,204,209,135,208,246,0,206,205,207,204,143,208,103,1,141,208,103,1,121,208,9,0,2,208,0,0,200,129,237,0,1,204,0,0,84,208,204,0,1,208,0,0,135,204,212,0,208,0,0,0,119,0,37,4,2,208,0,0,134,156,79,0,80,204,208,0,143,204,104,1,2,204,0,0,200,129,237,0,141,208,104,1,84,204,208,0,1,204,1,0,135,208,212,0,204,0,0,0,119,0,25,4,2,204,0,0,200,129,237,0,78,208,204,0,143,208,105,1,141,208,105,1,41,208,208,24,42,208,208,24,32,208,208,6,121,208,16,4,2,204,0,0,50,168,18,0,80,208,204,0,143,208,106,1,2,208,0,0,160,130,237,0,141,204,106,1,2,207,0,0,255,255,0,0,19,204,204,207,85,208,204,0,2,204,0,0,192,130,237,0,141,208,106,1,2,207,0,0,255,255,0,0,19,208,208,207,41,208,208,4,85,204,208,0,2,208,0,0,224,129,237,0,1,204,0,0,84,208,204,0,2,208,0,0,52,168,18,0,80,204,208,0,143,204,107,1,2,204,0,0,204,129,237,0,141,208,107,1,84,204,208,0,2,208,0,0,208,129,237,0,1,204,26,0,84,208,204,0,141,204,17,3,1,208,112,8,1,207,14,0,97,204,208,207,141,207,17,3,1,208,112,8,3,207,207,208,1,208,3,0,109,207,4,208,141,207,17,3,1,204,112,8,3,207,207,204,2,204,0,0,208,208,19,0,141,205,17,3,1,206,192,7,3,205,205,206,135,208,18,0,207,204,205,0,119,0,217,3,2,208,0,0,200,129,237,0,1,205,1,0,84,208,205,0,1,208,1,0,135,205,212,0,208,0,0,0,119,0,209,3,2,208,0,0,192,130,237,0,82,205,208,0,143,205,109,1,2,208,0,0,224,129,237,0,80,205,208,0,143,205,110,1,141,208,109,1,141,204,110,1,2,207,0,0,255,255,0,0,19,204,204,207,3,208,208,204,141,204,17,3,1,207,16,5,3,204,204,207,1,207,0,1,135,205,202,0,208,204,207,0,141,207,17,3,1,204,16,5,3,207,207,204,141,204,17,3,1,208,0,4,3,204,204,208,135,205,247,0,207,204,0,0,143,205,111,1,141,205,111,1,121,205,32,0,2,204,0,0,180,130,237,0,82,205,204,0,143,205,112,1,2,204,0,0,228,129,237,0,80,205,204,0,143,205,113,1,141,204,17,3,1,207,0,4,3,204,204,207,135,205,41,0,204,0,0,0,143,205,115,1,141,204,112,1,141,207,113,1,2,208,0,0,255,255,0,0,19,207,207,208,3,204,204,207,141,207,17,3,1,208,0,4,3,207,207,208,141,208,115,1,25,208,208,1,135,205,211,0,204,207,208,0,1,208,0,0,135,205,212,0,208,0,0,0,119,0,147,3,2,208,0,0,134,156,79,0,80,205,208,0,143,205,116,1,2,205,0,0,200,129,237,0,141,208,116,1,84,205,208,0,1,205,1,0,135,208,212,0,205,0,0,0,119,0,135,3,2,205,0,0,99,25,21,0,78,208,205,0,143,208,117,1,141,208,117,1,41,208,208,24,42,208,208,24,32,208,208,0,121,208,19,0,2,205,0,0,50,168,18,0,80,208,205,0,143,208,118,1,1,205,0,0,25,205,205,16,141,207,118,1,2,204,0,0,255,255,0,0,19,207,207,204,41,207,207,4,3,205,205,207,135,208,166,0,205,0,0,0,143,208,120,1,141,208,120,1,0,3,208,0,119,0,9,0,2,205,0,0,198,187,19,0,141,207,17,3,1,204,200,7,3,207,207,204,135,208,24,0,205,207,0,0,1,3,0,0,2,208,0,0,212,129,237,0,84,208,3,0,119,0,96,3,2,207,0,0,200,129,237,0,78,208,207,0,143,208,121,1,2,207,0,0,164,156,79,0,82,208,207,0,143,208,122,1,141,208,121,1,41,208,208,24,42,208,208,24,32,208,208,0,141,207,122,1,33,207,207,0,19,208,208,207,121,208,27,0,2,208,0,0,160,130,237,0,141,207,122,1,43,207,207,16,85,208,207,0,2,207,0,0,192,130,237,0,141,208,122,1,43,208,208,16,41,208,208,4,85,207,208,0,2,208,0,0,224,129,237,0,141,207,122,1,2,205,0,0,255,255,0,0,19,207,207,205,84,208,207,0,2,207,0,0,200,129,237,0,1,208,0,0,83,207,208,0,1,207,0,0,135,208,212,0,207,0,0,0,119,0,54,3,2,208,0,0,200,129,237,0,1,207,255,255,83,208,207,0,119,0,49,3,141,207,17,3,1,208,104,8,1,205,14,0,97,207,208,205,141,205,17,3,1,208,104,8,3,205,205,208,1,208,1,0,109,205,4,208,141,205,17,3,1,207,104,8,3,205,205,207,2,207,0,0,242,208,19,0,141,204,17,3,1,206,208,7,3,204,204,206,135,208,18,0,205,207,204,0,119,0,29,3,141,208,17,3,1,204,96,8,1,207,14,0,97,208,204,207,141,207,17,3,1,204,96,8,3,207,207,204,1,204,3,0,109,207,4,204,2,207,0,0,200,129,237,0,80,204,207,0,143,204,124,1,141,204,17,3,1,207,216,7,141,208,124,1,2,205,0,0,255,255,0,0,19,208,208,205,97,204,207,208,141,207,17,3,1,204,96,8,3,207,207,204,2,204,0,0,13,209,19,0,141,205,17,3,1,206,216,7,3,205,205,206,135,208,18,0,207,204,205,0,2,205,0,0,200,129,237,0,78,208,205,0,143,208,125,1,2,205,0,0,204,129,237,0,80,208,205,0,143,208,126,1,141,208,125,1,1,205,255,0,19,208,208,205,34,208,208,8,141,205,126,1,2,204,0,0,255,255,0,0,19,205,205,204,34,205,205,5,19,208,208,205,121,208,9,0,2,208,0,0,134,156,79,0,1,205,1,0,84,208,205,0,1,208,1,0,135,205,212,0,208,0,0,0,119,0,228,2,2,208,0,0,180,130,237,0,82,205,208,0,143,205,127,1,2,208,0,0,228,129,237,0,80,205,208,0,143,205,128,1,141,208,127,1,141,204,128,1,2,207,0,0,255,255,0,0,19,204,204,207,3,205,208,204,143,205,130,1,141,205,125,1,41,205,205,24,42,205,205,24,1,206,1,0,1,204,34,0,138,205,206,204,196,64,2,0,84,66,2,0,168,66,2,0,24,67,2,0,28,67,2,0,112,67,2,0,196,67,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,140,64,2,0,200,67,2,0,24,68,2,0,196,69,2,0,141,204,17,3,1,207,232,7,141,206,125,1,1,208,255,0,19,206,206,208,97,204,207,206,2,207,0,0,82,209,19,0,141,204,17,3,1,208,232,7,3,204,204,208,135,206,31,0,207,204,0,0,119,0,159,2,141,208,130,1,1,207,1,0,135,204,182,0,208,207,0,0,141,207,130,1,25,207,207,1,1,208,38,0,135,204,235,0,207,208,0,0,141,208,130,1,25,208,208,3,1,207,1,0,135,204,235,0,208,207,0,0,2,207,0,0,204,129,237,0,80,204,207,0,143,204,131,1,1,204,6,0,141,207,131,1,2,208,0,0,255,255,0,0,19,207,207,208,47,204,204,207,68,66,2,0,2,207,0,0,188,156,79,0,80,204,207,0,143,204,132,1,141,207,130,1,25,207,207,5,141,208,132,1,135,204,235,0,207,208,0,0,2,204,0,0,204,129,237,0,80,20,204,0,1,204,8,0,2,208,0,0,255,255,0,0,19,208,20,208,47,204,204,208,68,66,2,0,1,207,40,0,2,206,0,0,255,255,0,0,19,206,20,206,47,207,207,206,148,65,2,0,1,207,34,0,0,208,207,0,119,0,6,0,2,207,0,0,255,255,0,0,19,207,20,207,26,207,207,7,0,208,207,0,0,204,208,0,143,204,134,1,2,208,0,0,180,156,79,0,82,204,208,0,143,204,135,1,141,208,130,1,25,208,208,7,141,207,135,1,141,206,134,1,135,204,211,0,208,207,206,0,2,206,0,0,204,129,237,0,80,204,206,0,143,204,136,1,141,207,136,1,2,208,0,0,255,255,0,0,19,207,207,208,35,207,207,41,121,207,7,0,141,207,136,1,2,208,0,0,255,255,0,0,19,207,207,208,0,206,207,0,119,0,3,0,1,207,41,0,0,206,207,0,0,204,206,0,143,204,137,1,2,204,0,0,204,129,237,0,141,206,137,1,2,207,0,0,255,255,0,0,19,206,206,207,84,204,206,0,1,204,0,0,135,206,212,0,204,0,0,0,119,0,59,2,141,206,130,1,1,207,2,0,135,204,182,0,206,207,0,0,2,207,0,0,176,156,79,0,82,204,207,0,143,204,140,1,141,207,130,1,25,207,207,1,141,206,140,1,135,204,167,0,207,206,0,0,2,204,0,0,204,129,237,0,1,206,5,0,84,204,206,0,1,204,0,0,135,206,212,0,204,0,0,0,119,0,38,2,2,206,0,0,164,156,79,0,82,204,206,0,143,204,142,1,141,204,142,1,32,204,204,0,120,204,31,2,141,206,130,1,141,207,125,1,135,204,182,0,206,207,0,0,2,207,0,0,164,156,79,0,82,204,207,0,143,204,143,1,141,207,130,1,25,207,207,1,141,206,143,1,135,204,167,0,207,206,0,0,2,204,0,0,204,129,237,0,1,206,5,0,84,204,206,0,1,204,0,0,135,206,212,0,204,0,0,0,119,0,10,2,119,0,228,255,141,204,130,1,1,207,5,0,135,206,182,0,204,207,0,0,2,207,0,0,168,156,79,0,82,206,207,0,143,206,139,1,141,207,130,1,25,207,207,1,141,204,139,1,135,206,167,0,207,204,0,0,2,206,0,0,204,129,237,0,1,204,5,0,84,206,204,0,1,206,0,0,135,204,212,0,206,0,0,0,119,0,244,1,141,204,130,1,1,207,6,0,135,206,182,0,204,207,0,0,2,207,0,0,172,156,79,0,82,206,207,0,143,206,141,1,141,207,130,1,25,207,207,1,141,204,141,1,135,206,167,0,207,204,0,0,2,206,0,0,204,129,237,0,1,204,5,0,84,206,204,0,1,206,0,0,135,204,212,0,206,0,0,0,119,0,223,1,119,0,185,255,2,204,0,0,208,129,237,0,78,206,204,0,143,206,144,1,141,204,144,1,1,207,255,0,19,204,204,207,135,206,248,0,204,0,0,0,143,206,146,1,2,206,0,0,208,129,237,0,141,204,146,1,1,207,255,0,19,204,204,207,83,206,204,0,1,206,0,0,135,204,212,0,206,0,0,0,119,0,202,1,2,206,0,0,192,130,237,0,82,204,206,0,143,204,147,1,2,206,0,0,208,129,237,0,80,204,206,0,143,204,148,1,141,204,125,1,41,204,204,24,42,204,204,24,32,204,204,33,121,204,7,0,141,204,126,1,2,206,0,0,255,255,0,0,19,204,204,206,0,12,204,0,119,0,25,0,141,206,147,1,141,207,148,1,2,208,0,0,255,255,0,0,19,207,207,208,3,206,206,207,135,204,249,0,206,0,0,0,143,204,149,1,2,204,0,0,255,255,0,0,141,206,149,1,48,204,204,206,188,68,2,0,2,206,0,0,57,209,19,0,141,207,17,3,1,208,224,7,3,207,207,208,135,204,31,0,206,207,0,0,119,0,3,0,141,204,149,1,0,12,204,0,32,204,12,0,143,204,151,1,141,204,151,1,120,204,57,0,141,207,147,1,141,206,148,1,2,208,0,0,255,255,0,0,19,206,206,208,3,207,207,206,2,206,0,0,32,161,22,0,135,204,221,0,207,206,12,0,2,206,0,0,32,161,22,0,3,204,206,12,143,204,152,1,141,204,152,1,1,206,0,0,83,204,206,0,1,17,0,0,2,204,0,0,32,161,22,0,3,206,204,17,143,206,153,1,141,204,153,1,78,206,204,0,143,206,154,1,141,204,154,1,1,207,255,0,19,204,204,207,135,206,248,0,204,0,0,0,143,206,155,1,141,206,153,1,141,204,155,1,1,207,255,0,19,204,204,207,83,206,204,0,25,204,17,1,143,204,156,1,141,206,156,1,13,204,206,12,143,204,8,3,141,204,8,3,120,204,4,0,141,204,156,1,0,17,204,0,119,0,229,255,141,206,147,1,141,207,148,1,2,208,0,0,255,255,0,0,19,207,207,208,3,206,206,207,2,207,0,0,32,161,22,0,135,204,211,0,206,207,12,0,1,207,0,0,135,204,212,0,207,0,0,0,119,0,95,1,119,0,149,255,2,206,0,0,200,129,237,0,78,205,206,0,143,205,158,1,141,205,158,1,41,205,205,24,42,205,205,24,32,205,205,1,121,205,36,0,141,205,17,3,1,206,88,8,1,204,14,0,97,205,206,204,141,204,17,3,1,206,88,8,3,204,204,206,1,206,3,0,109,204,4,206,141,204,17,3,1,205,88,8,3,204,204,205,2,205,0,0,130,209,19,0,141,207,17,3,1,208,240,7,3,207,207,208,135,206,18,0,204,205,207,0,2,207,0,0,188,156,79,0,80,206,207,0,143,206,159,1,2,206,0,0,208,129,237,0,141,207,159,1,84,206,207,0,2,207,0,0,212,129,237,0,141,206,159,1,84,207,206,0,1,207,0,0,135,206,212,0,207,0,0,0,119,0,50,1,141,206,17,3,1,207,80,8,1,205,14,0,97,206,207,205,141,205,17,3,1,207,80,8,3,205,205,207,1,207,1,0,109,205,4,207,141,205,17,3,1,206,80,8,3,205,205,206,2,206,0,0,161,209,19,0,141,204,17,3,1,208,248,7,3,204,204,208,135,207,18,0,205,206,204,0,119,0,30,1,2,204,0,0,99,25,21,0,78,207,204,0,143,207,160,1,141,207,160,1,41,207,207,24,42,207,207,24,32,207,207,0,121,207,19,0,2,204,0,0,50,168,18,0,80,207,204,0,143,207,161,1,1,204,0,0,25,204,204,16,141,206,161,1,2,205,0,0,255,255,0,0,19,206,206,205,41,206,206,4,3,204,204,206,135,207,166,0,204,0,0,0,143,207,162,1,141,207,162,1,0,2,207,0,119,0,9,0,2,204,0,0,198,187,19,0,141,206,17,3,1,205,0,8,3,206,206,205,135,207,24,0,204,206,0,0,1,2,0,0,2,206,0,0,255,255,0,0,19,206,2,206,0,207,206,0,143,207,163,1,141,207,17,3,141,206,163,1,41,206,206,4,97,207,200,206,141,206,17,3,3,206,206,200,108,206,4,2,2,207,0,0,212,129,237,0,80,206,207,0,143,206,164,1,141,207,17,3,3,207,207,200,141,204,164,1,135,206,250,0,207,204,0,0,1,204,0,0,135,206,212,0,204,0,0,0,119,0,226,0,2,204,0,0,212,129,237,0,78,206,204,0,143,206,165,1,141,204,165,1,1,207,255,0,19,204,204,207,135,206,251,0,204,0,0,0,143,206,167,1,141,206,167,1,121,206,5,0,1,204,0,0,135,206,212,0,204,0,0,0,119,0,210,0,2,204,0,0,134,156,79,0,80,206,204,0,143,206,168,1,2,206,0,0,200,129,237,0,141,204,168,1,84,206,204,0,1,206,1,0,135,204,212,0,206,0,0,0,119,0,198,0,2,206,0,0,200,129,237,0,78,204,206,0,143,204,169,1,141,204,169,1,41,204,204,24,42,204,204,24,1,205,0,0,1,207,2,0,138,204,205,207,168,72,2,0,4,73,2,0,141,208,169,1,0,207,208,0,143,207,171,1,141,208,171,1,1,205,255,0,19,208,208,205,0,207,208,0,143,207,170,1,141,207,17,3,1,208,24,8,141,205,170,1,97,207,208,205,2,208,0,0,4,210,19,0,141,207,17,3,1,206,24,8,3,207,207,206,135,205,31,0,208,207,0,0,119,0,166,0,141,206,17,3,1,207,72,8,1,205,14,0,97,206,207,205,141,205,17,3,1,207,72,8,3,205,205,207,1,207,3,0,109,205,4,207,141,205,17,3,1,206,72,8,3,205,205,206,2,206,0,0,206,209,19,0,141,208,17,3,1,209,8,8,3,208,208,209,135,207,18,0,205,206,208,0,1,208,1,0,135,207,212,0,208,0,0,0,119,0,143,0,141,207,17,3,1,208,64,8,1,206,14,0,97,207,208,206,141,206,17,3,1,208,64,8,3,206,206,208,1,208,3,0,109,206,4,208,141,206,17,3,1,207,64,8,3,206,206,207,2,207,0,0,233,209,19,0,141,205,17,3,1,209,16,8,3,205,205,209,135,208,18,0,206,207,205,0,2,208,0,0,200,129,237,0,78,24,208,0,0,208,24,0,143,208,171,1,141,205,171,1,1,207,255,0,19,205,205,207,0,208,205,0,143,208,170,1,141,208,17,3,1,205,24,8,141,207,170,1,97,208,205,207,2,205,0,0,4,210,19,0,141,208,17,3,1,206,24,8,3,208,208,206,135,207,31,0,205,208,0,0,119,0,102,0,2,205,0,0,192,130,237,0,82,204,205,0,143,204,172,1,2,205,0,0,224,129,237,0,80,204,205,0,143,204,173,1,141,205,172,1,141,207,173,1,2,208,0,0,255,255,0,0,19,207,207,208,3,205,205,207,141,207,17,3,1,208,16,5,3,207,207,208,1,208,0,1,135,204,202,0,205,207,208,0,2,208,0,0,212,129,237,0,80,204,208,0,143,204,175,1,2,208,0,0,204,129,237,0,80,204,208,0,143,204,176,1,2,208,0,0,208,129,237,0,80,204,208,0,143,204,177,1,141,208,17,3,1,207,16,5,3,208,208,207,141,207,175,1,141,205,176,1,141,206,177,1,2,209,0,0,200,129,237,0,2,210,0,0,204,129,237,0,135,204,252,0,208,207,205,206,209,210,0,0,143,204,178,1,141,204,178,1,121,204,5,0,1,210,0,0,135,204,212,0,210,0,0,0,119,0,50,0,2,210,0,0,134,156,79,0,80,204,210,0,143,204,179,1,2,204,0,0,200,129,237,0,141,210,179,1,84,204,210,0,1,204,1,0,135,210,212,0,204,0,0,0,119,0,38,0,2,210,0,0,200,129,237,0,1,204,0,113,84,210,204,0,1,210,1,0,135,204,212,0,210,0,0,0,141,204,17,3,1,210,56,8,1,209,14,0,97,204,210,209,141,209,17,3,1,210,56,8,3,209,209,210,1,210,1,0,109,209,4,210,2,209,0,0,200,129,237,0,78,210,209,0,143,210,180,1,141,210,17,3,1,209,32,8,141,204,180,1,1,206,255,0,19,204,204,206,97,210,209,204,141,209,17,3,1,210,56,8,3,209,209,210,2,210,0,0,43,210,19,0,141,206,17,3,1,205,32,8,3,206,206,205,135,204,18,0,209,210,206,0,119,0,1,0,141,203,16,3,1,209,189,1,45,203,203,209,88,75,2,0,121,11,3,0,1,203,190,1,143,203,16,3,141,203,16,3,1,209,190,1,45,203,203,209,120,75,2,0,1,209,0,0,1,210,0,0,135,203,253,0,209,210,0,0,141,203,17,3,137,203,0,0,1,203,0,0,139,203,0,0,140,2,9,2,0,0,0,0,2,200,0,0,108,155,20,0,2,201,0,0,113,155,20,0,2,202,0,0,132,0,0,0,1,203,0,0,143,203,7,2,136,204,0,0,0,203,204,0,143,203,8,2,136,203,0,0,1,204,160,0,3,203,203,204,137,203,0,0,141,203,8,2,1,204,130,0,1,205,1,0,96,203,204,205,141,205,8,2,1,204,128,0,1,203,0,0,96,205,204,203,1,204,0,0,107,0,63,204,1,204,0,0,83,1,204,0,106,126,0,32,106,143,0,44,141,203,8,2,25,203,203,96,25,204,203,4,143,204,23,1,141,203,8,2,25,203,203,96,25,204,203,8,143,204,30,1,1,3,254,15,1,22,0,0,1,23,0,0,1,25,0,0,0,79,143,0,0,83,126,0,2,204,0,0,149,156,79,0,1,203,0,0,83,204,203,0,104,203,0,54,143,203,79,1,141,204,79,1,141,205,8,2,1,206,146,0,3,205,205,206,141,206,8,2,1,207,130,0,3,206,206,207,135,203,173,0,204,205,206,0,143,203,83,1,141,203,83,1,120,203,4,0,1,203,3,0,143,203,7,2,119,0,74,24,141,203,8,2,1,206,130,0,92,68,203,206,41,203,68,16,42,203,203,16,32,203,203,0,121,203,4,0,1,203,5,0,143,203,7,2,119,0,64,24,104,203,0,54,143,203,93,1,141,203,93,1,41,203,203,16,42,203,203,16,32,203,203,0,121,203,199,0,2,206,0,0,44,156,79,0,82,203,206,0,143,203,113,1,141,203,113,1,32,203,203,7,120,203,34,0,141,206,8,2,1,205,146,0,90,203,206,205,143,203,211,1,141,203,211,1,41,203,203,24,42,203,203,24,32,203,203,0,121,203,20,0,1,206,0,0,141,205,8,2,1,204,146,0,3,205,205,204,141,204,8,2,1,207,130,0,3,204,204,207,135,203,173,0,206,205,204,0,141,204,8,2,1,205,146,0,90,203,204,205,143,203,218,1,141,203,218,1,1,204,255,0,19,203,203,204,41,203,203,8,0,44,203,0,119,0,172,0,141,203,211,1,1,204,255,0,19,203,203,204,0,44,203,0,119,0,167,0,1,204,56,5,135,203,181,0,204,0,0,0,143,203,126,1,141,204,8,2,1,205,146,0,90,203,204,205,143,203,132,1,141,203,132,1,41,203,203,24,42,203,203,24,1,204,8,0,1,207,20,0,138,203,204,207,16,78,2,0,252,77,2,0,116,78,2,0,124,78,2,0,132,78,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,252,77,2,0,176,78,2,0,141,204,132,1,1,207,255,0,19,204,204,207,0,44,204,0,119,0,128,0,2,205,0,0,254,222,53,2,80,206,205,0,143,206,150,1,141,206,126,1,38,206,206,16,41,206,206,24,42,206,206,24,32,206,206,0,1,205,0,75,1,204,0,115,125,57,206,205,204,0,0,0,141,205,150,1,41,205,205,16,42,205,205,16,1,206,0,59,13,205,205,206,1,206,8,0,125,204,205,57,206,0,0,0,143,204,2,2,141,204,2,2,0,44,204,0,119,0,103,0,1,44,0,80,119,0,101,0,1,44,0,72,119,0,99,0,141,204,126,1,38,204,204,16,41,204,204,24,42,204,204,24,32,204,204,0,1,205,0,77,1,206,0,116,125,2,204,205,206,0,0,0,0,44,2,0,119,0,88,0,2,206,0,0,254,222,53,2,80,204,206,0,143,204,174,1,141,204,174,1,41,204,204,16,42,204,204,16,32,204,204,27,121,204,3,0,1,44,27,0,119,0,77,0,104,204,0,54,143,204,187,1,141,206,187,1,141,205,8,2,1,207,146,0,3,205,205,207,141,207,8,2,1,208,130,0,3,207,207,208,135,204,173,0,206,205,207,0,141,207,8,2,1,205,146,0,90,204,207,205,143,204,194,1,141,204,194,1,41,204,204,24,42,204,204,24,1,207,68,0,1,205,23,0,138,204,207,205,148,79,2,0,156,79,2,0,140,79,2,0,140,79,2,0,140,79,2,0,140,79,2,0,164,79,2,0,140,79,2,0,140,79,2,0,140,79,2,0,140,79,2,0,140,79,2,0,172,79,2,0,180,79,2,0,140,79,2,0,188,79,2,0,196,79,2,0,204,79,2,0,212,79,2,0,220,79,2,0,140,79,2,0,140,79,2,0,228,79,2,0,1,44,0,0,119,0,31,0,1,44,0,83,119,0,29,0,1,44,0,64,119,0,27,0,1,44,0,65,119,0,25,0,1,44,0,82,119,0,23,0,1,44,0,67,119,0,21,0,1,44,0,59,119,0,19,0,1,44,0,60,119,0,17,0,1,44,0,61,119,0,15,0,1,44,0,62,119,0,13,0,1,44,0,63,119,0,11,0,1,44,0,68,119,0,9,0,141,204,8,2,1,207,146,0,90,203,204,207,143,203,102,1,141,203,102,1,1,204,255,0,19,203,203,204,0,44,203,0,2,204,0,0,255,255,0,0,19,204,44,204,0,203,204,0,143,203,6,2,141,203,6,2,41,203,203,16,42,203,203,16,1,204,0,72,47,203,203,204,68,116,2,0,141,203,6,2,41,203,203,16,42,203,203,16,34,203,203,13,120,203,224,2,141,203,6,2,41,203,203,16,42,203,203,16,1,204,0,15,47,203,203,204,112,84,2,0,141,203,6,2,41,203,203,16,42,203,203,16,1,204,13,0,1,206,15,0,138,203,204,206,196,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,184,80,2,0,72,81,2,0,1,204,15,1,143,204,7,2,119,0,78,22,102,204,0,60,143,204,53,1,141,204,53,1,41,204,204,24,42,204,204,24,32,204,204,0,120,204,8,0,0,47,23,0,0,51,25,0,1,58,0,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,64,22,141,204,8,2,1,207,10,0,83,204,207,0,141,207,8,2,1,204,1,0,108,207,120,204,1,207,1,0,141,205,8,2,141,206,8,2,25,206,206,120,135,204,174,0,207,205,206,0,0,47,23,0,0,51,25,0,1,58,0,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,45,22,119,0,1,0,16,203,23,22,143,203,157,1,141,203,157,1,121,203,26,0,0,40,23,0,141,203,8,2,1,204,32,0,83,203,204,0,141,204,8,2,1,203,1,0,108,204,120,203,1,204,1,0,141,206,8,2,141,205,8,2,25,205,205,120,135,203,174,0,204,206,205,0,25,203,40,1,143,203,158,1,141,205,158,1,13,203,205,22,143,203,0,2,141,203,0,2,121,203,3,0,0,39,22,0,119,0,5,0,141,203,158,1,0,40,203,0,119,0,233,255,0,39,23,0,32,203,39,0,143,203,159,1,141,203,159,1,120,203,83,0,0,46,39,0,141,203,8,2,1,205,8,0,83,203,205,0,141,205,8,2,1,203,1,0,108,205,120,203,1,205,1,0,141,206,8,2,141,204,8,2,25,204,204,120,135,203,174,0,205,206,204,0,141,203,8,2,1,204,32,0,83,203,204,0,141,204,8,2,1,203,1,0,108,204,120,203,1,204,1,0,141,206,8,2,141,205,8,2,25,205,205,120,135,203,174,0,204,206,205,0,141,203,8,2,1,205,8,0,83,203,205,0,141,205,8,2,1,203,1,0,108,205,120,203,1,205,1,0,141,206,8,2,141,204,8,2,25,204,204,120,135,203,174,0,205,206,204,0,141,204,8,2,25,204,204,120,141,206,8,2,1,205,0,0,135,203,254,0,204,206,205,0,141,205,8,2,78,203,205,0,143,203,160,1,141,203,160,1,41,203,203,24,42,203,203,24,32,203,203,0,121,203,24,0,141,205,8,2,3,205,205,202,135,203,255,0,205,0,0,0,141,205,8,2,102,203,205,120,143,203,161,1,141,205,8,2,92,203,205,202,143,203,162,1,141,205,161,1,1,206,255,0,19,205,205,206,1,206,255,0,3,205,205,206,1,206,255,0,19,205,205,206,141,206,162,1,1,204,255,0,19,206,206,204,1,204,0,0,135,203,0,1,205,206,204,0,26,203,46,1,143,203,163,1,141,203,163,1,32,203,203,0,120,203,4,0,141,203,163,1,0,46,203,0,119,0,176,255,1,203,0,0,83,1,203,0,106,203,0,48,143,203,164,1,141,203,164,1,32,203,203,0,121,203,8,0,1,47,0,0,0,51,25,0,0,58,3,0,1,61,0,0,0,82,79,0,0,84,83,0,119,0,170,21,106,203,0,44,143,203,165,1,106,203,0,40,143,203,166,1,141,204,166,1,106,203,204,4,143,203,167,1,141,204,165,1,82,203,204,0,143,203,168,1,141,203,168,1,141,204,167,1,109,203,4,204,141,203,166,1,106,204,203,4,143,204,169,1,141,204,169,1,141,203,168,1,85,204,203,0,1,204,0,0,109,0,48,204,141,204,165,1,25,203,0,40,45,204,204,203,212,83,2,0,1,47,0,0,0,51,25,0,0,58,3,0,1,61,0,0,0,82,79,0,0,84,83,0,119,0,138,21,141,204,165,1,0,16,204,0,25,204,16,4,143,204,170,1,141,203,170,1,82,204,203,0,143,204,171,1,25,204,16,8,143,204,172,1,141,203,172,1,102,204,203,11,143,204,173,1,141,204,173,1,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,141,203,172,1,82,204,203,0,143,204,175,1,141,203,175,1,135,204,21,0,203,0,0,0,135,204,21,0,16,0,0,0,141,204,171,1,25,203,0,40,45,204,204,203,100,84,2,0,1,47,0,0,0,51,25,0,0,58,3,0,1,61,0,0,0,82,79,0,0,84,83,0,119,0,102,21,141,204,171,1,0,16,204,0,119,0,220,255,141,204,6,2,41,204,204,16,42,204,204,16,1,203,0,61,47,204,204,203,32,88,2,0,141,204,6,2,41,204,204,16,42,204,204,16,1,203,0,15,1,206,1,0,138,204,203,206,176,84,2,0,1,203,15,1,143,203,7,2,119,0,83,21,119,0,1,0,106,191,0,48,32,204,191,0,121,204,8,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,72,21,106,192,0,44,0,193,79,0,45,203,192,193,248,84,2,0,25,203,0,40,0,204,203,0,119,0,2,0,0,204,79,0,0,80,204,0,82,194,80,0,25,204,194,8,102,195,204,11,41,204,195,24,42,204,204,24,34,204,204,0,121,204,4,0,106,196,194,12,0,197,196,0,119,0,4,0,1,204,255,0,19,204,195,204,0,197,204,0,32,198,197,0,121,198,8,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,194,0,0,84,83,0,119,0,41,21,104,199,0,52,2,203,0,0,255,255,0,0,19,203,199,203,16,204,203,23,143,204,0,1,141,204,0,1,121,204,63,0,0,65,23,0,141,204,8,2,1,203,8,0,83,204,203,0,141,203,8,2,1,204,1,0,108,203,120,204,1,203,1,0,141,206,8,2,141,205,8,2,25,205,205,120,135,204,174,0,203,206,205,0,141,204,8,2,1,205,32,0,83,204,205,0,141,205,8,2,1,204,1,0,108,205,120,204,1,205,1,0,141,206,8,2,141,203,8,2,25,203,203,120,135,204,174,0,205,206,203,0,141,204,8,2,1,203,8,0,83,204,203,0,141,203,8,2,1,204,1,0,108,203,120,204,1,203,1,0,141,206,8,2,141,205,8,2,25,205,205,120,135,204,174,0,203,206,205,0,26,204,65,1,143,204,1,1,104,204,0,52,143,204,2,1,141,204,2,1,2,205,0,0,255,255,0,0,19,204,204,205,141,205,1,1,48,204,204,205,68,86,2,0,141,204,1,1,0,65,204,0,119,0,207,255,119,0,1,0,25,204,194,8,102,75,204,11,141,204,2,1,2,205,0,0,255,255,0,0,19,204,204,205,0,67,204,0,0,204,75,0,143,204,4,1,119,0,7,0,2,204,0,0,255,255,0,0,19,204,199,204,0,67,204,0,0,204,195,0,143,204,4,1,3,204,1,67,143,204,3,1,141,205,4,1,41,205,205,24,42,205,205,24,34,204,205,0,143,204,5,1,141,204,5,1,121,204,7,0,106,204,194,8,143,204,6,1,141,205,6,1,0,204,205,0,143,204,7,1,119,0,3,0,25,204,194,8,143,204,7,1,141,205,3,1,141,206,7,1,135,204,1,1,205,206,0,0,25,206,194,8,102,204,206,11,143,204,8,1,141,204,8,1,41,204,204,24,42,204,204,24,34,204,204,0,121,204,7,0,106,204,194,12,143,204,9,1,141,206,9,1,0,204,206,0,143,204,11,1,119,0,6,0,141,206,8,1,1,205,255,0,19,206,206,205,0,204,206,0,143,204,11,1,141,206,11,1,2,205,0,0,255,255,0,0,19,206,206,205,0,204,206,0,143,204,10,1,141,204,8,2,1,206,128,0,141,205,10,1,96,204,206,205,104,205,0,52,143,205,12,1,141,206,11,1,2,204,0,0,255,255,0,0,19,206,206,204,0,205,206,0,143,205,13,1,141,205,8,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,106,205,194,8,143,205,14,1,141,206,14,1,0,205,206,0,143,205,15,1,119,0,3,0,25,205,194,8,143,205,15,1,1,206,1,0,141,204,15,1,141,203,8,2,1,207,128,0,3,203,203,207,135,205,174,0,206,204,203,0,141,205,13,1,141,203,12,1,2,204,0,0,255,255,0,0,19,203,203,204,3,47,205,203,0,51,25,0,1,203,254,15,141,205,13,1,141,204,12,1,2,206,0,0,255,255,0,0,19,204,204,206,3,205,205,204,4,58,203,205,141,205,13,1], eb + 143360);
  HEAPU8.set([141,203,12,1,2,204,0,0,255,255,0,0,19,203,203,204,3,61,205,203,0,82,194,0,0,84,83,0,119,0,119,20,141,203,6,2,41,203,203,16,42,203,203,16,1,205,0,71,54,203,203,205,236,88,2,0,141,203,6,2,41,203,203,16,42,203,203,16,1,205,0,71,1,204,1,0,138,203,205,204,96,88,2,0,1,205,15,1,143,205,7,2,119,0,103,20,119,0,1,0,32,127,23,0,121,127,8,0,1,47,0,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,93,20,0,60,23,0,141,203,8,2,1,205,8,0,83,203,205,0,141,205,8,2,1,203,1,0,108,205,120,203,1,205,1,0,141,204,8,2,141,206,8,2,25,206,206,120,135,203,174,0,205,204,206,0,26,128,60,1,32,203,128,0,121,203,8,0,1,47,0,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,70,20,0,60,128,0,119,0,233,255,141,203,6,2,41,203,203,16,42,203,203,16,1,206,0,61,1,204,1,0,138,203,206,204,20,89,2,0,1,206,15,1,143,206,7,2,119,0,58,20,119,0,1,0,106,203,0,36,143,203,238,1,141,203,238,1,32,203,203,0,121,203,8,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,45,20,106,203,0,32,143,203,239,1,141,203,239,1,25,206,0,28,45,203,203,206,128,89,2,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,141,203,239,1,0,84,203,0,119,0,31,20,141,206,239,1,25,206,206,8,102,203,206,11,143,203,240,1,141,203,240,1,41,203,203,24,42,203,203,24,34,203,203,0,121,203,8,0,141,206,239,1,106,203,206,12,143,203,241,1,141,206,241,1,0,203,206,0,143,203,242,1,119,0,6,0,141,206,240,1,1,204,255,0,19,206,206,204,0,203,206,0,143,203,242,1,141,206,242,1,16,203,22,206,143,203,243,1,141,203,243,1,120,203,9,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,141,203,239,1,0,84,203,0,119,0,253,19,141,203,240,1,41,203,203,24,42,203,203,24,34,203,203,0,121,203,8,0,141,206,239,1,106,203,206,8,143,203,244,1,141,206,244,1,0,203,206,0,143,203,246,1,119,0,4,0,141,206,239,1,25,203,206,8,143,203,246,1,141,206,246,1,3,203,206,22,143,203,245,1,141,206,245,1,78,203,206,0,143,203,247,1,141,203,8,2,1,206,146,0,141,204,247,1,95,203,206,204,141,204,247,1,41,204,204,24,42,204,204,24,32,204,204,0,121,204,5,0,141,206,240,1,0,204,206,0,143,204,253,1,119,0,50,0,141,204,245,1,0,26,204,0,0,42,23,0,141,206,247,1,0,204,206,0,143,204,251,1,25,204,26,1,143,204,248,1,25,204,42,1,143,204,249,1,3,204,1,42,143,204,250,1,141,204,250,1,141,206,251,1,83,204,206,0,1,204,1,0,141,203,8,2,1,205,146,0,3,203,203,205,141,205,8,2,1,207,130,0,3,205,205,207,135,206,174,0,204,203,205,0,141,205,248,1,78,206,205,0,143,206,252,1,141,206,8,2,1,205,146,0,141,203,252,1,95,206,205,203,141,203,252,1,41,203,203,24,42,203,203,24,32,203,203,0,120,203,9,0,141,203,248,1,0,26,203,0,141,203,249,1,0,42,203,0,141,205,252,1,0,203,205,0,143,203,251,1,119,0,219,255,141,203,239,1,25,203,203,8,102,78,203,11,0,203,78,0,143,203,253,1,141,205,253,1,41,205,205,24,42,205,205,24,34,203,205,0,143,203,254,1,141,203,254,1,121,203,5,0,141,203,239,1,106,85,203,12,0,88,85,0,119,0,6,0,141,203,253,1,1,205,255,0,19,203,203,205,0,86,203,0,0,88,86,0,1,203,254,15,4,87,203,88,3,89,1,88,1,203,0,0,83,89,203,0,0,47,88,0,0,51,25,0,0,58,87,0,0,61,88,0,0,82,79,0,141,203,239,1,0,84,203,0,119,0,141,19,141,203,6,2,41,203,203,16,42,203,203,16,1,209,3,0,1,208,8,0,138,203,209,208,12,92,2,0,0,92,2,0,0,92,2,0,0,92,2,0,0,92,2,0,240,93,2,0,240,97,2,0,248,115,2,0,1,209,15,1,143,209,7,2,119,0,124,19,141,207,8,2,1,205,94,0,83,207,205,0,141,205,8,2,1,207,1,0,108,205,120,207,1,205,1,0,141,204,8,2,141,206,8,2,25,206,206,120,135,207,174,0,205,204,206,0,141,207,8,2,1,206,67,0,83,207,206,0,141,206,8,2,1,207,1,0,108,206,120,207,1,206,1,0,141,204,8,2,141,205,8,2,25,205,205,120,135,207,174,0,206,204,205,0,1,207,0,0,83,1,207,0,106,207,0,48,143,207,41,1,141,207,41,1,32,207,207,0,120,207,58,0,106,207,0,44,143,207,42,1,106,207,0,40,143,207,43,1,141,205,43,1,106,207,205,4,143,207,44,1,141,205,42,1,82,207,205,0,143,207,45,1,141,207,45,1,141,205,44,1,109,207,4,205,141,207,43,1,106,205,207,4,143,205,46,1,141,205,46,1,141,207,45,1,85,205,207,0,1,205,0,0,109,0,48,205,141,205,42,1,25,207,0,40,52,205,205,207,108,93,2,0,141,205,42,1,0,19,205,0,25,205,19,4,143,205,47,1,141,207,47,1,82,205,207,0,143,205,48,1,25,205,19,8,143,205,49,1,141,207,49,1,102,205,207,11,143,205,50,1,141,205,50,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,207,49,1,82,205,207,0,143,205,51,1,141,207,51,1,135,205,21,0,207,0,0,0,135,205,21,0,19,0,0,0,141,205,48,1,25,207,0,40,52,205,205,207,108,93,2,0,141,205,48,1,0,19,205,0,119,0,227,255,102,205,0,60,143,205,52,1,141,205,52,1,41,205,205,24,42,205,205,24,32,205,205,0,120,205,8,0,0,47,23,0,0,51,25,0,1,58,0,0,1,61,0,0,0,82,79,0,0,84,83,0,119,0,22,19,141,205,8,2,1,207,10,0,83,205,207,0,141,207,8,2,1,205,1,0,108,207,120,205,1,207,1,0,141,204,8,2,141,206,8,2,25,206,206,120,135,205,174,0,207,204,206,0,0,47,23,0,0,51,25,0,1,58,0,0,1,61,0,0,0,82,79,0,0,84,83,0,119,0,3,19,32,205,23,0,143,205,16,1,141,205,16,1,121,205,5,0,0,36,3,0,1,37,0,0,0,49,22,0,119,0,166,0,141,205,8,2,1,206,8,0,83,205,206,0,141,206,8,2,1,205,1,0,108,206,120,205,1,206,1,0,141,204,8,2,141,207,8,2,25,207,207,120,135,205,174,0,206,204,207,0,4,205,22,23,143,205,17,1,25,205,3,1,143,205,18,1,26,205,23,1,143,205,19,1,141,205,17,1,32,205,205,0,121,205,9,0,141,205,19,1,1,207,0,0,95,1,205,207,26,207,22,1,143,207,27,1,141,207,27,1,0,41,207,0,119,0,76,0,3,207,1,23,143,207,20,1,141,205,19,1,3,205,1,205,141,204,20,1,141,206,17,1,135,207,2,1,205,204,206,0,26,207,22,1,143,207,21,1,141,207,21,1,1,206,0,0,95,1,207,206,141,206,19,1,2,207,0,0,255,255,0,0,19,206,206,207,141,207,21,1,48,206,206,207,168,95,2,0,141,206,19,1,2,207,0,0,255,255,0,0,19,206,206,207,0,33,206,0,141,207,19,1,2,204,0,0,255,255,0,0,19,207,207,204,0,206,207,0,143,206,24,1,141,207,24,1,3,206,1,207,143,206,22,1,141,207,22,1,78,206,207,0,143,206,25,1,141,206,8,2,141,207,25,1,83,206,207,0,141,207,8,2,1,206,1,0,108,207,120,206,1,207,1,0,141,204,8,2,141,205,8,2,25,205,205,120,135,206,174,0,207,204,205,0,25,205,33,1,41,205,205,16,42,205,205,16,0,206,205,0,143,206,26,1,141,206,26,1,2,205,0,0,255,255,0,0,19,206,206,205,141,205,21,1,48,206,206,205,156,95,2,0,141,206,26,1,0,33,206,0,141,205,26,1,2,204,0,0,255,255,0,0,19,205,205,204,0,206,205,0,143,206,24,1,119,0,218,255,141,206,21,1,0,41,206,0,119,0,3,0,141,206,21,1,0,41,206,0,141,206,8,2,1,205,32,0,83,206,205,0,141,205,8,2,1,206,1,0,108,205,120,206,1,205,1,0,141,204,8,2,141,207,8,2,25,207,207,120,135,206,174,0,205,204,207,0,141,206,8,2,1,207,8,0,83,206,207,0,141,207,8,2,1,206,1,0,108,207,120,206,1,207,1,0,141,204,8,2,141,205,8,2,25,205,205,120,135,206,174,0,207,204,205,0,141,206,17,1,32,206,206,0,121,206,7,0,141,206,18,1,0,36,206,0,141,206,19,1,0,37,206,0,0,49,41,0,119,0,29,0,141,206,17,1,0,34,206,0,26,206,34,1,143,206,28,1,141,206,8,2,1,205,8,0,83,206,205,0,141,205,8,2,1,206,1,0,108,205,120,206,1,205,1,0,141,204,8,2,141,207,8,2,25,207,207,120,135,206,174,0,205,204,207,0,141,206,28,1,32,206,206,0,121,206,7,0,141,206,18,1,0,36,206,0,141,206,19,1,0,37,206,0,0,49,41,0,119,0,4,0,141,206,28,1,0,34,206,0,119,0,231,255,106,206,0,48,143,206,29,1,141,206,29,1,32,206,206,0,121,206,8,0,0,47,37,0,0,51,25,0,0,58,36,0,0,61,49,0,0,82,79,0,0,84,83,0,119,0,74,18,106,206,0,44,143,206,31,1,106,206,0,40,143,206,32,1,141,207,32,1,106,206,207,4,143,206,33,1,141,207,31,1,82,206,207,0,143,206,34,1,141,206,34,1,141,207,33,1,109,206,4,207,141,206,32,1,106,207,206,4,143,207,35,1,141,207,35,1,141,206,34,1,85,207,206,0,1,207,0,0,109,0,48,207,141,207,31,1,25,206,0,40,45,207,207,206,84,97,2,0,0,47,37,0,0,51,25,0,0,58,36,0,0,61,49,0,0,82,79,0,0,84,83,0,119,0,42,18,141,207,31,1,0,18,207,0,25,207,18,4,143,207,36,1,141,206,36,1,82,207,206,0,143,207,37,1,25,207,18,8,143,207,38,1,141,206,38,1,102,207,206,11,143,207,39,1,141,207,39,1,41,207,207,24,42,207,207,24,34,207,207,0,121,207,7,0,141,206,38,1,82,207,206,0,143,207,40,1,141,206,40,1,135,207,21,0,206,0,0,0,135,207,21,0,18,0,0,0,141,207,37,1,25,206,0,40,45,207,207,206,228,97,2,0,0,47,37,0,0,51,25,0,0,58,36,0,0,61,49,0,0,82,79,0,0,84,83,0,119,0,6,18,141,207,37,1,0,18,207,0,119,0,220,255,106,205,0,48,143,205,54,1,141,205,54,1,32,205,205,0,121,205,142,3,2,206,0,0,99,155,20,0,1,204,3,0,135,205,3,1,1,206,204,0,143,205,58,1,1,204,32,0,135,205,4,1,1,204,0,0,143,205,59,1,141,205,59,1,1,204,0,0,45,205,205,204,84,98,2,0,0,31,1,0,1,205,0,0,143,205,63,1,1,205,0,0,143,205,3,2,119,0,20,0,141,204,59,1,25,204,204,1,135,205,41,0,204,0,0,0,143,205,60,1,141,204,60,1,4,205,22,204,143,205,61,1,141,205,59,1,25,31,205,1,141,204,61,1,0,205,204,0,143,205,63,1,141,204,61,1,2,206,0,0,255,255,0,0,19,204,204,206,0,205,204,0,143,205,3,2,141,204,3,2,108,0,52,204,141,205,63,1,2,206,0,0,255,255,0,0,19,205,205,206,0,204,205,0,143,204,62,1,141,205,62,1,3,205,1,205,1,206,92,0,135,204,4,1,205,206,0,0,143,204,64,1,141,204,64,1,1,206,0,0,45,204,204,206,244,98,2,0,141,204,62,1,3,72,1,204,119,0,17,0,1,206,1,0,4,206,206,1,141,205,64,1,3,206,206,205,2,205,0,0,255,255,0,0,19,206,206,205,108,0,52,206,1,206,1,0,4,206,206,1,141,204,64,1,3,206,206,204,2,204,0,0,255,255,0,0,19,206,206,204,3,72,1,206,1,204,47,0,135,206,4,1,72,204,0,0,143,206,65,1,141,206,65,1,1,204,0,0,52,206,206,204,116,99,2,0,1,204,1,0,4,204,204,1,141,205,65,1,3,204,204,205,2,205,0,0,255,255,0,0,19,204,204,205,108,0,52,204,1,206,0,0,13,204,31,206,143,204,66,1,141,204,66,1,121,204,6,0,141,204,8,2,2,206,0,0,42,46,42,0,85,204,206,0,119,0,95,0,141,204,8,2,135,206,1,1,204,31,0,0,141,204,8,2,1,205,46,0,135,206,4,1,204,205,0,0,143,206,67,1,141,205,8,2,1,204,92,0,135,206,4,1,205,204,0,0,143,206,68,1,141,204,8,2,1,205,58,0,135,206,4,1,204,205,0,0,143,206,69,1,1,206,0,0,141,205,67,1,141,204,68,1,4,205,205,204,47,206,206,205,132,100,2,0,141,205,8,2,1,204,47,0,135,206,4,1,205,204,0,0,143,206,70,1,1,206,0,0,141,204,67,1,141,205,70,1,4,204,204,205,47,206,206,204,132,100,2,0,1,206,0,0,141,204,67,1,141,205,69,1,4,204,204,205,47,206,206,204,132,100,2,0,141,204,8,2,135,206,41,0,204,0,0,0,143,206,5,2,141,206,8,2,141,204,5,2,1,205,42,0,1,207,255,0,19,205,205,207,95,206,204,205,141,205,8,2,141,204,5,2,3,205,205,204,1,204,42,0,42,204,204,8,107,205,1,204,119,0,37,0,141,205,8,2,135,204,41,0,205,0,0,0,143,204,4,2,141,204,8,2,141,205,4,2,2,206,0,0,42,46,42,0,1,207,255,0,19,206,206,207,95,204,205,206,141,206,8,2,141,205,4,2,3,206,206,205,2,205,0,0,42,46,42,0,42,205,205,8,1,204,255,0,19,205,205,204,107,206,1,205,141,205,8,2,141,206,4,2,3,205,205,206,2,206,0,0,42,46,42,0,42,206,206,16,1,204,255,0,19,206,206,204,107,205,2,206,141,206,8,2,141,205,4,2,3,206,206,205,2,205,0,0,42,46,42,0,42,205,205,24,107,206,3,205,2,206,0,0,124,156,79,0,135,205,5,1,206,0,0,0,143,205,71,1,2,206,0,0,156,156,79,0,82,205,206,0,143,205,72,1,2,206,0,0,124,156,79,0,141,204,72,1,135,205,6,1,206,204,0,0,141,204,8,2,1,206,247,255,1,207,0,0,135,205,233,0,204,206,207,0,143,205,73,1,141,205,73,1,120,205,13,0,2,207,0,0,124,156,79,0,141,206,71,1,135,205,6,1,207,206,0,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,24,17,2,206,0,0,124,156,79,0,135,205,5,1,206,0,0,0,143,205,74,1,141,205,8,2,141,206,74,1,43,206,206,16,41,206,206,4,141,207,74,1,2,204,0,0,255,255,0,0,19,207,207,204,3,206,206,207,109,205,120,206,141,206,8,2,141,205,8,2,25,205,205,96,109,206,96,205,141,205,23,1,141,206,8,2,25,206,206,96,85,205,206,0,141,206,30,1,1,205,0,0,85,206,205,0,141,206,8,2,25,206,206,120,141,207,8,2,3,207,207,202,141,204,8,2,25,204,204,108,141,208,8,2,25,208,208,126,141,209,8,2,25,209,209,124,141,210,8,2,1,211,145,0,3,210,210,211,135,205,7,1,206,207,204,208,209,210,0,0,141,210,8,2,3,210,210,202,2,209,0,0,17,149,22,0,135,205,47,0,210,209,0,0,143,205,75,1,141,205,75,1,32,205,205,0,120,205,208,1,141,209,8,2,3,209,209,202,2,210,0,0,28,247,20,0,135,205,47,0,209,210,0,0,143,205,76,1,141,205,76,1,32,205,205,0,120,205,198,1,141,205,58,1,32,205,205,0,121,205,145,0,141,210,8,2,1,209,145,0,90,205,210,209,143,205,77,1,141,205,77,1,38,205,205,16,41,205,205,24,42,205,205,24,32,205,205,0,120,205,185,1,141,205,8,2,1,210,0,0,109,205,84,210,141,210,8,2,25,210,210,84,1,205,0,0,109,210,4,205,141,205,8,2,25,205,205,84,1,210,0,0,109,205,8,210,141,205,8,2,3,205,205,202,135,210,41,0,205,0,0,0,143,210,78,1,1,210,239,255,141,205,78,1,48,210,210,205,36,103,2,0,1,210,196,0,143,210,7,2,119,0,165,17,141,210,78,1,35,210,210,11,121,210,18,0,141,210,8,2,25,210,210,84,141,205,78,1,1,209,255,0,19,205,205,209,107,210,11,205,141,205,78,1,32,205,205,0,121,205,4,0,141,205,8,2,25,12,205,84,119,0,32,0,141,205,8,2,25,7,205,84,1,205,200,0,143,205,7,2,119,0,27,0,141,210,78,1,25,210,210,16,38,210,210,240,135,205,26,0,210,0,0,0,143,205,80,1,141,205,8,2,141,210,80,1,109,205,84,210,141,210,8,2,25,210,210,84,141,205,78,1,25,205,205,16,38,205,205,240,2,209,0,0,0,0,0,128,20,205,205,209,109,210,8,205,141,205,8,2,25,205,205,84,141,210,78,1,109,205,4,210,141,210,80,1,0,7,210,0,1,210,200,0,143,210,7,2,141,210,7,2,1,205,200,0,45,210,210,205,12,104,2,0,1,210,0,0,143,210,7,2,141,205,8,2,3,205,205,202,141,209,78,1,135,210,43,0,7,205,209,0,0,12,7,0,141,209,78,1,3,210,12,209,143,210,81,1,141,210,81,1,1,209,0,0,83,210,209,0,1,210,20,0,135,209,26,0,210,0,0,0,143,209,82,1,141,209,82,1,1,210,0,0,85,209,210,0,141,209,82,1,25,209,209,8,141,205,8,2,25,205,205,84,135,210,64,0,209,205,0,0,141,210,82,1,25,205,0,40,109,210,4,205,106,205,0,40,143,205,84,1,141,205,82,1,141,210,84,1,85,205,210,0,141,210,84,1,141,205,82,1,109,210,4,205,141,210,82,1,109,0,40,210,106,210,0,48,143,210,85,1,141,205,85,1,25,205,205,1,109,0,48,205,141,210,8,2,25,210,210,84,102,205,210,11,143,205,86,1,141,205,86,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,58,1,141,210,8,2,106,205,210,84,143,205,87,1,141,210,87,1,135,205,21,0,210,0,0,0,119,0,51,1,141,210,8,2,3,210,210,202,1,209,46,0,135,205,4,1,210,209,0,0,143,205,88,1,141,205,88,1,1,209,0,0,52,205,205,209,148,107,2,0,141,209,88,1,2,210,0,0,103,155,20,0,135,205,47,0,209,210,0,0,143,205,89,1,141,205,89,1,32,205,205,0,120,205,16,0,141,210,88,1,135,205,47,0,210,200,0,0,143,205,90,1,141,205,90,1,32,205,205,0,120,205,9,0,141,210,88,1,135,205,47,0,210,201,0,0,143,205,91,1,141,205,91,1,32,205,205,0,120,205,2,0,119,0,140,0,141,205,8,2,1,210,0,0,109,205,84,210,141,210,8,2,25,210,210,84,1,205,0,0,109,210,4,205,141,205,8,2,25,205,205,84,1,210,0,0,109,205,8,210,141,205,8,2,3,205,205,202,135,210,41,0,205,0,0,0,143,210,92,1,1,210,239,255,141,205,92,1,48,210,210,205,196,105,2,0,1,210,209,0,143,210,7,2,119,0,253,16,141,210,92,1,35,210,210,11,121,210,18,0,141,210,8,2,25,210,210,84,141,205,92,1,1,209,255,0,19,205,205,209,107,210,11,205,141,205,92,1,32,205,205,0,121,205,4,0,141,205,8,2,25,13,205,84,119,0,32,0,141,205,8,2,25,8,205,84,1,205,213,0,143,205,7,2,119,0,27,0,141,210,92,1,25,210,210,16,38,210,210,240,135,205,26,0,210,0,0,0,143,205,94,1,141,205,8,2,141,210,94,1,109,205,84,210,141,210,8,2,25,210,210,84,141,205,92,1,25,205,205,16,38,205,205,240,2,209,0,0,0,0,0,128,20,205,205,209,109,210,8,205,141,205,8,2,25,205,205,84,141,210,92,1,109,205,4,210,141,210,94,1,0,8,210,0,1,210,213,0,143,210,7,2,141,210,7,2,1,205,213,0,45,210,210,205,172,106,2,0,1,210,0,0,143,210,7,2,141,205,8,2,3,205,205,202,141,209,92,1,135,210,43,0,8,205,209,0,0,13,8,0,141,209,92,1,3,210,13,209,143,210,95,1,141,210,95,1,1,209,0,0,83,210,209,0,1,210,20,0,135,209,26,0,210,0,0,0,143,209,96,1,141,209,96,1,1,210,0,0,85,209,210,0,141,209,96,1,25,209,209,8,141,205,8,2,25,205,205,84,135,210,64,0,209,205,0,0,141,210,96,1,141,205,8,2,25,205,205,96,85,210,205,0,141,210,23,1,82,205,210,0,143,205,97,1,141,205,96,1,141,210,97,1,109,205,4,210,141,210,97,1,141,205,96,1,85,210,205,0,141,205,23,1,141,210,96,1,85,205,210,0,141,205,30,1,82,210,205,0,143,210,98,1,141,210,30,1,141,205,98,1,25,205,205,1,85,210,205,0,141,210,8,2,25,210,210,84,102,205,210,11,143,205,99,1,141,205,99,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,141,0,141,210,8,2,106,205,210,84,143,205,100,1,141,210,100,1,135,205,21,0,210,0,0,0,119,0,134,0,141,205,8,2,1,210,0,0,109,205,84,210,141,210,8,2,25,210,210,84,1,205,0,0,109,210,4,205,141,205,8,2,25,205,205,84,1,210,0,0,109,205,8,210,141,205,8,2,3,205,205,202,135,210,41,0,205,0,0,0,143,210,101,1,1,210,239,255,141,205,101,1,48,210,210,205,240,107,2,0,1,210,218,0,143,210,7,2,119,0,114,16,141,210,101,1,35,210,210,11,121,210,18,0,141,210,8,2,25,210,210,84,141,205,101,1,1,209,255,0,19,205,205,209,107,210,11,205,141,205,101,1,32,205,205,0,121,205,4,0,141,205,8,2,25,11,205,84,119,0,32,0,141,205,8,2,25,6,205,84,1,205,222,0,143,205,7,2,119,0,27,0,141,210,101,1,25,210,210,16,38,210,210,240,135,205,26,0,210,0,0,0,143,205,103,1,141,205,8,2,141,210,103,1,109,205,84,210,141,210,8,2,25,210,210,84,141,205,101,1,25,205,205,16,38,205,205,240,2,209,0,0,0,0,0,128,20,205,205,209,109,210,8,205,141,205,8,2,25,205,205,84,141,210,101,1,109,205,4,210,141,210,103,1,0,6,210,0,1,210,222,0,143,210,7,2,141,210,7,2,1,205,222,0,45,210,210,205,216,108,2,0,1,210,0,0,143,210,7,2,141,205,8,2,3,205,205,202,141,209,101,1,135,210,43,0,6,205,209,0,0,11,6,0,141,209,101,1,3,210,11,209,143,210,104,1,141,210,104,1,1,209,0,0,83,210,209,0,1,210,20,0,135,209,26,0,210,0,0,0,143,209,105,1,141,209,105,1,1,210,0,0,85,209,210,0,141,209,105,1,25,209,209,8,141,205,8,2,25,205,205,84,135,210,64,0,209,205,0,0,141,210,105,1,25,205,0,40,109,210,4,205,106,205,0,40,143,205,106,1,141,205,105,1,141,210,106,1,85,205,210,0,141,210,106,1,141,205,105,1,109,210,4,205,141,210,105,1,109,0,40,210,106,210,0,48,143,210,107,1,141,205,107,1,25,205,205,1,109,0,48,205,141,210,8,2,25,210,210,84,102,205,210,11,143,205,108,1,141,205,108,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,210,8,2,106,205,210,84,143,205,109,1,141,210,109,1,135,205,21,0,210,0,0,0,135,205,234,0,143,205,110,1,141,205,110,1,120,205,20,254,119,0,1,0,141,210,23,1,82,205,210,0,143,205,111,1,141,205,111,1,141,210,8,2,25,210,210,96,45,205,205,210,236,109,2,0,106,71,0,44,0,205,71,0,143,205,237,1,119,0,61,0,141,210,111,1,0,205,210,0,143,205,115,1,141,210,111,1,0,205,210,0,143,205,119,1,1,210,20,0,135,205,26,0,210,0,0,0,143,205,112,1,141,210,115,1,25,205,210,8,143,205,114,1,141,205,112,1,1,210,0,0,85,205,210,0,141,205,112,1,25,205,205,8,141,209,114,1,135,210,64,0,205,209,0,0,141,210,112,1,25,209,0,40,85,210,209,0,106,209,0,44,143,209,116,1,141,209,112,1,141,210,116,1,109,209,4,210,141,210,116,1,141,209,112,1,85,210,209,0,141,210,112,1,109,0,44,210,106,210,0,48,143,210,117,1,141,209,117,1,25,209,209,1,109,0,48,209,141,210,119,1,25,209,210,4,143,209,118,1,141,210,118,1,82,209,210,0,143,209,120,1,141,209,8,2,25,209,209,96,141,210,120,1,52,209,209,210,208,110,2,0,141,210,120,1,0,209,210,0,143,209,115,1,141,210,120,1,0,209,210,0,143,209,119,1,119,0,206,255,141,210,112,1,0,209,210,0,143,209,237,1,2,210,0,0,124,156,79,0,141,205,71,1,135,209,6,1,210,205,0,0,141,205,30,1,82,209,205,0,143,209,121,1,141,209,121,1,32,209,209,0,120,209,63,0,141,205,23,1,82,209,205,0,143,209,122,1,141,205,8,2,106,209,205,96,143,209,123,1,141,205,123,1,106,209,205,4,143,209,124,1,141,205,122,1,82,209,205,0,143,209,125,1,141,209,125,1,141,205,124,1,109,209,4,205,141,209,123,1,106,205,209,4,143,205,127,1,141,205,127,1,141,209,125,1,85,205,209,0,141,209,30,1,1,205,0,0,85,209,205,0,141,205,122,1,141,209,8,2,25,209,209,96,52,205,205,209,0,112,2,0,141,205,122,1,0,17,205,0,25,205,17,4,143,205,128,1,141,209,128,1,82,205,209,0,143,205,129,1,25,205,17,8,143,205,130,1,141,209,130,1,102,205,209,11,143,205,131,1,141,205,131,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,209,130,1,82,205,209,0,143,205,133,1,141,209,133,1,135,205,21,0,209,0,0,0,135,205,21,0,17,0,0,0,141,205,129,1,141,209,8,2,25,209,209,96,52,205,205,209,0,112,2,0,141,205,129,1,0,17,205,0,119,0,226,255,106,73,0,48,32,205,73,0,121,205,9,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,141,205,237,1,0,82,205,0,0,84,83,0,119,0,116,14,141,205,237,1,0,81,205,0,119,0,17,0,0,205,79,0,143,205,55,1,141,209,55,1,106,205,209,4,143,205,56,1,25,205,0,40,141,209,56,1,45,205,205,209,112,112,2,0,106,205,0,44,143,205,57,1,141,205,57,1,0,81,205,0,119,0,3,0,141,205,56,1,0,81,205,0,0,205,81,0,143,205,134,1,141,209,134,1,25,209,209,8,102,205,209,11,143,205,135,1,141,205,135,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,209,134,1,106,205,209,12,143,205,136,1,141,209,136,1,0,205,209,0,143,205,137,1,119,0,6,0,141,209,135,1,1,210,255,0,19,209,209,210,0,205,209,0,143,205,137,1,141,209,137,1,32,205,209,0,143,205,138,1,141,205,138,1,121,205,8,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,81,0,0,84,83,0,119,0,62,14,104,205,0,52,143,205,139,1,141,209,139,1,2,210,0,0,255,255,0,0,19,209,209,210,16,205,209,23,143,205,140,1,141,205,140,1,121,205,64,0,0,38,23,0,141,205,8,2,1,209,8,0,83,205,209,0,141,209,8,2,1,205,1,0,108,209,120,205,1,209,1,0,141,210,8,2,141,208,8,2,25,208,208,120,135,205,174,0,209,210,208,0,141,205,8,2,1,208,32,0,83,205,208,0,141,208,8,2,1,205,1,0,108,208,120,205,1,208,1,0,141,210,8,2,141,209,8,2,25,209,209,120,135,205,174,0,208,210,209,0,141,205,8,2,1,209,8,0,83,205,209,0,141,209,8,2,1,205,1,0,108,209,120,205,1,209,1,0,141,210,8,2,141,208,8,2,25,208,208,120,135,205,174,0,209,210,208,0,26,205,38,1,143,205,141,1,104,205,0,52,143,205,142,1,141,205,142,1,2,208,0,0,255,255,0,0,19,205,205,208,141,208,141,1,48,205,205,208,248,113,2,0,141,205,141,1,0,38,205,0,119,0,207,255,119,0,1,0,141,205,134,1,25,205,205,8,102,74,205,11,141,205,142,1,2,208,0,0,255,255,0,0,19,205,205,208,0,66,205,0,0,205,74,0,143,205,144,1,119,0,9,0,141,205,139,1,2,208,0,0,255,255,0,0,19,205,205,208,0,66,205,0,141,208,135,1,0,205,208,0,143,205,144,1,3,205,1,66,143,205,143,1,141,208,144,1,41,208,208,24,42,208,208,24,34,205,208,0,143,205,145,1,141,205,145,1,121,205,8,0,141,208,134,1,106,205,208,8,143,205,146,1,141,208,146,1,0,205,208,0,143,205,147,1,119,0,4,0,141,208,134,1,25,205,208,8,143,205,147,1,141,208,143,1,141,210,147,1,135,205,1,1,208,210,0,0,141,210,134,1,25,210,210,8,102,205,210,11,143,205,148,1,141,205,148,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,8,0,141,210,134,1,106,205,210,12,143,205,149,1,141,210,149,1,0,205,210,0,143,205,152,1,119,0,6,0,141,210,148,1,1,208,255,0,19,210,210,208,0,205,210,0,143,205,152,1,141,210,152,1,2,208,0,0,255,255,0,0,19,210,210,208,0,205,210,0,143,205,151,1,141,205,8,2,1,210,128,0,141,208,151,1,96,205,210,208,104,208,0,52,143,208,153,1,141,210,152,1,2,205,0,0,255,255,0,0,19,210,210,205,0,208,210,0,143,208,154,1,141,208,148,1,41,208,208,24,42,208,208,24,34,208,208,0,121,208,8,0,141,210,134,1,106,208,210,8,143,208,155,1,141,210,155,1,0,208,210,0,143,208,156,1,119,0,4,0,141,210,134,1,25,208,210,8,143,208,156,1,1,210,1,0,141,205,156,1,141,209,8,2,1,204,128,0,3,209,209,204,135,208,174,0,210,205,209,0,141,208,154,1,141,209,153,1,2,205,0,0,255,255,0,0,19,209,209,205,3,47,208,209,0,51,25,0,1,209,254,15,141,208,154,1,141,205,153,1,2,210,0,0,255,255,0,0,19,205,205,210,3,208,208,205,4,58,209,208,141,208,154,1,141,209,153,1,2,205,0,0,255,255,0,0,19,209,209,205,3,61,208,209,0,82,81,0,0,84,83,0,119,0,129,13,141,207,8,2,1,206,10,0,83,207,206,0,141,206,8,2,1,207,1,0,108,206,120,207,1,206,1,0,141,204,8,2,141,205,8,2,25,205,205,120,135,207,174,0,206,204,205,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,110,13,141,203,6,2,41,203,203,16,42,203,203,16,1,209,0,80,47,203,203,209,196,149,2,0,141,203,6,2,41,203,203,16,42,203,203,16,1,210,0,72,1,208,1,7,138,203,210,208,132,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0,120,144,2,0], eb + 153600);
  HEAPU8.seteb + 163840);
  HEAPU8.set([0,84,83,0,119,0,125,0,3,108,1,23,26,205,108,1,78,109,205,0,41,205,109,24,42,205,205,24,32,205,205,32,121,205,22,0,26,30,108,1,26,110,30,1,78,69,110,0,41,205,69,24,42,205,205,24,32,205,205,32,121,205,3,0,0,30,110,0,119,0,249,255,26,111,30,2,0,112,111,0,78,76,112,0,26,113,112,1,41,205,76,24,42,205,205,24,32,205,205,32,121,205,3,0,0,45,112,0,119,0,14,0,0,112,113,0,119,0,247,255,26,52,108,1,26,114,52,1,78,70,114,0,41,205,70,24,42,205,205,24,32,205,205,32,121,205,3,0,0,45,114,0,119,0,3,0,0,52,114,0,119,0,247,255,25,56,45,1,16,205,1,56,125,115,205,56,1,0,0,0,1,208,255,255,4,209,115,108,47,208,208,209,208,168,2,0,4,208,115,108,0,205,208,0,119,0,5,0,1,208,0,0,4,209,115,108,4,208,208,209,0,205,208,0,0,116,205,0,4,205,115,108,32,205,205,0,121,205,8,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,60,0,1,32,0,0,0,55,23,0,141,205,8,2,1,208,8,0,83,205,208,0,141,208,8,2,1,205,1,0,108,208,120,205,1,208,1,0,141,209,8,2,141,203,8,2,25,203,203,120,135,205,174,0,208,209,203,0,26,117,55,1,141,203,8,2,25,203,203,120,141,209,8,2,1,208,0,0,135,205,254,0,203,209,208,0,141,205,8,2,78,118,205,0,41,205,118,24,42,205,205,24,32,205,205,0,121,205,20,0,141,208,8,2,3,208,208,202,135,205,255,0,208,0,0,0,141,205,8,2,102,119,205,120,141,205,8,2,92,120,205,202,1,208,255,0,19,208,119,208,1,209,255,0,3,208,208,209,1,209,255,0,19,208,208,209,1,209,255,0,19,209,120,209,1,203,0,0,135,205,0,1,208,209,203,0,25,121,32,1,48,205,121,116,220,169,2,0,0,32,121,0,0,55,117,0,119,0,207,255,0,47,117,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,119,0,1,0,141,205,7,2,1,203,15,1,45,205,205,203,124,173,2,0,1,205,0,0,143,205,7,2,2,203,0,0,0,255,0,0,19,203,44,203,0,205,203,0,143,205,176,1,141,205,176,1,32,205,205,0,121,205,206,0,106,205,0,48,143,205,177,1,141,205,177,1,32,205,205,0,120,205,58,0,106,205,0,44,143,205,178,1,106,205,0,40,143,205,179,1,141,203,179,1,106,205,203,4,143,205,180,1,141,203,178,1,82,205,203,0,143,205,181,1,141,205,181,1,141,203,180,1,109,205,4,203,141,205,179,1,106,203,205,4,143,203,182,1,141,203,182,1,141,205,181,1,85,203,205,0,1,203,0,0,109,0,48,203,141,203,178,1,25,205,0,40,52,203,203,205,40,171,2,0,141,203,178,1,0,15,203,0,25,203,15,4,143,203,183,1,141,205,183,1,82,203,205,0,143,203,184,1,25,203,15,8,143,203,185,1,141,205,185,1,102,203,205,11,143,203,186,1,141,203,186,1,41,203,203,24,42,203,203,24,34,203,203,0,121,203,7,0,141,205,185,1,82,203,205,0,143,203,188,1,141,205,188,1,135,203,21,0,205,0,0,0,135,203,21,0,15,0,0,0,141,203,184,1,25,205,0,40,52,203,203,205,40,171,2,0,141,203,184,1,0,15,203,0,119,0,227,255,16,203,23,22,143,203,189,1,141,203,189,1,121,203,91,0,135,203,8,1,143,203,190,1,141,203,190,1,121,203,4,0,0,48,3,0,0,54,22,0,119,0,86,0,141,203,8,2,1,205,32,0,83,203,205,0,141,205,8,2,1,203,1,0,108,205,120,203,1,205,1,0,141,209,8,2,141,208,8,2,25,208,208,120,135,203,174,0,205,209,208,0,4,203,22,23,143,203,191,1,141,203,8,2,141,208,191,1,2,209,0,0,255,255,0,0,19,208,208,209,96,203,202,208,3,208,1,23,143,208,192,1,1,203,1,0,141,209,192,1,141,205,8,2,3,205,205,202,135,208,174,0,203,209,205,0,141,208,8,2,1,205,8,0,83,208,205,0,141,205,8,2,1,208,1,0,108,205,120,208,1,205,1,0,141,209,8,2,141,203,8,2,25,203,203,120,135,208,174,0,205,209,203,0,0,20,22,0,26,208,20,1,143,208,196,1,141,203,196,1,90,208,1,203,143,208,197,1,3,208,1,20,143,208,198,1,141,208,198,1,141,203,197,1,83,208,203,0,141,203,8,2,1,208,8,0,83,203,208,0,141,208,8,2,1,203,1,0,108,208,120,203,1,208,1,0,141,209,8,2,141,205,8,2,25,205,205,120,135,203,174,0,208,209,205,0,141,205,196,1,16,203,23,205,143,203,199,1,141,203,199,1,121,203,4,0,141,203,196,1,0,20,203,0,119,0,227,255,25,203,22,1,143,203,193,1,141,203,193,1,1,205,0,0,95,1,203,205,26,205,3,1,143,205,195,1,141,205,195,1,0,48,205,0,141,205,193,1,0,54,205,0,119,0,3,0,0,48,3,0,0,54,22,0,1,203,255,0,19,203,44,203,0,205,203,0,143,205,200,1,3,205,1,23,143,205,201,1,141,205,201,1,141,203,200,1,83,205,203,0,25,203,23,1,143,203,202,1,141,205,202,1,16,203,54,205,143,203,203,1,141,203,203,1,121,203,13,0,26,203,48,1,143,203,204,1,25,203,54,1,143,203,205,1,141,203,202,1,1,205,0,0,95,1,203,205,141,205,204,1,0,53,205,0,141,205,205,1,0,59,205,0,119,0,3,0,0,53,48,0,0,59,54,0,1,203,1,0,141,209,8,2,1,208,146,0,3,209,209,208,141,208,8,2,1,210,130,0,3,208,208,210,135,205,174,0,203,209,208,0,141,205,202,1,0,47,205,0,0,51,25,0,0,58,53,0,0,61,59,0,0,82,79,0,0,84,83,0,119,0,7,0,0,47,23,0,0,51,25,0,0,58,3,0,0,61,22,0,0,82,79,0,0,84,83,0,32,205,58,0,143,205,206,1,141,205,206,1,121,205,4,0,0,21,61,0,0,24,51,0,119,0,8,0,0,3,58,0,0,22,61,0,0,23,47,0,0,25,51,0,0,79,82,0,0,83,84,0,119,0,163,231,141,205,7,2,32,205,205,3,121,205,23,0,141,205,8,2,1,208,21,0,109,205,112,208,141,208,8,2,25,208,208,112,1,205,3,0,109,208,4,205,141,208,8,2,25,208,208,112,2,209,0,0,43,155,20,0,141,203,8,2,25,203,203,80,135,205,18,0,208,209,203,0,141,205,8,2,1,203,130,0,1,209,0,0,96,205,203,209,1,209,5,0,143,209,7,2,119,0,34,0,141,209,7,2,32,209,209,87,121,209,5,0,141,203,8,2,135,209,42,0,203,0,0,0,119,0,27,0,141,209,7,2,1,203,196,0,45,209,209,203,88,174,2,0,141,203,8,2,25,203,203,84,135,209,42,0,203,0,0,0,119,0,18,0,141,209,7,2,1,203,209,0,45,209,209,203,124,174,2,0,141,203,8,2,25,203,203,84,135,209,42,0,203,0,0,0,119,0,9,0,141,209,7,2,1,203,218,0,45,209,209,203,156,174,2,0,141,203,8,2,25,203,203,84,135,209,42,0,203,0,0,0,141,209,7,2,32,209,209,5,121,209,5,0,1,203,1,0,107,0,63,203,0,21,22,0,0,24,25,0,32,203,21,0,143,203,207,1,141,203,207,1,121,203,4,0,141,203,8,2,137,203,0,0,139,0,0,0,121,24,41,0,106,203,0,32,143,203,208,1,141,209,208,1,106,203,209,4,143,203,209,1,141,209,208,1,82,203,209,0,143,203,210,1,141,203,210,1,141,209,209,1,109,203,4,209,141,203,208,1,106,209,203,4,143,209,212,1,141,209,212,1,141,203,210,1,85,209,203,0,106,203,0,36,143,203,213,1,141,209,213,1,26,209,209,1,109,0,36,209,141,203,208,1,25,203,203,8,102,209,203,11,143,209,214,1,141,209,214,1,41,209,209,24,42,209,209,24,34,209,209,0,121,209,7,0,141,203,208,1,106,209,203,8,143,209,215,1,141,203,215,1,135,209,21,0,203,0,0,0,141,203,208,1,135,209,21,0,203,0,0,0,141,209,8,2,1,203,0,0,85,209,203,0,141,203,8,2,1,209,0,0,109,203,4,209,141,209,8,2,1,203,0,0,109,209,8,203,135,203,41,0,1,0,0,0,143,203,216,1,1,203,239,255,141,209,216,1,48,203,203,209,196,175,2,0,141,209,8,2,135,203,42,0,209,0,0,0,141,203,216,1,35,203,203,11,121,203,17,0,141,203,8,2,141,209,216,1,1,205,255,0,19,209,209,205,107,203,11,209,141,209,216,1,32,209,209,0,121,209,4,0,141,209,8,2,0,9,209,0,119,0,30,0,141,209,8,2,0,4,209,0,1,209,42,1,143,209,7,2,119,0,25,0,141,203,216,1,25,203,203,16,38,203,203,240,135,209,26,0,203,0,0,0,143,209,217,1,141,209,8,2,141,203,217,1,85,209,203,0,141,203,8,2,141,209,216,1,25,209,209,16,38,209,209,240,2,205,0,0,0,0,0,128,20,209,209,205,109,203,8,209,141,209,8,2,141,203,216,1,109,209,4,203,141,203,217,1,0,4,203,0,1,203,42,1,143,203,7,2,141,203,7,2,1,209,42,1,45,203,203,209,144,176,2,0,141,209,216,1,135,203,43,0,4,1,209,0,0,9,4,0,141,209,216,1,3,203,9,209,143,203,219,1,141,203,219,1,1,209,0,0,83,203,209,0,1,203,20,0,135,209,26,0,203,0,0,0,143,209,220,1,141,209,220,1,1,203,0,0,85,209,203,0,141,209,220,1,25,209,209,8,141,205,8,2,135,203,64,0,209,205,0,0,141,203,220,1,25,205,0,28,85,203,205,0,106,205,0,32,143,205,221,1,141,205,220,1,141,203,221,1,109,205,4,203,141,203,221,1,141,205,220,1,85,203,205,0,141,203,220,1,109,0,32,203,106,203,0,36,143,203,222,1,141,205,222,1,25,205,205,1,109,0,36,205,141,203,8,2,102,205,203,11,143,205,223,1,141,205,223,1,41,205,205,24,42,205,205,24,34,205,205,0,121,205,7,0,141,203,8,2,82,205,203,0,143,205,224,1,141,203,224,1,135,205,21,0,203,0,0,0,106,205,0,48,143,205,225,1,141,205,225,1,32,205,205,0,120,205,58,0,106,205,0,44,143,205,226,1,106,205,0,40,143,205,227,1,141,203,227,1,106,205,203,4,143,205,228,1,141,203,226,1,82,205,203,0,143,205,229,1,141,205,229,1,141,203,228,1,109,205,4,203,141,205,227,1,106,203,205,4,143,203,230,1,141,203,230,1,141,205,229,1,85,203,205,0,1,203,0,0,109,0,48,203,141,203,226,1,25,205,0,40,52,203,203,205,80,178,2,0,141,203,226,1,0,14,203,0,25,203,14,4,143,203,231,1,141,205,231,1,82,203,205,0,143,203,232,1,25,203,14,8,143,203,233,1,141,205,233,1,102,203,205,11,143,203,234,1,141,203,234,1,41,203,203,24,42,203,203,24,34,203,203,0,121,203,7,0,141,205,233,1,82,203,205,0,143,203,235,1,141,205,235,1,135,203,21,0,205,0,0,0,135,203,21,0,14,0,0,0,141,203,232,1,25,205,0,40,52,203,203,205,80,178,2,0,141,203,232,1,0,14,203,0,119,0,227,255,135,203,9,1,0,1,0,0,141,203,8,2,137,203,0,0,139,0,0,0,140,3,3,1,0,0,0,0,2,200,0,0,255,0,0,0,2,201,0,0,96,11,0,0,2,202,0,0,208,129,237,0,1,203,0,0,143,203,0,1,136,204,0,0,0,203,204,0,143,203,1,1,136,203,0,0,1,204,160,0,3,203,203,204,137,203,0,0,135,203,10,1,80,36,2,0,41,203,36,16,42,203,203,16,32,203,203,0,121,203,7,0,1,4,0,0,84,2,4,0,141,203,1,1,137,203,0,0,1,203,1,0,139,203,0,0,1,8,0,0,1,161,0,0,2,203,0,0,137,223,53,2,78,143,203,0,41,203,143,24,42,203,203,24,32,203,203,0,120,203,123,0,2,203,0,0,219,156,79,0,78,151,203,0,2,203,0,0,212,156,79,0,82,159,203,0,41,203,151,24,42,203,203,24,34,203,203,0,1,204,254,0,16,204,204,159,19,203,203,204,121,203,4,0,1,203,7,0,143,203,0,1,119,0,40,0,3,160,1,161,78,162,160,0,41,203,162,24,42,203,203,24,1,204,10,0,1,205,18,0,138,203,204,205,164,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,160,179,2,0,168,179,2,0,119,0,14,0,119,0,2,0,119,0,1,0,41,203,151,24,42,203,203,24,34,203,203,0,121,203,4,0,1,203,7,0,143,203,0,1,119,0,5,0,2,164,0,0,208,156,79,0,1,203,8,0,143,203,0,1,141,203,0,1,32,203,203,7,121,203,9,0,1,203,0,0,143,203,0,1,2,203,0,0,208,156,79,0,82,163,203,0,0,164,163,0,1,203,8,0,143,203,0,1,141,203,0,1,32,203,203,8,121,203,36,0,1,203,0,0,143,203,0,1,141,203,1,1,85,203,164,0,2,204,0,0,34,211,19,0,141,205,1,1,135,203,24,0,204,205,0,0,2,203,0,0,219,156,79,0,78,165,203,0,41,203,165,24,42,203,203,24,34,203,203,0,121,203,11,0,2,203,0,0,208,156,79,0,82,166,203,0,1,203,0,0,83,166,203,0,2,203,0,0,212,156,79,0,1,205,0,0,85,203,205,0,119,0,10,0,2,205,0,0,208,156,79,0,1,203,0,0,83,205,203,0,2,203,0,0,219,156,79,0,1,205,0,0,83,203,205,0,119,0,1,0,3,167,1,161,78,168,167,0,41,205,168,24,42,205,205,24,1,203,10,0,1,204,4,0,138,205,203,204,204,180,2,0,200,180,2,0,200,180,2,0,208,180,2,0,119,0,3,0,119,0,6,0,119,0,5,0,2,203,0,0,208,156,79,0,135,205,68,0,203,168,0,0,102,169,0,38,41,205,169,24,42,205,205,24,32,205,205,0,121,205,76,0,3,170,1,161,78,171,170,0,41,205,171,24,42,205,205,24,1,204,10,0,1,203,18,0,138,205,204,203,100,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,92,181,2,0,112,181,2,0,0,177,171,0,119,0,20,0,1,204,17,0,143,204,0,1,119,0,17,0,1,204,0,0,107,0,40,204,1,203,0,0,107,0,39,203,25,199,0,43,25,203,199,11,143,203,2,1,1,203,0,0,83,199,203,0,25,199,199,1,141,203,2,1,54,203,199,203,140,181,2,0,1,204,1,0,107,0,38,204,119,0,227,6,141,205,0,1,32,205,205,17,121,205,20,0,1,205,0,0,143,205,0,1,102,173,0,37,41,205,173,24,42,205,205,24,32,205,205,13,121,205,3,0,1,177,10,0,119,0,11,0,102,174,0,42,102,175,0,41,1,204,13,0,41,203,175,24,42,203,203,24,33,203,203,0,135,205,11,1,0,204,174,203,78,12,170,0,0,177,12,0,102,176,0,42,1,203,1,0,135,205,11,1,0,177,176,203,78,178,170,0,107,0,37,178,119,0,198,6,102,179,0,39,41,205,179,24,42,205,205,24,32,205,205,0,121,205,179,0,3,180,1,161,78,181,180,0,41,205,181,24,42,205,205,24,1,204,42,0,1,203,50,0,138,205,204,203,32,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,36,183,2,0,48,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,52,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,56,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,28,183,2,0,60,183,2,0,119,0,11,0,119,0,1,0,1,204,23,0,143,204,0,1,119,0,7,0,119,0,253,255,119,0,252,255,119,0,251,255,1,204,1,0,107,0,39,204,119,0,125,6,141,205,0,1,32,205,205,23,121,205,71,0,1,205,0,0,143,205,0,1,2,205,0,0,44,156,79,0,82,182,205,0,32,205,182,7,121,205,64,0,1,205,98,4,135,183,181,0,205,0,0,0,102,184,0,42,1,204,0,0,1,203,0,0,1,206,255,255,1,207,255,255,1,208,0,0,135,205,12,1,204,203,206,207,208,184,183,0,2,205,0,0,200,129,237,0,80,185,205,0,2,205,0,0,212,129,237,0,80,186,205,0,80,187,202,0,2,205,0,0,201,129,237,0,1,208,2,0,83,205,208,0,1,205,0,0,107,202,1,205,1,205,0,0,83,202,205,0,2,205,0,0,212,129,237,0,107,205,1,183,2,205,0,0,44,156,79,0,82,188,205,0,32,205,188,7,121,205,3,0,135,205,13,1,119,0,4,0,1,208,16,0,135,205,205,0,208,0,0,0,2,205,0,0,200,129,237,0,84,205,185,0,2,205,0,0,212,129,237,0,84,205,186,0,84,202,187,0,1,208,0,0,107,0,40,208,1,205,0,0,107,0,38,205,1,208,0,0,107,0,39,208,25,199,0,43,25,208,199,11,143,208,2,1,1,208,0,0,83,199,208,0,25,199,199,1,141,208,2,1,54,208,199,208,80,184,2,0,119,0,52,6,141,208,1,1,1,205,144,0,1,207,12,0,97,208,205,207,141,207,1,1,1,205,144,0,3,207,207,205,1,205,1,0,109,207,4,205,141,205,1,1,19,207,181,200,109,205,8,207,141,205,1,1,1,208,144,0,3,205,205,208,2,208,0,0,46,211,19,0,141,206,1,1,25,206,206,8,135,207,18,0,205,208,206,0,1,206,0,0,107,0,40,206,1,207,0,0,107,0,38,207,1,206,0,0,107,0,39,206,25,199,0,43,25,206,199,11,143,206,2,1,1,206,0,0,83,199,206,0,25,199,199,1,141,206,2,1,54,206,199,206,228,184,2,0,119,0,15,6,1,206,98,4,135,189,181,0,206,0,0,0,3,190,1,161,78,191,190,0,19,206,191,200,26,206,206,48,35,206,206,10,121,206,22,0,102,192,0,53,19,206,192,200,34,206,206,10,120,206,4,0,1,206,31,0,143,206,0,1,119,0,22,6,25,206,0,43,19,207,192,200,90,193,206,207,25,206,0,43,19,207,192,200,19,208,191,200,1,205,208,0,3,208,208,205,19,205,193,200,27,205,205,10,3,208,208,205,19,208,208,200,95,206,207,208,119,0,241,5,41,208,191,24,42,208,208,24,32,208,208,59,121,208,12,0,102,194,0,53,19,208,194,200,25,208,208,1,35,208,208,10,120,208,2,0,119,0,231,5,25,207,194,1,41,207,207,24,42,207,207,24,107,0,53,207,119,0,226,5,102,26,0,40,41,207,26,24,42,207,207,24,32,207,207,0,120,207,177,0,2,207,0,0,44,156,79,0,82,27,207,0,32,207,27,7,120,207,4,0,1,207,38,0,143,207,0,1,119,0,236,5,41,207,191,24,42,207,207,24,1,203,104,0,1,205,5,0,138,207,203,205,164,186,2,0,16,186,2,0,16,186,2,0,16,186,2,0,168,186,2,0,141,208,1,1,1,206,128,0,1,205,12,0,97,208,206,205,141,205,1,1,1,206,128,0,3,205,205,206,1,206,1,0,109,205,4,206,141,206,1,1,19,205,191,200,109,206,24,205,141,206,1,1,1,208,128,0,3,206,206,208,2,208,0,0,177,211,19,0,141,203,1,1,25,203,203,24,135,205,18,0,206,208,203,0,1,203,0,0,107,0,40,203,1,205,0,0,107,0,38,205,1,203,0,0,107,0,39,203,25,199,0,43,25,203,199,11,143,203,2,1,1,203,0,0,83,199,203,0,25,199,199,1,141,203,2,1,54,203,199,203,136,186,2,0,119,0,166,5,119,0,2,0,119,0,1,0,102,28,0,43,41,207,28,24,42,207,207,24,1,209,1,0,1,206,5,0,138,207,209,206,64,187,2,0,216,186,2,0,124,187,2,0,216,186,2,0,48,188,2,0,141,205,1,1,1,209,136,0,1,204,12,0,97,205,209,204,141,204,1,1,1,209,136,0,3,204,204,209,1,209,1,0,109,204,4,209,141,209,1,1,19,204,28,200,109,209,16,204,141,204,1,1,25,204,204,16,19,209,191,200,109,204,4,209,141,204,1,1,1,205,136,0,3,204,204,205,2,205,0,0,147,211,19,0,141,206,1,1,25,206,206,16,135,209,18,0,204,205,206,0,119,0,67,0,41,205,191,24,42,205,205,24,32,205,205,108,135,203,14,1,205,0,0,0,1,203,18,7,135,29,181,0,203,0,0,0,19,205,29,200,25,205,205,1,2,208,0,0,255,255,0,0,19,205,205,208,108,0,54,205,119,0,52,0,102,30,0,42,1,203,0,0,1,208,0,0,1,206,255,255,1,204,255,255,1,209,0,0,135,205,12,1,203,208,206,204,209,30,189,0,2,205,0,0,200,129,237,0,80,31,205,0,2,205,0,0,212,129,237,0,80,32,205,0,80,33,202,0,2,205,0,0,201,129,237,0,1,209,2,0,83,205,209,0,1,205,0,0,107,202,1,205,1,205,0,0,83,202,205,0,2,205,0,0,212,129,237,0,107,205,1,189,2,205,0,0,44,156,79,0,82,34,205,0,32,205,34,7,121,205,3,0,135,205,13,1,119,0,4,0,1,209,16,0,135,205,205,0,209,0,0,0,2,205,0,0,200,129,237,0,84,205,31,0,2,205,0,0,212,129,237,0,84,205,32,0,84,202,33,0,119,0,7,0,41,209,191,24,42,209,209,24,32,209,209,108,135,205,15,1,209,0,0,0,119,0,1,0,1,209,0,0,107,0,40,209,1,207,0,0,107,0,38,207,1,209,0,0,107,0,39,209,25,199,0,43,25,209,199,11,143,209,2,1,1,209,0,0,83,199,209,0,25,199,199,1,141,209,2,1,54,209,199,209,108,188,2,0,119,0,45,5,41,209,191,24,42,209,209,24,1,208,62,0,1,207,56,0,138,209,208,207,4,190,2,0,124,189,2,0,124,189,2,0,160,190,2,0,36,192,2,0,200,193,2,0,108,195,2,0,124,189,2,0,124,189,2,0,124,189,2,0,240,196,2,0,244,196,2,0,248,196,2,0,104,198,2,0,124,189,2,0,208,199,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,0,201,2,0,124,189,2,0,4,203,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,128,203,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,124,189,2,0,188,207,2,0,124,189,2,0,108,208,2,0,141,206,1,1,1,207,12,0,109,206,80,207,141,207,1,1,25,207,207,80,1,206,1,0,109,207,4,206,141,206,1,1,19,207,191,200,109,206,72,207,141,206,1,1,25,206,206,80,2,204,0,0,158,212,19,0,141,208,1,1,25,208,208,72,135,207,18,0,206,204,208,0,1,208,0,0,107,0,40,208,1,207,0,0,107,0,38,207,1,208,0,0,107,0,39,208,25,199,0,43,25,208,199,11,143,208,2,1,1,208,0,0,83,199,208,0,25,199,199,1,141,208,2,1,54,208,199,208,232,189,2,0,119,0,206,4,2,208,0,0,44,156,79,0,82,158,208,0,32,208,158,7,121,208,4,0,1,207,1,0,107,0,40,207,119,0,198,4,141,207,1,1,1,208,12,0,109,207,88,208,141,208,1,1,25,208,208,88,1,207,1,0,109,208,4,207,141,208,1,1,25,208,208,88,2,204,0,0,111,212,19,0,141,206,1,1,25,206,206,64,135,207,18,0,208,204,206,0,1,206,0,0,107,0,40,206,1,207,0,0,107,0,38,207,1,206,0,0,107,0,39,206,25,199,0,43,25,206,199,11,143,206,2,1,1,206,0,0,83,199,206,0,25,199,199,1,141,206,2,1,54,206,199,206,132,190,2,0,119,0,167,4,2,205,0,0,44,156,79,0,82,84,205,0,32,205,84,7,121,205,3,0,1,13,28,7,119,0,5,0,19,205,189,200,41,205,205,1,1,207,80,4,3,13,205,207,135,85,181,0,13,0,0,0,2,207,0,0,44,156,79,0,82,86,207,0,32,207,86,7,121,207,3,0,1,14,16,7,119,0,5,0,19,207,189,200,41,207,207,1,1,205,81,4,3,14,207,205,135,87,181,0,14,0,0,0,102,88,0,43,41,207,88,24,42,207,207,24,32,207,207,0,121,207,4,0,1,207,1,0,0,205,207,0,119,0,3,0,19,207,88,200,0,205,207,0,0,195,205,0,19,207,87,200,48,207,207,195,76,191,2,0,1,207,0,0,0,205,207,0,119,0,5,0,19,207,87,200,4,207,207,195,19,207,207,200,0,205,207,0,0,7,205,0,2,205,0,0,200,129,237,0,80,89,205,0,2,205,0,0,212,129,237,0,80,90,205,0,80,91,202,0,2,205,0,0,201,129,237,0,1,207,2,0,83,205,207,0,107,202,1,7,83,202,85,0,2,207,0,0,212,129,237,0,107,207,1,189,2,207,0,0,44,156,79,0,82,92,207,0,32,207,92,7,121,207,3,0,135,207,13,1,119,0,4,0,1,205,16,0,135,207,205,0,205,0,0,0,2,207,0,0,200,129,237,0,84,207,89,0,2,207,0,0,212,129,237,0,84,207,90,0,84,202,91,0,1,205,0,0,107,0,40,205,1,207,0,0,107,0,38,207,1,205,0,0,107,0,39,205,25,199,0,43,25,205,199,11,143,205,2,1,1,205,0,0,83,199,205,0,25,199,199,1,141,205,2,1,54,205,199,205,8,192,2,0,119,0,70,4,2,205,0,0,44,156,79,0,82,93,205,0,32,205,93,7,121,205,3,0,1,15,28,7,119,0,5,0,19,205,189,200,41,205,205,1,1,207,80,4,3,15,205,207,135,94,181,0,15,0,0,0,2,207,0,0,44,156,79,0,82,95,207,0,32,207,95,7,121,207,3,0,1,16,16,7,119,0,5,0,19,207,189,200,41,207,207,1,1,205,81,4,3,16,207,205,135,96,181,0,16,0,0,0,102,97,0,43,41,207,97,24,42,207,207,24,32,207,207,0,121,207,4,0,1,207,1,0,0,205,207,0,119,0,3,0,19,207,97,200,0,205,207,0,0,196,205,0,104,98,0,54,19,207,96,200,3,207,196,207,2,206,0,0,255,255,0,0,19,206,98,206,48,207,207,206,232,192,2,0,19,207,96,200,3,207,196,207,0,205,207,0,119,0,6,0,2,207,0,0,255,255,0,0,19,207,98,207,3,207,207,200,0,205,207,0,0,10,205,0,2,205,0,0,200,129,237,0,80,99,205,0,2,205,0,0,212,129,237,0,80,100,205,0,80,101,202,0,2,205,0,0,201,129,237,0,1,207,2,0,83,205,207,0,19,205,10,200,107,202,1,205,83,202,94,0,2,205,0,0,212,129,237,0,107,205,1,189,2,205,0,0,44,156,79,0,82,102,205,0,32,205,102,7,121,205,3,0,135,205,13,1,119,0,4,0,1,207,16,0,135,205,205,0,207,0,0,0,2,205,0,0,200,129,237,0,84,205,99,0,2,205,0,0,212,129,237,0,84,205,100,0,84,202,101,0,1,207,0,0,107,0,40,207,1,205,0,0,107,0,38,205,1,207,0,0,107,0,39,207,25,199,0,43,25,207,199,11,143,207,2,1,1,207,0,0,83,199,207,0,25,199,199,1,141,207,2,1,54,207,199,207,172,193,2,0,119,0,221,3,2,207,0,0,44,156,79,0,82,103,207,0,32,207,103,7,121,207,3,0,1,17,28,7,119,0,5,0,19,207,189,200,41,207,207,1,1,205,80,4,3,17,207,205,135,104,181,0,17,0,0,0,2,205,0,0,44,156,79,0,82,105,205,0,32,205,105,7,121,205,3,0,1,18,16,7,119,0,5,0,19,205,189,200,41,205,205,1,1,207,81,4,3,18,205,207,135,106,181,0,18,0,0,0,102,107,0,43,41,205,107,24,42,205,205,24,32,205,205,0,121,205,4,0,1,205,1,0,0,207,205,0,119,0,3,0,19,205,107,200,0,207,205,0,0,197,207,0,104,108,0,56,19,205,104,200,3,205,197,205,2,206,0,0,255,255,0,0,19,206,108,206,48,205,205,206,140,194,2,0,19,205,104,200,3,205,197,205,0,207,205,0,119,0,6,0,2,205,0,0,255,255,0,0,19,205,108,205,3,205,205,200,0,207,205,0,0,6,207,0,2,207,0,0,200,129,237,0,80,109,207,0,2,207,0,0,212,129,237,0,80,110,207,0,80,111,202,0,2,207,0,0,201,129,237,0,1,205,2,0,83,207,205,0,107,202,1,106,19,205,6,200,83,202,205,0,2,205,0,0,212,129,237,0,107,205,1,189,2,205,0,0,44,156,79,0,82,112,205,0,32,205,112,7,121,205,3,0,135,205,13,1,119,0,4,0,1,207,16,0,135,205,205,0,207,0,0,0,2,205,0,0,200,129,237,0,84,205,109,0,2,205,0,0,212,129,237,0,84,205,110,0,84,202,111,0,1,207,0,0,107,0,40,207,1,205,0,0,107,0,38,205,1,207,0,0,107,0,39,207,25,199,0,43,25,207,199,11,143,207,2,1,1,207,0,0,83,199,207,0,25,199,199,1,141,207,2,1,54,207,199,207,80,195,2,0,119,0,116,3,2,207,0,0,44,156,79,0,82,113,207,0,32,207,113,7,121,207,3,0,1,19,28,7,119,0,5,0,19,207,189,200,41,207,207,1,1,205,80,4,3,19,207,205,135,114,181,0,19,0,0,0,2,205,0,0,44,156,79,0,82,115,205,0,32,205,115,7,121,205,3,0,1,20,16,7,119,0,5,0,19,205,189,200,41,205,205,1,1,207,81,4,3,20,205,207,135,116,181,0,20,0,0,0,102,117,0,43,41,205,117,24,42,205,205,24,32,205,205,0,121,205,4,0,1,205,1,0,0,207,205,0,119,0,3,0,19,205,117,200,0,207,205,0,0,198,207,0,19,205,114,200,48,205,205,198,24,196,2,0,1,205,0,0,0,207,205,0,119,0,5,0,19,205,114,200,4,205,205,198,19,205,205,200,0,207,205,0,0,9,207,0,2,207,0,0,200,129,237,0,80,118,207,0,2,207,0,0,212,129,237,0,80,119,207,0,80,120,202,0,2,207,0,0,201,129,237,0,1,205,2,0,83,207,205,0,107,202,1,116,83,202,9,0,2,205,0,0,212,129,237,0,107,205,1,189,2,205,0,0,44,156,79,0,82,121,205,0,32,205,121,7,121,205,3,0,135,205,13,1,119,0,4,0,1,207,16,0,135,205,205,0,207,0,0,0,2,205,0,0,200,129,237,0,84,205,118,0,2,205,0,0,212,129,237,0,84,205,119,0,84,202,120,0,1,207,0,0,107,0,40,207,1,205,0,0,107,0,38,205,1,207,0,0,107,0,39,207,25,199,0,43,25,207,199,11,143,207,2,1,1,207,0,0,83,199,207,0,25,199,199,1,141,207,2,1,54,207,199,207,212,196,2,0,119,0,19,3,119,0,4,1,119,0,132,1,102,122,0,43,41,207,122,24,42,207,207,24,1,205,0,0,1,208,3,0,138,207,205,208,104,197,2,0,28,197,2,0,116,197,2,0,141,206,1,1,1,205,12,0,109,206,104,205,141,205,1,1,25,205,205,104,1,206,1,0,109,205,4,206,141,206,1,1,19,205,122,200,109,206,48,205,141,206,1,1,25,206,206,104,2,204,0,0,17,212,19,0,141,208,1,1,25,208,208,48,135,205,18,0,206,204,208,0,119,0,5,0,1,206,2,0,107,0,43,206,119,0,2,0,119,0,1,0,102,123,0,42,1,205,0,0,1,208,0,0,1,204,255,255,1,206,255,255,1,203,0,0,135,207,12,1,205,208,204,206,203,123,189,0,1,203,0,0,107,0,40,203,1,207,0,0,107,0,38,207,1,203,0,0,107,0,39,203,25,199,0,43,25,203,199,11,143,203,2,1,1,203,0,0,83,199,203,0,25,199,199,1,141,203,2,1,54,203,199,203,192,197,2,0,2,203,0,0,200,129,237,0,80,124,203,0,2,203,0,0,212,129,237,0,80,125,203,0,80,126,202,0,2,203,0,0,201,129,237,0,1,207,2,0,83,203,207,0,1,203,0,0,107,202,1,203,1,203,0,0,83,202,203,0,2,203,0,0,212,129,237,0,107,203,1,189,2,203,0,0,44,156,79,0,82,127,203,0,32,203,127,7,121,203,3,0,135,203,13,1,119,0,4,0,1,207,16,0,135,203,205,0,207,0,0,0,2,203,0,0,200,129,237,0,84,203,124,0,2,203,0,0,212,129,237,0,84,203,125,0,84,202,126,0,119,0,181,2,2,203,0,0,44,156,79,0,82,138,203,0,32,203,138,7,121,203,3,0,1,23,28,7,119,0,5,0,19,203,189,200,41,203,203,1,1,204,80,4,3,23,203,204,135,139,181,0,23,0,0,0,2,204,0,0,44,156,79,0,82,140,204,0,32,204,140,7,121,204,3,0,1,24,16,7,119,0,5,0,19,204,189,200,41,204,204,1,1,203,81,4,3,24,204,203,135,141,181,0,24,0,0,0,102,142,0,42,104,144,0,56,1,204,32,0,2,206,0,0,255,255,0,0,19,206,144,206,19,207,139,200,4,206,206,207,2,207,0,0,255,255,0,0,19,206,206,207,1,207,1,0,135,203,16,1,204,142,189,206,207,0,0,0,2,203,0,0,200,129,237,0,80,145,203,0,2,203,0,0,212,129,237,0,80,146,203,0,80,147,202,0,2,203,0,0,201,129,237,0,1,207,2,0,83,203,207,0,107,202,1,141,83,202,139,0,2,207,0,0,212,129,237,0,107,207,1,189,2,207,0,0,44,156,79,0,82,148,207,0,32,207,148,7,121,207,3,0,135,207,13,1,119,0,4,0,1,203,16,0,135,207,205,0,203,0,0,0,2,207,0,0,200,129,237,0,84,207,145,0,2,207,0,0,212,129,237,0,84,207,146,0,84,202,147,0,1,203,0,0,107,0,40,203,1,207,0,0,107,0,38,207,1,203,0,0,107,0,39,203,25,199,0,43,25,203,199,11,143,203,2,1,1,203,0,0,83,199,203,0,25,199,199,1,141,203,2,1,54,203,199,203,180,199,2,0,119,0,91,2,2,203,0,0,44,156,79,0,82,149,203,0,32,203,149,7,121,203,5,0,1,207,28,7,135,203,181,0,207,0,0,0,119,0,7,0,19,207,189,200,41,207,207,1,1,206,80,4,3,207,207,206,135,203,181,0,207,0,0,0,2,203,0,0,44,156,79,0,82,150,203,0,32,203,150,7,121,203,3,0,1,25,16,7,119,0,5,0,19,203,189,200,41,203,203,1,1,207,81,4,3,25,203,207,135,152,181,0,25,0,0,0,104,153,0,54,104,154,0,56,102,155,0,43,41,203,155,24,42,203,203,24,32,203,203,0,121,203,4,0,1,203,255,255,0,207,203,0,119,0,6,0,1,203,0,0,19,206,155,200,4,203,203,206,19,203,203,200,0,207,203,0,0,156,207,0,102,157,0,42,1,203,0,0,2,206,0,0,255,255,0,0,19,206,153,206,3,206,206,200,19,206,206,200,2,204,0,0,255,255,0,0,19,204,154,204,3,204,204,200,19,204,204,200,1,208,255,255,135,207,12,1,152,203,206,204,156,157,208,0,1,208,0,0,107,0,40,208,1,207,0,0,107,0,38,207,1,208,0,0,107,0,39,208,25,199,0,43,25,208,199,11,143,208,2,1,1,208,0,0,83,199,208,0,25,199,199,1,141,208,2,1,54,208,199,208,228,200,2,0,119,0,15,2,102,67,0,60,41,204,67,24,42,204,204,24,32,204,204,0,121,204,18,0,1,205,1,0,107,0,60,205,141,205,1,1,1,204,12,0,109,205,112,204,141,204,1,1,25,204,204,112,1,205,2,0,109,204,4,205,141,204,1,1,25,204,204,112,2,206,0,0,253,211,19,0,141,207,1,1,25,207,207,40,135,205,18,0,204,206,207,0,102,68,0,43,41,205,68,24,42,205,205,24,32,205,205,0,121,205,5,0,1,207,1,0,107,0,43,207,1,71,1,0,119,0,2,0,0,71,68,0,102,69,0,44,41,207,69,24,42,207,207,24,32,207,207,0,121,207,5,0,1,205,1,0,107,0,44,205,1,74,1,0,119,0,2,0,0,74,69,0,19,205,71,200,0,70,205,0,104,72,0,54,2,205,0,0,255,255,0,0,19,205,72,205,48,205,205,70,220,201,2,0,19,207,72,200,107,0,43,207,19,207,72,200,0,77,207,0,119,0,2,0,0,77,71,0,19,207,74,200,0,73,207,0,104,75,0,56,2,207,0,0,255,255,0,0,19,207,75,207,48,207,207,73,20,202,2,0,19,205,75,200,107,0,44,205,19,205,75,200,0,79,205,0,119,0,2,0,0,79,74,0,26,205,77,1,41,205,205,24,42,205,205,24,0,76,205,0,107,0,43,76,26,205,79,1,41,205,205,24,42,205,205,24,0,78,205,0,107,0,44,78,2,205,0,0,200,129,237,0,80,80,205,0,2,205,0,0,212,129,237,0,80,81,205,0,80,82,202,0,2,205,0,0,201,129,237,0,1,207,2,0,83,205,207,0,107,202,1,76,83,202,78,0,2,207,0,0,212,129,237,0,107,207,1,189,2,207,0,0,44,156,79,0,82,83,207,0,32,207,83,7,121,207,3,0,135,207,13,1,119,0,4,0,1,205,16,0,135,207,205,0,205,0,0,0,2,207,0,0,200,129,237,0,84,207,80,0,2,207,0,0,212,129,237,0,84,207,81,0,84,202,82,0,1,205,0,0,107,0,40,205,1,207,0,0,107,0,38,207,1,205,0,0,107,0,39,205,25,199,0,43,25,205,199,11,143,205,2,1,1,205,0,0,83,199,205,0,25,199,199,1,141,205,2,1,54,205,199,205,232,202,2,0,119,0,142,1,141,203,1,1,1,207,12,0,109,203,96,207,141,207,1,1,25,207,207,96,1,203,1,0,109,207,4,203,141,207,1,1,25,207,207,96,2,206,0,0,68,212,19,0,141,204,1,1,25,204,204,56,135,203,18,0,207,206,204,0,1,204,0,0,107,0,40,204,1,203,0,0,107,0,38,203,1,204,0,0,107,0,39,204,25,199,0,43,25,204,199,11,143,204,2,1,1,204,0,0,83,199,204,0,25,199,199,1,141,204,2,1,54,204,199,204,100,203,2,0,119,0,111,1,2,207,0,0,44,156,79,0,82,35,207,0,32,207,35,7,121,207,3,0,1,206,225,255,107,0,42,206,1,5,0,0,0,37,35,0,32,38,37,7,25,206,0,43,3,39,206,5,121,38,14,0,78,40,39,0,26,206,40,17,41,206,206,24,42,206,206,24,19,206,206,200,34,206,206,7,121,206,7,0,2,206,0,0,212,211,19,0,19,207,40,200,26,207,207,17,90,41,206,207,83,39,41,0,1,207,1,0,107,0,41,207,78,42,39,0,41,207,42,24,42,207,207,24,1,205,0,0,1,206,48,0,138,207,205,206,204,204,2,0,236,204,2,0,20,205,2,0,200,204,2,0,68,205,2,0,80,205,2,0,200,204,2,0,120,205,2,0,152,205,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,188,205,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,200,204,2,0,192,205,2,0,16,206,2,0,20,206,2,0,24,206,2,0,28,206,2,0,32,206,2,0,36,206,2,0,40,206,2,0,200,204,2,0,200,204,2,0,44,206,2,0,200,206,2,0,204,206,2,0,208,206,2,0,212,206,2,0,216,206,2,0,220,206,2,0,224,206,2,0,119,0,135,0,1,205,0,0,107,0,41,205,1,205,225,255,1,206,7,0,125,43,38,205,206,0,0,0,107,0,42,43,119,0,127,0,1,206,0,0,1,205,8,0,125,44,38,206,205,0,0,0,102,45,0,42,19,206,45,200,20,206,44,206,19,206,206,200,107,0,42,206,119,0,117,0,1,206,16,0,1,205,0,0,125,46,38,206,205,0,0,0,102,47,0,42,19,206,47,200,20,206,46,206,19,206,206,200,107,0,42,206,1,206,61,0,143,206,0,1,119,0,105,0,1,206,61,0,143,206,0,1,119,0,102,0,1,206,2,0,1,205,128,0,125,49,38,206,205,0,0,0,102,50,0,42,19,206,50,200,20,206,49,206,19,206,206,200,107,0,42,206,119,0,92,0,121,38,5,0,102,51,0,42,39,205,51,4,107,0,42,205,119,0,87,0,1,206,112,0,107,0,42,206,119,0,84,0,1,206,254,0,125,52,38,206,200,0,0,0,102,53,0,42,19,205,53,200,19,205,52,205,19,205,205,200,107,0,42,205,119,0,75,0,119,0,247,255,38,205,38,1,41,205,205,3,3,205,201,205,102,54,205,7,102,55,0,42,40,206,54,255,19,206,55,206,107,0,42,206,78,56,39,0,38,206,38,1,41,206,206,3,3,206,201,206,19,205,56,200,26,205,205,30,90,57,206,205,40,205,54,255,19,205,55,205,20,205,57,205,107,0,42,205,119,0,54,0,119,0,236,255,119,0,235,255,119,0,234,255,119,0,233,255,119,0,232,255,119,0,231,255,119,0,230,255,38,205,38,1,41,205,205,3,3,205,201,205,102,58,205,7,1,205,0,0,1,206,4,0,125,59,38,205,206,0,0,0,102,60,0,42,19,205,58,200,22,205,205,59,21,205,205,200,19,204,60,200,19,205,205,204,19,205,205,200,107,0,42,205,78,61,39,0,38,205,38,1,41,205,205,3,3,205,201,205,19,206,61,200,26,206,206,40,90,62,205,206,1,205,4,0,1,206,0,0,125,63,38,205,206,0,0,0,19,205,58,200,22,205,205,59,21,205,205,200,19,204,60,200,19,205,205,204,20,205,205,63,19,204,62,200,22,204,204,59,20,205,205,204,19,205,205,200,107,0,42,205,119,0,8,0,119,0,217,255,119,0,216,255,119,0,215,255,119,0,214,255,119,0,213,255,119,0,212,255,119,0,211,255,141,207,0,1,32,207,207,61,121,207,24,0,1,207,0,0,143,207,0,1,121,38,5,0,102,48,0,42,39,205,48,8,107,0,42,205,119,0,17,0,141,205,1,1,1,207,12,0,109,205,120,207,141,207,1,1,25,207,207,120,1,205,1,0,109,207,4,205,141,207,1,1,25,207,207,120,2,206,0,0,219,211,19,0,141,204,1,1,25,204,204,32,135,205,18,0,207,206,204,0,119,0,1,0,102,64,0,53,19,205,64,200,16,65,5,205,120,65,2,0,119,0,8,0,25,66,5,1,2,205,0,0,44,156,79,0,82,11,205,0,0,5,66,0,0,37,11,0,119,0,11,255,1,204,0,0,107,0,40,204,1,205,0,0,107,0,38,205,1,204,0,0,107,0,39,204,25,199,0,43,25,204,199,11,143,204,2,1,1,204,0,0,83,199,204,0,25,199,199,1,141,204,2,1,54,204,199,204,160,207,2,0,119,0,96,0,2,204,0,0,44,156,79,0,82,134,204,0,32,204,134,7,121,204,3,0,1,21,28,7,119,0,5,0,19,204,189,200,41,204,204,1,1,203,80,4,3,21,204,203,135,135,181,0,21,0,0,0,107,0,58,135,2,203,0,0,44,156,79,0,82,136,203,0], eb + 174080);
  HEAPU8.set([32,203,136,7,121,203,3,0,1,22,16,7,119,0,5,0,19,203,189,200,41,203,203,1,1,204,81,4,3,22,203,204,135,137,181,0,22,0,0,0,107,0,59,137,1,203,0,0,107,0,40,203,1,204,0,0,107,0,38,204,1,203,0,0,107,0,39,203,25,199,0,43,25,203,199,11,143,203,2,1,1,203,0,0,83,199,203,0,25,199,199,1,141,203,2,1,54,203,199,203,80,208,2,0,119,0,52,0,102,128,0,59,102,129,0,58,2,204,0,0,200,129,237,0,80,130,204,0,2,204,0,0,212,129,237,0,80,131,204,0,80,132,202,0,2,204,0,0,201,129,237,0,1,203,2,0,83,204,203,0,107,202,1,128,83,202,129,0,2,203,0,0,212,129,237,0,107,203,1,189,2,203,0,0,44,156,79,0,82,133,203,0,32,203,133,7,121,203,3,0,135,203,13,1,119,0,4,0,1,204,16,0,135,203,205,0,204,0,0,0,2,203,0,0,200,129,237,0,84,203,130,0,2,203,0,0,212,129,237,0,84,203,131,0,84,202,132,0,1,204,0,0,107,0,40,204,1,203,0,0,107,0,38,203,1,204,0,0,107,0,39,204,25,199,0,43,25,204,199,11,143,204,2,1,1,204,0,0,83,199,204,0,25,199,199,1,141,204,2,1,54,204,199,204,28,209,2,0,119,0,1,0,25,209,8,1,41,209,209,16,42,209,209,16,0,3,209,0,80,172,2,0,2,209,0,0,255,255,0,0,19,209,3,209,2,208,0,0,255,255,0,0,19,208,172,208,47,209,209,208,132,209,2,0,0,8,3,0,2,209,0,0,255,255,0,0,19,209,3,209,0,161,209,0,119,0,88,248,0,4,3,0,1,209,155,0,143,209,0,1,119,0,1,0,141,209,0,1,32,209,209,31,121,209,11,0,2,208,0,0,80,211,19,0,2,207,0,0,116,211,19,0,1,204,29,2,2,206,0,0,128,211,19,0,135,209,38,0,208,207,204,206,119,0,23,0,141,209,0,1,32,209,209,38,121,209,11,0,2,206,0,0,134,211,19,0,2,204,0,0,116,211,19,0,1,207,37,2,2,208,0,0,128,211,19,0,135,209,38,0,206,204,207,208,119,0,10,0,141,209,0,1,1,208,155,0,45,209,209,208,32,210,2,0,84,2,4,0,141,209,1,1,137,209,0,0,1,209,1,0,139,209,0,0,1,209,0,0,139,209,0,0,140,0,172,0,0,0,0,0,2,163,0,0,255,0,0,0,2,164,0,0,255,255,0,0,2,165,0,0,58,231,19,0,1,159,0,0,136,166,0,0,0,160,166,0,136,166,0,0,1,167,144,0,3,166,166,167,137,166,0,0,2,166,0,0,200,129,237,0,78,146,166,0,41,166,146,24,42,166,166,24,1,170,0,0,1,167,17,0,138,166,170,167,228,211,2,0,232,211,2,0,236,211,2,0,240,211,2,0,200,210,2,0,200,210,2,0,244,211,2,0,248,211,2,0,200,210,2,0,200,210,2,0,252,211,2,0,200,210,2,0,0,212,2,0,200,210,2,0,200,210,2,0,200,210,2,0,4,212,2,0,19,168,146,163,34,168,168,18,120,168,20,0,1,167,14,0,109,160,112,167,25,167,160,112,1,168,3,0,109,167,4,168,19,167,146,163,109,160,8,167,25,168,160,112,2,169,0,0,238,216,19,0,25,170,160,8,135,167,18,0,168,169,170,0,1,170,1,0,135,167,17,1,170,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,41,167,146,24,42,167,167,24,32,167,167,11,120,167,102,0,2,167,0,0,212,129,237,0,78,104,167,0,41,167,104,24,42,167,167,24,32,167,167,0,121,167,4,0,135,105,195,0,0,1,105,0,119,0,5,0,26,167,104,1,41,167,167,24,42,167,167,24,0,1,167,0,19,167,1,163,0,106,167,0,1,167,1,0,19,170,1,163,15,107,167,170,121,107,22,0,19,170,1,163,34,108,170,26,121,108,12,0,2,170,0,0,144,161,23,0,41,167,106,2,94,109,170,167,1,170,0,0,52,170,109,170,184,211,2,0,1,0,0,0,0,3,1,0,1,159,16,0,119,0,68,0,1,167,15,0,135,170,17,1,167,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,61,0,1,0,0,0,0,3,1,0,1,159,16,0,119,0,57,0,119,0,8,0,119,0,7,0,119,0,6,0,119,0,5,0,119,0,4,0,119,0,3,0,119,0,2,0,119,0,1,0,2,167,0,0,212,129,237,0,80,10,167,0,2,167,0,0,124,156,79,0,135,20,18,1,167,0,0,0,19,168,20,164,41,168,168,4,109,160,120,168,25,168,160,120,108,168,4,20,25,168,160,120,135,47,183,0,168,10,0,0,2,168,0,0,56,92,17,0,82,64,168,0,19,168,47,163,55,168,168,64,112,212,2,0,1,167,6,0,135,168,17,1,167,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,2,168,0,0,232,156,79,0,82,78,168,0,19,168,47,163,41,168,168,2,94,89,78,168,1,168,0,0,45,168,89,168,176,212,2,0,1,167,6,0,135,168,17,1,167,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,6,0,19,168,47,163,0,0,168,0,1,3,0,0,1,159,16,0,119,0,1,0,32,166,159,16,121,166,6,3,2,166,0,0,200,129,237,0,78,6,166,0,41,166,6,24,42,166,166,24,1,168,0,0,1,171,15,0,138,166,168,171,120,213,2,0,172,214,2,0,132,215,2,0,120,216,2,0,40,213,2,0,40,213,2,0,108,217,2,0,20,219,2,0,100,219,2,0,228,219,2,0,112,220,2,0,192,220,2,0,40,213,2,0,196,220,2,0,52,224,2,0,1,168,14,0,109,160,64,168,25,168,160,64,1,167,3,0,109,168,4,167,19,168,6,163,109,160,56,168,25,167,160,64,2,170,0,0,238,216,19,0,25,171,160,56,135,168,18,0,167,170,171,0,1,171,1,0,135,168,17,1,171,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,219,2,2,170,0,0,232,156,79,0,82,110,170,0,41,170,0,2,3,111,110,170,82,112,111,0,82,113,112,0,106,114,113,28,19,170,114,163,135,115,19,1,170,112,0,0,2,170,0,0,232,156,79,0,82,116,170,0,41,170,0,2,3,117,116,170,82,118,117,0,41,170,115,16,42,170,170,16,34,170,170,0,121,170,8,0,82,119,118,0,106,120,119,28,19,170,120,163,135,121,19,1,170,118,0,0,0,157,121,0,119,0,40,0,102,122,118,29,41,170,122,24,42,170,170,24,32,170,170,255,121,170,21,0,1,167,12,0,109,160,104,167,25,167,160,104,1,170,1,0,109,167,4,170,25,167,160,104,2,169,0,0,11,217,19,0,25,168,160,16,135,170,18,0,167,169,168,0,2,170,0,0,232,156,79,0,82,7,170,0,41,170,0,2,3,5,7,170,82,8,5,0,1,2,2,0,0,124,8,0,119,0,3,0,0,2,122,0,0,124,118,0,82,123,124,0,106,125,123,28,19,170,125,163,135,126,19,1,170,124,0,0,19,170,2,163,0,127,170,0,38,170,126,224,19,170,170,164,20,170,170,127,19,170,170,164,0,157,170,0,2,170,0,0,208,129,237,0,84,170,157,0,2,170,0,0,200,129,237,0,84,170,157,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,142,2,2,170,0,0,208,129,237,0,102,128,170,1,41,170,128,24,42,170,170,24,32,170,170,0,120,170,7,0,1,168,13,0,135,170,17,1,168,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,2,170,0,0,232,156,79,0,82,129,170,0,41,170,0,2,3,130,129,170,82,131,130,0,82,132,131,0,106,133,132,28,19,170,133,163,135,134,19,1,170,131,0,0,41,170,134,16,42,170,170,16,34,170,170,0,121,170,20,0,2,170,0,0,232,156,79,0,82,135,170,0,41,170,0,2,3,136,135,170,82,137,136,0,82,138,137,0,106,139,138,28,19,170,139,163,135,140,19,1,170,137,0,0,2,170,0,0,200,129,237,0,19,168,140,163,83,170,168,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,95,2,1,170,1,0,135,168,17,1,170,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,88,2,2,168,0,0,232,156,79,0,82,141,168,0,41,168,0,2,3,142,141,168,82,143,142,0,82,144,143,0,106,145,144,28,19,168,145,163,135,147,19,1,168,143,0,0,1,168,255,63,19,170,147,164,47,168,168,170,92,216,2,0,2,168,0,0,160,130,237,0,82,148,168,0,2,168,0,0,208,129,237,0,80,149,168,0,1,170,0,0,108,160,120,170,2,170,0,0,232,156,79,0,82,150,170,0,41,170,0,2,3,151,150,170,82,11,151,0,82,12,11,0,106,13,12,64,2,170,0,0,204,129,237,0,80,14,170,0,38,170,13,127,41,168,148,4,2,169,0,0,240,255,15,0,19,168,168,169,19,169,149,164,3,168,168,169,25,169,160,120,135,15,20,1,170,11,168,14,169,0,0,0,120,15,2,0,119,0,8,0,104,16,160,120,2,170,0,0,200,129,237,0,84,170,16,0,1,4,1,0,137,160,0,0,139,4,0,0,1,169,1,0,135,170,17,1,169,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,27,2,2,170,0,0,232,156,79,0,82,17,170,0,41,170,0,2,3,18,17,170,82,19,18,0,82,21,19,0,106,22,21,28,19,170,22,163,135,23,19,1,170,19,0,0,1,170,255,63,19,169,23,164,47,170,170,169,80,217,2,0,2,170,0,0,160,130,237,0,82,24,170,0,2,170,0,0,208,129,237,0,80,25,170,0,1,169,0,0,108,160,120,169,2,169,0,0,232,156,79,0,82,26,169,0,41,169,0,2,3,27,26,169,82,28,27,0,82,29,28,0,106,30,29,68,2,169,0,0,204,129,237,0,80,31,169,0,38,169,30,127,41,170,24,4,2,168,0,0,240,255,15,0,19,170,170,168,19,168,25,164,3,170,170,168,25,168,160,120,135,32,20,1,169,28,170,31,168,0,0,0,120,32,2,0,119,0,8,0,104,33,160,120,2,169,0,0,200,129,237,0,84,169,33,0,1,4,1,0,137,160,0,0,139,4,0,0,1,168,1,0,135,169,17,1,168,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,222,1,2,169,0,0,232,156,79,0,82,34,169,0,41,169,0,2,3,35,34,169,82,36,35,0,82,37,36,0,106,38,37,28,19,169,38,163,135,39,19,1,169,36,0,0,41,169,39,16,42,169,169,16,34,169,169,0,121,169,26,0,2,169,0,0,232,156,79,0,82,40,169,0,41,169,0,2,3,41,40,169,82,42,41,0,82,43,42,0,106,44,43,28,19,169,44,163,135,45,19,1,169,42,0,0,2,169,0,0,200,129,237,0,19,168,45,164,43,168,168,6,19,168,168,163,38,168,168,1,26,168,168,1,41,168,168,24,42,168,168,24,83,169,168,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,182,1,1,169,0,0,109,160,120,169,2,169,0,0,232,156,79,0,82,46,169,0,41,169,0,2,3,48,46,169,82,49,48,0,82,50,49,0,106,51,50,16,19,168,51,163,25,170,160,120,1,167,1,0,135,169,21,1,168,49,170,167,1,169,0,0,85,160,169,0,2,169,0,0,232,156,79,0,82,52,169,0,41,169,0,2,3,53,52,169,82,54,53,0,82,55,54,0,106,56,55,16,19,168,56,163,1,167,2,0,135,169,21,1,168,54,160,167,106,57,160,120,82,58,160,0,2,169,0,0,200,129,237,0,16,168,57,58,41,168,168,31,42,168,168,31,83,169,168,0,2,168,0,0,232,156,79,0,82,59,168,0,41,168,0,2,3,60,59,168,82,61,60,0,82,62,61,0,106,63,62,16,19,169,63,163,25,167,160,120,1,170,0,0,135,168,21,1,169,61,167,170,1,169,12,0,109,160,96,169,25,169,160,96,1,168,1,0,109,169,4,168,109,160,24,0,25,169,160,96,2,170,0,0,27,217,19,0,25,167,160,24,135,168,18,0,169,170,167,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,116,1,1,167,12,0,109,160,88,167,25,167,160,88,1,168,1,0,109,167,4,168,109,160,32,0,25,167,160,88,2,170,0,0,83,217,19,0,25,169,160,32,135,168,18,0,167,170,169,0,2,168,0,0,200,129,237,0,1,169,255,255,83,168,169,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,96,1,19,169,3,163,34,65,169,2,121,65,3,0,1,156,0,0,119,0,21,0,19,169,3,163,0,66,169,0,2,169,0,0,144,161,23,0,41,168,66,2,94,67,169,168,82,68,67,0,106,69,68,72,19,169,69,163,135,70,19,1,169,67,0,0,121,70,8,0,1,168,1,0,135,169,17,1,168,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,2,0,1,156,1,0,2,169,0,0,200,129,237,0,84,169,156,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,64,1,1,169,1,0,19,168,3,163,15,71,169,168,121,71,17,0,19,168,3,163,0,72,168,0,2,168,0,0,144,161,23,0,41,169,72,2,94,73,168,169,82,74,73,0,106,75,74,68,19,168,75,163,135,76,19,1,168,73,0,0,121,76,3,0,1,155,0,16,119,0,4,0,1,159,48,0,119,0,2,0,1,159,48,0,32,168,159,48,121,168,2,0,1,155,2,8,2,168,0,0,208,129,237,0,84,168,155,0,2,168,0,0,200,129,237,0,1,169,0,3,84,168,169,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,29,1,2,169,0,0,208,129,237,0,1,168,0,128,84,169,168,0,1,169,12,0,109,160,80,169,25,169,160,80,1,168,1,0,109,169,4,168,109,160,40,0,25,169,160,80,2,170,0,0,129,217,19,0,25,167,160,40,135,168,18,0,169,170,167,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,9,1,119,0,8,1,19,168,3,163,0,79,168,0,19,168,3,163,34,80,168,2,120,80,209,0,2,168,0,0,144,161,23,0,41,167,79,2,94,81,168,167,82,82,81,0,106,83,82,72,19,168,83,163,135,84,19,1,168,81,0,0,120,84,199,0,2,168,0,0,192,130,237,0,82,85,168,0,2,168,0,0,208,129,237,0,80,86,168,0,19,168,86,164,3,87,85,168,2,168,0,0,204,129,237,0,78,88,168,0,41,168,88,24,42,168,168,24,1,167,70,0,1,170,33,0,138,168,167,170,28,222,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,140,223,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,196,221,2,0,20,224,2,0,1,167,12,0,109,160,72,167,25,167,160,72,1,169,3,0,109,167,4,169,19,167,88,163,109,160,48,167,25,167,160,48,109,167,4,79,25,169,160,72,2,171,0,0,187,217,19,0,25,170,160,48,135,167,18,0,169,171,170,0,1,170,1,0,135,167,17,1,170,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,128,0,2,167,0,0,144,161,23,0,41,170,79,2,94,90,167,170,82,91,90,0,106,92,91,100,19,167,92,163,135,93,19,1,167,90,0,0,25,158,160,120,2,161,0,0,176,217,19,0,25,162,158,11,78,167,161,0,83,158,167,0,25,158,158,1,25,161,161,1,54,167,158,162,80,222,2,0,1,167,46,0,135,94,48,0,93,167,0,0,1,167,0,0,45,167,94,167,168,222,2,0,135,96,41,0,93,0,0,0,35,167,96,8,1,170,8,0,125,153,167,96,170,0,0,0,25,167,160,120,135,170,43,0,167,93,153,0,119,0,25,0,4,167,94,93,35,167,167,8,121,167,4,0,4,167,94,93,0,170,167,0,119,0,3,0,1,167,8,0,0,170,167,0,0,154,170,0,25,167,160,120,135,170,43,0,167,93,154,0,25,170,94,1,135,95,41,0,170,0,0,0,35,170,95,3,1,167,3,0,125,152,170,95,167,0,0,0,25,170,160,120,3,170,170,154,25,169,94,1,135,167,43,0,170,169,152,0,2,167,0,0,70,65,84,49,85,160,167,0,2,169,0,0,54,32,32,32,109,160,4,169,1,167,0,0,135,169,235,0,87,167,0,0,25,167,87,2,1,170,52,18,135,169,167,0,167,170,0,0,25,170,87,6,25,167,160,120,1,171,11,0,135,169,211,0,170,167,171,0,2,169,0,0,204,129,237,0,78,97,169,0,41,169,97,24,42,169,169,24,32,169,169,102,121,169,5,0,25,171,87,17,1,167,8,0,135,169,211,0,171,160,167,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,36,0,1,170,3,0,135,167,182,0,87,170,0,0,25,170,87,1,1,169,5,0,135,167,182,0,170,169,0,0,25,169,87,2,1,170,1,0,135,167,235,0,169,170,0,0,25,170,87,4,1,169,0,0,135,167,235,0,170,169,0,0,25,169,87,6,1,170,0,0,135,167,182,0,169,170,0,0,25,170,87,7,135,167,182,0,170,3,0,0,25,170,87,8,1,169,0,0,135,167,182,0,170,169,0,0,25,169,87,31,1,170,255,255,135,167,167,0,169,170,0,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,2,0,119,0,130,255,1,167,1,0,135,168,17,1,167,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,44,0,19,168,3,163,0,98,168,0,19,168,3,163,34,99,168,2,2,168,0,0,144,161,23,0,41,167,98,2,94,100,168,167,121,99,10,0,1,168,0,0,45,168,100,168,108,224,2,0,1,9,1,0,119,0,19,0,25,168,98,1,19,168,168,163,0,9,168,0,119,0,15,0,82,101,100,0,106,102,101,72,19,168,102,163,135,103,19,1,168,100,0,0,121,103,8,0,1,167,1,0,135,168,17,1,167,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,119,0,2,0,1,9,0,0,2,168,0,0,200,129,237,0,83,168,9,0,2,168,0,0,201,129,237,0,1,167,7,0,83,168,167,0,1,4,1,0,137,160,0,0,139,4,0,0,119,0,1,0,2,166,0,0,208,129,237,0,80,77,166,0,41,166,77,16,42,166,166,16,32,166,166,0,120,166,4,0,1,4,1,0,137,160,0,0,139,4,0,0,1,168,1,0,135,166,17,1,168,0,0,0,1,4,0,0,137,160,0,0,139,4,0,0,140,2,197,0,0,0,0,0,2,193,0,0,255,0,0,0,2,194,0,0,3,149,20,0,1,191,0,0,136,195,0,0,0,192,195,0,136,195,0,0,25,195,195,64,137,195,0,0,25,186,192,48,25,190,192,40,25,189,192,32,25,188,192,24,25,187,192,16,25,185,192,8,0,184,192,0,25,78,192,52,85,78,1,0,2,195,0,0,157,252,21,0,135,89,22,1,1,195,0,0,121,89,32,0,2,195,0,0,148,139,20,0,135,100,23,1,195,0,0,0,135,195,24,1,0,100,184,0,2,195,0,0,232,148,20,0,135,111,23,1,195,0,0,0,2,196,0,0,118,115,22,0,135,195,24,1,0,196,185,0,2,195,0,0,42,245,20,0,135,122,47,0,195,111,0,0,32,133,122,0,121,133,8,0,2,196,0,0,255,148,20,0,135,195,24,1,0,196,188,0,137,192,0,0,139,0,0,0,119,0,5,0,135,195,24,1,0,111,187,0,137,192,0,0,139,0,0,0,1,195,0,0,13,144,1,195,121,144,3,0,1,79,0,0,119,0,35,0,78,155,1,0,41,195,155,24,42,195,195,24,32,9,195,0,121,9,3,0,0,79,1,0,119,0,28,0,0,31,155,0,0,75,1,0,19,195,31,193,0,20,195,0,135,42,25,1,20,0,0,0,33,53,42,0,41,195,31,24,42,195,195,24,32,64,195,61,20,195,64,53,0,171,195,0,120,171,3,0,0,79,75,0,119,0,13,0,25,74,75,1,85,78,74,0,78,76,74,0,41,195,76,24,42,195,195,24,32,77,195,0,121,77,3,0,0,79,74,0,119,0,4,0,0,31,76,0,0,75,74,0,119,0,232,255,1,195,3,0,135,80,3,1,79,194,195,0,32,81,80,0,121,81,67,0,1,3,1,0,0,83,79,0,25,82,83,3,78,84,82,0,19,195,84,193,0,85,195,0,135,86,25,1,85,0,0,0,33,87,86,0,41,195,84,24,42,195,195,24,32,88,195,61,20,195,88,87,0,170,195,0,120,170,4,0,0,2,3,0,0,104,83,0,119,0,51,0,85,78,82,0,78,90,82,0,41,195,90,24,42,195,195,24,32,91,195,0,121,91,3,0,0,101,82,0,119,0,28,0,0,96,90,0,0,182,82,0,19,195,96,193,0,95,195,0,135,97,25,1,95,0,0,0,33,98,97,0,41,195,96,24,42,195,195,24,32,99,195,61,20,195,99,98,0,172,195,0,25,92,182,1,120,172,3,0,0,101,182,0,119,0,12,0,85,78,92,0,78,93,92,0,41,195,93,24,42,195,195,24,32,94,195,0,121,94,3,0,0,101,92,0,119,0,4,0,0,96,93,0,0,182,92,0,119,0,232,255,40,195,3,1,0,177,195,0,1,195,3,0,135,102,3,1,101,194,195,0,32,103,102,0,121,103,4,0,0,3,177,0,0,83,101,0,119,0,196,255,0,2,177,0,0,104,101,0,119,0,3,0,1,2,1,0,0,104,79,0,2,195,0,0,7,149,20,0,1,196,10,0,135,105,3,1,104,195,196,0,32,106,105,0,121,106,106,0,25,107,104,10,85,78,107,0,78,108,107,0,41,196,108,24,42,196,196,24,32,109,196,0,120,109,25,0,0,115,108,0,0,181,107,0,19,196,115,193,0,114,196,0,135,116,25,1,114,0,0,0,33,117,116,0,41,196,115,24,42,196,196,24,32,118,196,61,20,196,118,117,0,173,196,0,25,110,181,1,120,173,2,0,119,0,10,0,85,78,110,0,78,112,110,0,41,196,112,24,42,196,196,24,32,113,196,0,120,113,4,0,0,115,112,0,0,181,110,0,119,0,235,255,135,119,26,1,78,0,0,0,78,120,119,0,41,196,120,24,42,196,196,24,0,121,196,0,26,168,121,48,35,166,168,10,120,166,9,0,2,196,0,0,18,149,20,0,135,123,23,1,196,0,0,0,135,196,24,1,0,123,189,0,137,192,0,0,139,0,0,0,0,4,119,0,1,5,0,0,0,127,120,0,19,196,5,193,0,124,196,0,27,125,124,10,41,196,127,24,42,196,196,24,0,126,196,0,26,128,125,48,3,129,128,126,25,130,4,1,78,131,130,0,41,196,131,24,42,196,196,24,0,132,196,0,26,169,132,48,35,167,169,10,121,167,5,0,0,4,130,0,0,5,129,0,0,127,131,0,119,0,237,255,41,196,131,24,42,196,196,24,32,134,196,0,120,134,13,0,135,135,25,1,132,0,0,0,32,136,135,0,121,136,9,0,2,196,0,0,57,149,20,0,135,137,23,1,196,0,0,0,135,196,24,1,0,137,190,0,137,192,0,0,139,0,0,0,2,196,0,0,144,156,79,0,78,138,196,0,19,196,138,193,0,139,196,0,19,196,129,193,0,140,196,0,18,141,140,139,21,196,2,141,0,142,196,0,121,142,3,0,137,192,0,0,139,0,0,0,82,143,78,0,135,196,27,1,0,143,0,0,137,192,0,0,139,0,0,0,2,196,0,0,96,149,20,0,1,195,6,0,135,145,3,1,104,196,195,0,32,146,145,0,121,146,70,0,25,147,104,6,85,78,147,0,78,148,147,0,41,195,148,24,42,195,195,24,32,149,195,0,120,149,19,0,0,154,148,0,0,180,147,0,19,195,154,193,0,153,195,0,135,156,25,1,153,0,0,0,32,157,156,0,25,150,180,1,120,157,10,0,85,78,150,0,78,151,150,0,41,195,151,24,42,195,195,24,32,152,195,0,120,152,4,0,0,154,151,0,0,180,150,0,119,0,241,255,135,158,26,1,78,0,0,0,78,159,158,0,41,195,159,24,42,195,195,24,32,160,195,0,121,160,9,0,2,195,0,0,103,149,20,0,135,161,23,1,195,0,0,0,135,195,24,1,0,161,186,0,137,192,0,0,139,0,0,0,2,195,0,0,124,156,79,0,135,162,5,1,195,0,0,0,2,195,0,0,156,156,79,0,82,163,195,0,2,196,0,0,124,156,79,0,135,195,6,1,196,163,0,0,1,195,247,255,1,196,0,0,135,164,233,0,158,195,196,0,2,195,0,0,124,156,79,0,135,196,6,1,195,162,0,0,21,196,2,164,0,165,196,0,121,165,3,0,137,192,0,0,139,0,0,0,82,10,78,0,135,196,27,1,0,10,0,0,137,192,0,0,139,0,0,0,78,11,104,0,41,196,11,24,42,196,196,24,32,12,196,0,120,12,184,0,0,14,11,0,0,19,104,0,19,196,14,193,0,13,196,0,135,15,25,1,13,0,0,0,33,16,15,0,41,196,14,24,42,196,196,24,32,17,196,61,20,196,17,16,0,176,196,0,120,176,11,0,25,18,19,1,85,78,18,0,78,21,18,0,41,196,21,24,42,196,196,24,32,22,196,0,120,22,164,0,0,14,21,0,0,19,18,0,119,0,236,255,41,196,14,24,42,196,196,24,32,23,196,61,121,23,4,0,1,6,0,0,0,7,19,0,119,0,19,0,0,25,19,0,25,24,25,1,85,78,24,0,78,26,24,0,41,196,26,24,42,196,196,24,32,27,196,0,41,196,26,24,42,196,196,24,33,28,196,61,21,196,27,28,0,178,196,0,121,178,3,0,0,25,24,0,119,0,243,255,0,6,27,0,0,7,24,0,119,0,1,0,120,6,135,0,25,29,7,1,78,30,29,0,41,196,30,24,42,196,196,24,32,32,196,61,121,32,129,0,25,33,7,2,85,78,33,0,78,34,33,0,41,196,34,24,42,196,196,24,32,35,196,0,121,35,3,0,137,192,0,0,139,0,0,0,0,40,34,0,0,183,33,0,19,196,40,193,0,39,196,0,135,41,25,1,39,0,0,0,33,43,41,0,41,196,40,24,42,196,196,24,32,44,196,61,20,196,44,43,0,174,196,0,25,36,183,1,120,174,2,0,119,0,12,0,85,78,36,0,78,37,36,0,41,196,37,24,42,196,196,24,32,38,196,0,121,38,3,0,1,191,65,0,119,0,4,0,0,40,37,0,0,183,36,0,119,0,233,255,32,196,191,65,121,196,3,0,137,192,0,0,139,0,0,0,0,45,40,0,0,51,183,0,41,196,45,24,42,196,196,24,33,46,196,61,19,196,45,193,0,47,196,0,135,48,25,1,47,0,0,0,32,49,48,0,19,196,46,49,0,179,196,0,120,179,2,0,119,0,13,0,25,50,51,1,85,78,50,0,78,52,50,0,41,196,52,24,42,196,196,24,32,54,196,0,121,54,3,0,1,191,65,0,119,0,4,0,0,45,52,0,0,51,50,0,119,0,233,255,32,196,191,65,121,196,3,0,137,192,0,0,139,0,0,0,1,196,0,0,83,19,196,0,82,55,78,0,25,56,55,1,85,78,56,0,1,196,0,0,83,55,196,0,82,8,78,0,1,196,0,0,13,57,8,196,121,57,3,0,1,73,0,0,119,0,35,0,78,58,8,0,41,196,58,24,42,196,196,24,32,59,196,0,121,59,3,0,0,73,8,0,119,0,28,0,0,61,58,0,0,67,8,0,19,196,61,193,0,60,196,0,135,62,25,1,60,0,0,0,33,63,62,0,41,196,61,24,42,196,196,24,32,65,196,61,20,196,65,63,0,175,196,0,120,175,3,0,0,73,67,0,119,0,13,0,25,66,67,1,85,78,66,0,78,68,66,0,41,196,68,24,42,196,196,24,32,69,196,0,121,69,3,0,0,73,66,0,119,0,4,0,0,61,68,0,0,67,66,0,119,0,232,255,135,70,47,0,104,183,0,0,32,71,70,0,21,196,2,71,0,72,196,0,121,72,3,0,137,192,0,0,139,0,0,0,135,196,27,1,0,73,0,0,137,192,0,0,139,0,0,0,135,196,28,1,0,0,0,0,137,192,0,0,139,0,0,0,140,3,144,0,0,0,0,0,2,138,0,0,113,155,20,0,2,139,0,0,103,155,20,0,2,140,0,0,255,255,0,0,1,135,0,0,136,141,0,0,0,136,141,0,136,141,0,0,1,142,80,17,3,141,141,142,137,141,0,0,1,141,192,16,3,133,136,141,1,141,184,16,3,132,136,141,1,141,96,16,3,48,136,141,25,59,136,96,0,70,136,0,1,141,200,16,3,81,136,141,1,141,196,16,3,92,136,141,78,131,2,0,41,141,131,24,42,141,141,24,1,142,0,0,1,143,33,0,138,141,142,143,240,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,188,234,2,0,252,234,2,0,1,142,32,0,83,59,142,0,25,103,59,1,1,142,0,0,83,103,142,0,1,143,254,15,135,142,29,1,59,2,143,0,1,142,255,15,3,114,59,142,1,142,0,0,83,114,142,0,119,0,12,0,1,142,0,0,83,59,142,0,119,0,9,0,1,143,255,15,135,142,45,0,59,2,143,0,1,142,255,15,3,6,59,142,1,142,0,0,83,6,142,0,119,0,1,0,25,17,1,1,2,141,0,0,118,156,20,0,135,28,47,0,17,141,0,0,32,31,28,0,121,31,3,0,1,135,7,0,119,0,8,0,2,141,0,0,120,156,20,0,135,32,47,0,17,141,0,0,32,33,32,0,121,33,2,0,1,135,7,0,32,141,135,7,121,141,54,0,78,34,1,0,41,141,34,24,42,141,141,24,0,35,141,0,135,36,30,1,35,0,0,0,32,37,36,0,120,37,46,0,1,141,92,0,135,38,4,1,1,141,0,0,1,141,0,0,13,39,38,141,120,39,11,0,2,141,0,0,123,156,20,0,135,40,23,1,141,0,0,0,85,132,1,0,135,141,24,1,0,40,132,0,1,4,1,0,137,136,0,0,139,4,0,0,135,41,248,0,35,0,0,0,1,141,191,0,3,42,41,141,1,141,255,0,19,141,42,141,0,43,141,0,135,44,31,1,43,0,0,0,121,44,4,0,1,4,1,0,137,136,0,0,139,4,0,0,2,141,0,0,153,156,20,0,135,45,23,1,141,0,0,0,78,46,1,0,41,141,46,24,42,141,141,24,0,47,141,0,135,49,248,0,47,0,0,0,85,133,49,0,135,141,24,1,0,45,133,0,1,4,1,0,137,136,0,0,139,4,0,0,135,50,32,1,0,1,0,0,1,141,0,0,13,51,50,141,121,51,4,0,1,4,0,0,137,136,0,0,139,4,0,0,135,141,1,1,48,50,0,0,1,141,46,0,135,52,4,1,48,141,0,0,1,141,0,0,13,53,52,141,121,53,99,0,135,54,41,0,48,0,0,0,1,141,79,0,16,55,141,54,121,55,4,0,1,4,0,0,137,136,0,0,139,4,0,0,135,141,1,1,70,48,0,0,135,128,41,0,70,0,0,0,3,125,70,128,2,141,0,0,108,155,20,0,78,141,141,0,83,125,141,0,2,142,0,0,108,155,20,0,102,142,142,1,107,125,1,142,2,141,0,0,108,155,20,0,102,141,141,2,107,125,2,141,2,142,0,0,108,155,20,0,102,142,142,3,107,125,3,142,2,141,0,0,108,155,20,0,102,141,141,4,107,125,4,141,135,56,32,1,0,70,0,0,1,141,0,0,13,57,56,141,121,57,55,0,135,141,1,1,70,48,0,0,135,129,41,0,70,0,0,0,3,126,70,129,78,141,138,0,83,126,141,0,102,142,138,1,107,126,1,142,102,141,138,2,107,126,2,141,102,142,138,3,107,126,3,142,102,141,138,4,107,126,4,141,135,58,32,1,0,70,0,0,1,141,0,0,13,60,58,141,120,60,6,0,135,141,1,1,48,58,0,0,2,3,0,0,183,156,20,0,119,0,34,0,135,141,1,1,70,48,0,0,135,130,41,0,70,0,0,0,3,127,70,130,78,141,139,0,83,127,141,0,102,142,139,1,107,127,1,142,102,141,139,2,107,127,2,141,102,142,139,3,107,127,3,142,102,141,139,4,107,127,4,141,135,61,32,1,0,70,0,0,1,141,0,0,13,62,61,141,120,62,6,0,135,141,1,1,48,61,0,0,2,3,0,0,228,51,21,0,119,0,9,0,1,4,0,0,137,136,0,0,139,4,0,0,119,0,5,0,135,141,1,1,48,56,0,0,2,3,0,0,188,156,20,0,0,5,3,0,119,0,2,0,0,5,52,0,2,141,0,0,228,51,21,0,135,63,33,1,5,141,0,0,32,64,63,0,121,64,32,0,25,65,0,60,78,66,65,0,25,67,0,56,82,68,67,0,1,141,0,0,13,69,68,141,120,69,14,0,25,71,0,62,78,72,71,0,41,141,72,24,42,141,141,24,32,73,141,0,121,73,8,0,82,74,68,0,25,75,74,4,82,76,75,0,1,142,255,7,19,142,76,142,135,141,146,0,142,68,0,0,1,141,40,0,135,77,26,0,141,0,0,0,135,141,34,1,77,0,48,1,59,0,0,0,85,67,77,0,83,65,66,0,1,4,1,0,137,136,0,0,139,4,0,0,2,141,0,0,188,156,20,0,135,78,33,1,5,141,0,0,32,79,78,0,120,79,10,0,2,141,0,0,183,156,20,0,135,80,33,1,5,141,0,0,32,82,80,0,120,82,4,0,1,4,0,0,137,136,0,0,139,4,0,0,2,141,0,0,216,129,237,0,80,83,141,0,19,141,83,140,0,84,141,0,2,141,0,0,0,254,0,0,3,85,84,141,19,141,85,140,0,86,141,0,2,141,0,0,216,129,237,0,84,141,86,0,2,141,0,0,188,130,237,0,82,87,141,0,1,141,0,2,4,141,83,141,41,141,141,16,42,141,141,16,0,88,141,0,19,141,88,140,0,89,141,0,3,90,87,89,85,70,90,0,135,141,35,1,70,0,0,0,2,141,0,0,216,129,237,0,80,91,141,0,2,141,0,0,156,130,237,0,82,93,141,0,25,141,91,32,41,141,141,16,42,141,141,16,0,94,141,0,19,141,94,140,0,95,141,0,41,141,93,4,0,96,141,0,2,141,0,0,240,255,15,0,19,141,96,141,0,97,141,0,3,98,97,95,135,99,41,0,48,0,0,0,25,100,99,1,135,141,211,0,98,48,100,0,2,142,0,0,92,189,79,0,135,141,67,0,142,59,0,0,25,101,81,1,0,134,81,0,1,141,128,0,3,137,134,141,1,141,0,0,83,134,141,0,25,134,134,1,54,141,134,137,192,239,2,0,135,102,41,0,59,0,0,0,1,141,126,0,16,104,141,102,121,104,4,0,25,105,59,126,1,141,0,0,83,105,141,0,135,106,41,0,59,0,0,0,1,141,255,0,19,141,106,141,0,107,141,0,83,81,107,0,135,141,43,0,101,59,106,0,25,141,81,1,3,108,141,106,1,141,13,0,83,108,141,0,2,141,0,0,188,130,237,0,82,109,141,0,2,141,0,0,216,129,237,0,80,110,141,0,19,141,110,140,0,111,141,0,1,141,0,1,3,112,109,141,3,113,112,111,1,142,128,0,135,141,211,0,113,81,142,0,2,141,0,0,124,156,79,0,135,115,18,1,141,0,0,0,1,142,92,0,1,143,0,0,135,141,203,0,115,142,143,101,92,0,0,0,2,141,0,0,124,156,79,0,135,116,18,1,141,0,0,0,78,117,92,0,1,141,255,0,19,141,117,141,0,118,141,0,25,141,81,1,3,119,141,118,1,143,108,0,1,142,0,0,135,141,203,0,116,143,142,119,92,0,0,0,2,141,0,0,124,156,79,0,135,120,18,1,141,0,0,0,19,141,120,140,0,121,141,0,41,141,121,16,0,122,141,0,39,141,122,92,0,123,141,0,25,124,70,10,19,141,123,140,84,124,141,0,43,142,123,16,108,124,2,142,2,142,0,0,124,156,79,0,135,7,18,1,142,0,0,0,19,142,7,140,0,8,142,0,41,142,8,16,0,9,142,0,39,142,9,108,0,10,142,0,25,11,70,14,19,142,10,140,84,11,142,0,43,141,10,16,108,11,2,141,2,141,0,0,216,129,237,0,80,12,141,0,2,141,0,0,156,130,237,0,82,13,141,0,41,141,13,16,0,14,141,0,1,141,0,1,3,141,12,141,41,141,141,16,42,141,141,16,0,15,141,0,19,141,15,140,0,16,141,0,20,141,14,16,0,18,141,0,25,19,70,6,19,141,18,140,84,19,141,0,43,142,18,16,108,19,2,142,135,142,36,1,70,0,0,0,2,142,0,0,200,129,237,0,1,141,0,75,84,142,141,0,2,141,0,0,156,130,237,0,82,20,141,0,19,141,20,140,0,21,141,0,2,141,0,0,160,130,237,0,85,141,21,0,41,141,21,4,0,22,141,0,2,141,0,0,192,130,237,0,85,141,22,0,2,141,0,0,208,129,237,0,84,141,94,0,2,141,0,0,148,130,237,0,85,141,21,0,2,141,0,0,180,130,237,0,85,141,22,0,2,141,0,0,216,129,237,0,80,23,141,0,2,141,0,0,212,129,237,0,84,141,23,0,2,141,0,0,236,129,237,0,82,24,141,0,1,141,255,253,19,141,24,141,0,25,141,0,2,141,0,0,236,129,237,0,85,141,25,0,1,142,33,0,135,141,205,0,142,0,0,0,2,141,0,0,216,129,237,0,80,26,141,0,19,141,26,140,0,27,141,0,1,141,0,2,3,29,27,141,19,141,29,140,0,30,141,0,2,141,0,0,216,129,237,0,84,141,30,0,1,4,1,0,137,136,0,0,139,4,0,0,140,0,157,0,0,0,0,0,2,150,0,0,24,231,19,0,2,151,0,0,27,231,19,0,2,152,0,0,198,224,53,2,1,148,0,0,136,153,0,0,0,149,153,0,136,153,0,0,25,153,153,16,137,153,0,0,0,147,149,0,135,4,37,1,2,153,0,0,84,156,79,0,82,5,153,0,1,153,10,0,4,46,153,4,3,57,46,5,34,68,57,1,121,68,62,0,2,153,0,0,60,156,79,0,82,79,153,0,32,90,79,0,121,90,10,0,2,153,0,0,84,156,79,0,85,153,4,0,1,154,1,0,135,153,38,1,154,0,0,0,135,101,37,1,0,0,101,0,119,0,49,0,1,153,160,15,4,112,153,4,3,123,112,5,34,6,123,1,121,6,41,0,2,153,0,0,88,156,79,0,82,17,153,0,1,153,200,0,4,28,153,4,3,39,28,17,34,40,39,1,121,40,3,0,0,0,4,0,119,0,34,0,2,154,0,0,133,170,18,0,135,153,24,0,154,147,0,0,2,153,0,0,92,156,79,0,1,154,1,0,85,153,154,0,135,154,39,1,2,154,0,0,132,170,18,0,78,41,154,0,41,154,41,24,42,154,154,24,32,42,154,0,121,42,8,0,1,153,3,0,1,155,100,0,1,156,1,0,135,154,40,1,153,155,156,0,0,0,4,0,119,0,11,0,1,156,3,0,1,155,0,0,1,153,1,0,135,154,40,1,156,155,153,0,0,0,4,0,119,0,4,0,0,0,4,0,119,0,2,0,0,0,4,0,2,154,0,0,88,156,79,0,85,154,0,0,135,43,41,1,120,43,23,0,135,154,42,1,135,55,43,1,40,154,55,1,0,56,154,0,2,154,0,0,96,156,79,0,82,58,154,0,33,59,58,0,19,154,59,56,0,134,154,0,120,134,3,0,1,148,19,0,119,0,52,0,135,154,44,1,2,154,0,0,96,156,79,0,82,60,154,0,26,61,60,1,2,154,0,0,96,156,79,0,85,154,61,0,119,0,233,255,135,154,45,1,78,44,152,0,1,154,1,0,83,152,154,0,2,154,0,0,8,131,237,0,82,45,154,0,1,154,255,1,19,154,45,154,135,47,46,1,154,0,0,0,83,152,44,0,34,48,47,0,121,48,4,0,1,3,1,0,1,148,46,0,119,0,26,0,32,49,47,0,120,49,214,255,1,154,127,0,15,50,154,47,121,50,4,0,1,3,0,0,1,148,46,0,119,0,18,0,1,154,0,0,83,152,154,0,2,154,0,0,160,246,70,0,41,153,47,2,3,51,154,153,82,52,51,0,1,153,255,1,19,153,52,153,135,53,46,1,153,0,0,0,83,152,44,0,32,54,53,0,120,54,194,255,0,3,53,0,1,148,46,0,119,0,1,0,32,153,148,19,121,153,110,1,2,153,0,0,121,223,53,2,78,62,153,0,41,153,62,24,42,153,153,24,32,63,153,0,120,63,24,0,2,153,0,0,96,156,79,0,1,154,5,0,85,153,154,0,135,64,37,1,2,154,0,0,100,156,79,0,85,154,64,0,2,154,0,0,104,156,79,0,1,153,0,0,85,154,153,0,2,153,0,0,52,156,79,0,1,154,0,0,85,153,154,0,2,154,0,0,56,156,79,0,1,153,0,0,85,154,153,0,1,3,0,0,137,149,0,0,139,3,0,0,135,65,37,1,2,153,0,0,104,156,79,0,82,66,153,0,2,153,0,0,56,156,79,0,82,67,153,0,3,69,67,66,2,153,0,0,56,156,79,0,85,153,69,0,2,153,0,0,100,156,79,0,82,70,153,0,16,71,70,65,120,71,33,0,2,153,0,0,104,156,79,0,1,154,0,0,85,153,154,0,2,154,0,0,60,156,79,0,82,32,154,0,32,33,32,0,121,33,7,0,2,154,0,0,84,156,79,0,85,154,65,0,1,153,1,0,135,154,38,1,153,0,0,0,135,34,37,1,2,154,0,0,52,156,79,0,82,35,154,0,4,36,65,34,3,37,35,36,1,154,0,0,15,38,154,37,1,154,0,0,125,146,38,37,154,0,0,0,2,154,0,0,52,156,79,0,85,154,146,0,1,3,0,0,137,149,0,0,139,3,0,0,4,72,65,70,2,154,0,0,96,156,79,0,85,154,72,0,2,154,0,0,100,156,79,0,85,154,65,0,4,73,65,0,2,154,0,0,52,156,79,0,82,74,154,0,3,75,74,73,2,154,0,0,52,156,79,0,85,154,75,0,1,154,30,0,16,76,154,72,121,76,24,0,26,77,72,30,2,154,0,0,108,156,79,0,82,78,154,0,3,80,77,78,2,154,0,0,108,156,79,0,85,154,80,0,2,154,0,0,96,156,79,0,1,153,30,0,85,154,153,0,1,153,80,0,16,81,153,80,121,81,7,0,2,153,0,0,108,156,79,0,1,154,80,0,85,153,154,0,1,88,30,0,119,0,34,0,1,88,30,0,119,0,32,0,2,154,0,0,108,156,79,0,82,82,154,0,32,83,82,0,121,83,3,0,0,88,72,0,119,0,25,0,1,154,30,0,4,84,154,72,16,85,82,84,121,85,11,0,3,86,82,72,2,154,0,0,96,156,79,0,85,154,86,0,2,154,0,0,108,156,79,0,1,153,0,0,85,154,153,0,0,88,86,0,119,0,11,0,4,87,82,84,2,153,0,0,108,156,79,0,85,153,87,0,2,153,0,0,96,156,79,0,1,154,30,0,85,153,154,0,1,88,30,0,119,0,1,0,2,154,0,0,104,156,79,0,85,154,88,0,2,154,0,0,188,224,53,2,78,89,154,0,41,154,89,24,42,154,154,24,33,91,154,0,2,154,0,0,189,224,53,2,78,92,154,0,41,154,92,24,42,154,154,24,32,93,154,0,19,154,91,93,0,136,154,0,120,136,4,0,1,3,0,0,137,149,0,0,139,3,0,0,1,154,249,0,16,94,154,69,1,154,249,0,15,95,154,75,20,154,94,95,0,138,154,0,120,138,29,0,1,154,20,0,16,96,154,88,1,154,4,0,16,97,154,69,19,154,97,96,0,139,154,0,120,139,22,0,120,96,4,0,1,3,0,0,137,149,0,0,139,3,0,0,2,154,0,0,72,149,18,0,82,29,154,0,28,154,29,3,38,154,154,255,0,30,154,0], eb + 184320);
  HEAPU8.set([1,154,244,1,15,31,154,30,1,154,244,1,125,144,31,30,154,0,0,0,2,154,0,0,72,149,18,0,85,154,144,0,1,3,0,0,137,149,0,0,139,3,0,0,34,98,75,1,121,98,7,0,2,154,0,0,52,156,79,0,1,153,1,0,85,154,153,0,1,105,1,0,119,0,2,0,0,105,75,0,2,153,0,0,80,149,18,0,82,99,153,0,2,153,0,0,0,104,1,0,5,100,99,153,1,153,16,39,6,153,100,153,38,153,153,255,0,102,153,0,5,103,102,69,7,153,103,105,38,153,153,255,0,104,153,0,2,153,0,0,72,149,18,0,82,106,153,0,34,107,106,0,41,153,107,31,42,153,153,31,0,108,153,0,1,153,0,0,135,109,47,1,106,108,69,153,128,153,0,0,0,110,153,0,1,153,0,0,15,111,153,110,1,153,0,0,16,113,153,109,32,114,110,0,19,153,114,113,0,115,153,0,20,153,111,115,0,116,153,0,121,116,64,0,2,117,0,0,48,149,79,0,0,118,117,0,82,119,118,0,25,120,117,4,0,121,120,0,82,122,121,0,77,153,119,0,61,154,0,0,0,0,128,79,76,155,122,0,65,154,154,155,63,124,153,154,77,154,109,0,61,153,0,0,0,0,128,79,76,155,110,0,65,153,153,155,63,125,154,153,66,126,124,125,59,153,1,0,71,127,126,153,121,127,38,0,76,153,104,0,58,128,153,0,59,153,1,0,64,129,153,126,65,130,129,128,75,131,130,0,34,132,105,10,19,153,94,132,0,140,153,0,1,153,0,80,15,133,153,131,19,153,140,133,0,141,153,0,1,153,0,80,125,142,141,153,131,0,0,0,34,7,142,0,41,153,7,31,42,153,153,31,0,8,153,0,135,9,47,1,142,8,106,108,128,153,0,0,0,10,153,0,42,153,106,1,0,11,153,0,25,12,11,1,1,153,0,8,1,154,0,0,135,13,48,1,9,10,153,154,128,154,0,0,0,14,154,0,3,15,12,13,0,1,15,0,0,2,142,0,119,0,6,0,0,1,106,0,0,2,104,0,119,0,3,0,0,1,106,0,0,2,104,0,1,154,244,1,15,16,154,1,1,154,244,1,125,143,16,1,154,0,0,0,1,154,10,0,15,18,154,2,121,18,21,0,1,154,120,0,15,19,154,2,1,154,188,2,15,20,105,154,20,154,20,19,0,135,154,0,121,135,14,0,2,154,0,0,84,149,18,0,82,21,154,0,1,154,0,0,15,22,154,21,15,23,21,143,19,154,22,23,0,137,154,0,125,145,137,21,143,0,0,0,2,154,0,0,72,149,18,0,85,154,145,0,2,24,0,0,48,149,79,0,0,25,24,0,1,154,0,0,85,25,154,0,25,26,24,4,0,27,26,0,1,154,0,0,85,27,154,0,2,154,0,0,52,156,79,0,1,153,0,0,85,154,153,0,2,153,0,0,56,156,79,0,1,154,0,0,85,153,154,0,1,3,0,0,137,149,0,0,139,3,0,0,119,0,5,0,32,154,148,46,121,154,3,0,137,149,0,0,139,3,0,0,1,154,0,0,139,154,0,0,140,1,100,0,0,0,0,0,2,95,0,0,118,115,22,0,2,96,0,0,255,1,0,0,1,93,0,0,136,97,0,0,0,94,97,0,136,97,0,0,1,98,144,16,3,97,97,98,137,97,0,0,1,97,48,16,3,86,94,97,1,97,40,16,3,85,94,97,1,97,32,16,3,90,94,97,1,97,24,16,3,89,94,97,1,97,16,16,3,88,94,97,1,97,8,16,3,87,94,97,1,97,0,16,3,84,94,97,0,6,94,0,1,97,120,16,3,17,94,97,1,97,56,16,3,28,94,97,1,98,0,0,1,99,0,16,135,97,2,0,6,98,99,0,1,97,0,0,85,17,97,0,1,99,0,0,109,17,4,99,1,97,0,0,109,17,8,97,25,39,0,20,82,50,39,0,2,97,0,0,81,89,20,0,135,61,49,1,50,97,17,0,121,61,66,0,25,72,17,11,78,81,72,0,41,97,81,24,42,97,97,24,34,82,97,0,82,7,17,0,125,8,82,7,17,0,0,0,135,97,1,1,6,8,0,0,2,97,0,0,28,15,21,0,135,9,50,1,6,97,0,0,1,97,0,0,13,10,9,97,120,10,3,0,1,97,0,0,83,9,97,0,135,97,51,1,28,0,0,0,2,97,0,0,184,99,17,0,85,28,97,0,25,11,28,28,85,11,11,0,25,12,28,32,85,12,11,0,25,13,28,36,1,97,0,0,85,13,97,0,25,14,28,40,85,14,14,0,25,15,28,44,85,15,14,0,25,16,28,48,1,97,0,0,85,16,97,0,25,18,28,54,1,97,0,0,84,18,97,0,25,19,28,60,25,20,28,61,1,97,0,0,83,20,97,0,25,21,28,56,1,97,0,0,85,21,97,0,25,22,28,62,1,97,0,0,83,22,97,0,25,23,28,63,1,97,0,0,83,23,97,0,25,24,0,60,78,25,24,0,83,19,25,0,135,97,52,1,28,6,0,0,135,97,53,1,28,0,0,0,135,97,54,1,28,0,0,0,0,4,72,0,119,0,216,0,2,97,0,0,80,189,79,0,82,26,97,0,13,27,0,26,121,27,83,0,2,97,0,0,84,89,20,0,135,29,23,1,97,0,0,0,2,97,0,0,41,26,21,0,85,84,97,0,25,91,84,4,2,97,0,0,104,89,20,0,85,91,97,0,135,97,24,1,0,29,84,0,2,97,0,0,44,156,79,0,82,30,97,0,1,97,1,0,1,99,6,0,138,30,97,99,8,253,2,0,0,253,2,0,0,253,2,0,0,253,2,0,0,253,2,0,12,253,2,0,0,32,30,0,119,0,13,0,119,0,1,0,2,97,0,0,117,89,20,0,135,31,23,1,97,0,0,0,135,97,24,1,0,31,87,0,2,97,0,0,44,156,79,0,82,1,97,0,0,32,1,0,119,0,1,0,32,33,32,7,121,33,12,0,2,97,0,0,135,89,20,0,135,34,23,1,97,0,0,0,135,97,24,1,0,34,88,0,2,97,0,0,44,156,79,0,82,3,97,0,0,35,3,0,119,0,2,0,0,35,32,0,1,97,0,0,1,99,10,0,138,35,97,99,168,253,2,0,164,253,2,0,164,253,2,0,164,253,2,0,164,253,2,0,164,253,2,0,164,253,2,0,164,253,2,0,164,253,2,0,172,253,2,0,119,0,9,0,119,0,1,0,2,97,0,0,154,89,20,0,135,36,23,1,97,0,0,0,135,97,24,1,0,36,89,0,119,0,1,0,2,97,0,0,173,89,20,0,135,37,23,1,97,0,0,0,135,97,24,1,0,37,90,0,119,0,12,0,2,97,0,0,41,26,21,0,85,85,97,0,25,92,85,4,2,97,0,0,104,89,20,0,85,92,97,0,2,99,0,0,191,89,20,0,135,97,24,1,0,99,85,0,82,38,39,0,2,97,0,0,220,89,20,0,1,99,1,0,135,40,55,1,38,97,17,99,121,40,17,0,25,41,17,11,78,42,41,0,41,99,42,24,42,99,99,24,34,43,99,0,82,44,17,0,125,45,43,44,17,0,0,0,135,99,1,1,6,45,0,0,1,97,0,0,1,98,255,255,135,99,56,1,17,97,98,0,135,99,52,1,0,6,0,0,25,46,0,56,25,47,0,60,25,48,0,61,25,49,0,63,82,51,46,0,1,99,0,0,13,52,51,99,121,52,35,0,78,62,47,0,41,99,62,24,42,99,99,24,32,63,99,0,120,63,3,0,135,99,57,1,0,0,0,0,135,99,58,1,0,6,0,0,78,64,47,0,41,99,64,24,42,99,99,24,32,65,99,0,121,65,3,0,1,93,27,0,119,0,9,0,78,66,49,0,41,99,66,24,42,99,99,24,32,67,99,0,121,67,4,0,135,99,24,1,0,95,86,0,1,93,27,0,32,99,93,27,121,99,7,0,1,93,0,0,78,2,49,0,41,99,2,24,42,99,99,24,32,68,99,0,120,68,30,0,135,99,218,0,119,0,28,0,82,53,51,0,25,54,53,8,82,55,54,0,19,99,55,96,135,56,178,0,99,51,6,0,120,56,4,0,1,99,0,0,83,6,99,0,119,0,18,0,78,57,47,0,41,99,57,24,42,99,99,24,32,58,99,0,78,59,6,0,41,99,59,24,42,99,99,24,32,60,99,64,20,99,58,60,0,83,99,0,120,83,7,0,135,99,57,1,0,0,0,0,135,99,59,1,0,6,0,0,135,99,59,1,0,95,0,0,135,69,41,0,6,0,0,0,32,70,69,0,120,70,14,0,135,99,52,1,0,6,0,0,78,71,47,0,41,99,71,24,42,99,99,24,32,73,99,0,120,73,7,0,82,74,46,0,1,99,0,0,13,75,74,99,121,75,3,0,135,99,59,1,0,95,0,0,78,76,48,0,41,99,76,24,42,99,99,24,32,77,99,0,120,77,170,255,119,0,1,0,25,5,17,11,0,4,5,0,78,78,4,0,41,99,78,24,42,99,99,24,34,79,99,0,120,79,3,0,137,94,0,0,139,0,0,0,82,80,17,0,135,99,21,0,80,0,0,0,137,94,0,0,139,0,0,0,140,4,112,0,0,0,0,0,2,97,0,0,11,231,19,0,2,98,0,0,255,0,0,0,2,99,0,0,212,129,237,0,2,100,0,0,16,7,0,0,2,101,0,0,28,7,0,0,2,102,0,0,208,129,237,0,2,103,0,0,77,1,0,0,2,104,0,0,133,223,53,2,2,105,0,0,204,129,237,0,2,106,0,0,228,192,118,0,1,95,0,0,136,107,0,0,0,96,107,0,136,107,0,0,25,107,107,16,137,107,0,0,25,42,96,1,0,53,96,0,1,107,98,4,135,64,181,0,107,0,0,0,2,107,0,0,44,156,79,0,82,75,107,0,32,86,75,7,121,86,3,0,1,8,16,7,119,0,8,0,19,107,64,98,0,93,107,0,41,107,93,1,0,12,107,0,1,107,81,4,3,13,12,107,0,8,13,0,135,14,181,0,8,0,0,0,83,42,14,0,2,107,0,0,44,156,79,0,82,15,107,0,32,16,15,7,121,16,3,0,1,9,28,7,119,0,8,0,19,107,64,98,0,17,107,0,41,107,17,1,0,18,107,0,1,107,80,4,3,19,18,107,0,9,19,0,135,20,181,0,9,0,0,0,83,53,20,0,41,107,1,24,42,107,107,24,1,110,7,0,1,111,7,0,138,107,110,111,196,3,3,0,100,4,3,0,140,4,3,0,32,5,3,0,80,1,3,0,80,1,3,0,64,5,3,0,2,108,0,0,44,156,79,0,82,43,108,0,32,44,43,7,120,44,53,0,2,108,0,0,200,129,237,0,80,77,108,0,80,78,99,0,80,79,102,0,2,108,0,0,201,129,237,0,1,110,2,0,83,108,110,0,107,102,1,14,83,102,20,0,107,99,1,64,1,108,16,0,135,110,205,0,108,0,0,0,84,102,79,0,80,80,105,0,2,110,0,0,200,129,237,0,83,110,1,0,83,99,2,0,107,99,1,64,1,110,1,0,84,105,110,0,1,110,9,0,1,108,10,0,125,4,3,110,108,0,0,0,2,108,0,0,201,129,237,0,83,108,4,0,2,108,0,0,44,156,79,0,82,81,108,0,32,82,81,7,121,82,3,0,135,108,13,1,119,0,4,0,1,110,16,0,135,108,205,0,110,0,0,0,2,108,0,0,200,129,237,0,84,108,77,0,84,99,78,0,84,105,80,0,25,108,20,1,41,108,108,24,42,108,108,24,0,83,108,0,83,53,83,0,119,0,199,0,135,45,60,1,104,1,0,0,121,45,196,0,2,108,0,0,44,156,79,0,82,46,108,0,32,47,46,7,121,47,4,0,1,92,80,0,1,95,19,0,119,0,16,0,1,108,74,4,135,48,166,0,108,0,0,0,2,108,0,0,44,156,79,0,82,6,108,0,32,49,6,7,121,49,4,0,0,92,48,0,1,95,19,0,119,0,5,0,1,110,132,4,135,108,181,0,110,0,0,0,0,57,48,0,32,108,95,19,121,108,5,0,1,110,18,7,135,108,181,0,110,0,0,0,0,57,92,0,2,108,0,0,136,223,53,2,78,50,108,0,41,108,50,24,42,108,108,24,32,51,108,0,19,108,20,98,0,52,108,0,1,108,1,0,1,110,2,0,125,54,51,108,110,0,0,0,3,55,54,52,2,110,0,0,255,255,0,0,19,110,57,110,0,56,110,0,16,58,56,55,121,58,6,0,19,110,57,98,0,59,110,0,83,53,59,0,135,110,61,1,53,42,0,0,2,110,0,0,134,223,53,2,78,60,110,0,41,110,60,24,42,110,110,24,32,61,110,0,78,7,104,0,121,61,3,0,0,69,7,0,119,0,9,0,19,110,7,98,0,62,110,0,1,110,224,0,3,63,62,110,19,110,63,98,0,65,110,0,83,104,65,0,0,69,65,0,19,110,60,98,0,66,110,0,41,110,66,8,0,67,110,0,19,110,69,98,0,68,110,0,20,110,67,68,0,70,110,0,2,110,0,0,255,255,0,0,19,110,70,110,0,71,110,0,1,108,0,0,1,109,1,0,1,111,1,0,135,110,16,1,71,2,108,109,111,0,0,0,78,72,53,0,19,110,72,98,0,73,110,0,3,74,54,73,19,110,74,98,0,76,110,0,83,53,76,0,119,0,99,0,1,109,67,0,1,110,182,0,135,108,175,0,109,110,0,0,1,110,66,0,1,109,40,0,135,108,175,0,110,109,0,0,1,109,66,0,1,110,5,0,135,108,175,0,109,110,0,0,1,108,97,0,135,21,62,1,108,0,0,0,1,108,252,0,19,108,21,108,0,22,108,0,39,108,22,3,0,23,108,0,1,110,97,0,135,108,175,0,110,23,0,0,1,5,0,0,135,108,218,0,25,26,5,1,13,94,26,103,120,94,3,0,0,5,26,0,119,0,251,255,1,108,97,0,135,24,62,1,108,0,0,0,1,108,252,0,19,108,24,108,0,25,108,0,1,110,97,0,135,108,175,0,110,25,0,0,119,0,59,0,41,108,20,24,42,108,108,24,32,27,108,0,120,27,55,0,26,108,20,1,41,108,108,24,42,108,108,24,0,28,108,0,83,53,28,0,119,0,49,0,19,108,64,98,0,30,108,0,41,108,30,1,0,31,108,0,1,108,81,4,3,32,31,108,1,108,80,4,3,33,31,108,1,110,32,0,135,108,11,1,0,110,2,3,2,108,0,0,44,156,79,0,82,34,108,0,32,35,34,7,125,10,35,100,32,0,0,0,135,36,181,0,10,0,0,0,2,108,0,0,44,156,79,0,82,37,108,0,32,38,37,7,125,11,38,101,33,0,0,0,135,39,181,0,11,0,0,0,38,108,39,7,0,40,108,0,41,108,40,24,42,108,108,24,32,41,108,0,121,41,232,255,119,0,1,0,83,42,36,0,83,53,39,0,119,0,12,0,1,108,0,0,83,53,108,0,25,108,14,1,41,108,108,24,42,108,108,24,0,29,108,0,83,42,29,0,119,0,4,0,1,108,0,0,83,53,108,0,119,0,1,0,135,107,61,1,53,42,0,0,78,84,42,0,78,85,53,0,2,107,0,0,200,129,237,0,80,87,107,0,80,88,99,0,80,89,102,0,2,107,0,0,201,129,237,0,1,110,2,0,83,107,110,0,107,102,1,84,83,102,85,0,107,99,1,64,2,110,0,0,44,156,79,0,82,90,110,0,32,91,90,7,121,91,10,0,135,110,13,1,2,110,0,0,200,129,237,0,84,110,87,0,84,99,88,0,84,102,89,0,137,96,0,0,139,0,0,0,119,0,11,0,1,107,16,0,135,110,205,0,107,0,0,0,2,110,0,0,200,129,237,0,84,110,87,0,84,99,88,0,84,102,89,0,137,96,0,0,139,0,0,0,139,0,0,0,140,3,99,0,0,0,0,0,2,87,0,0,255,255,0,0,2,88,0,0,201,129,237,0,2,89,0,0,11,231,19,0,2,90,0,0,55,231,19,0,2,91,0,0,228,192,118,0,2,92,0,0,149,156,79,0,2,93,0,0,32,161,23,0,2,94,0,0,127,239,26,1,2,95,0,0,200,129,237,0,1,85,0,0,136,96,0,0,0,86,96,0,80,29,95,0,2,96,0,0,44,156,79,0,82,40,96,0,32,51,40,7,1,96,225,255,1,97,7,0,125,62,51,96,97,0,0,0,135,97,10,1,25,73,0,36,78,83,73,0,41,97,83,24,42,97,97,24,32,84,97,0,121,84,3,0,1,3,0,0,119,0,20,0,80,9,2,0,41,97,9,16,42,97,97,16,32,10,97,0,121,10,3,0,1,3,0,0,119,0,13,0,83,1,83,0,78,11,92,0,41,97,11,24,42,97,97,24,32,12,97,0,120,12,4,0,78,13,73,0,135,97,63,1,13,62,0,0,1,97,0,0,83,73,97,0,1,3,1,0,80,14,2,0,19,97,3,87,19,96,14,87,15,15,97,96,121,15,27,1,19,96,3,87,0,16,96,0,0,6,3,0,0,25,16,0,2,96,0,0,220,156,79,0,82,17,96,0,2,96,0,0,224,156,79,0,82,18,96,0,16,19,17,18,121,19,15,0,25,20,17,1,2,96,0,0,220,156,79,0,85,96,20,0,3,21,93,17,78,22,21,0,25,96,6,1,41,96,96,16,42,96,96,16,0,23,96,0,3,24,1,25,83,24,22,0,0,4,23,0,119,0,203,0,2,96,0,0,44,156,79,0,82,30,96,0,39,96,30,1,0,31,96,0,32,32,31,5,1,96,16,0,1,97,0,0,125,33,32,96,97,0,0,0,83,88,33,0,32,34,30,7,121,34,3,0,135,97,64,1,119,0,4,0,1,96,22,0,135,97,205,0,96,0,0,0,80,35,95,0,2,97,0,0,254,222,53,2,84,97,35,0,1,97,255,0,19,97,35,97,0,36,97,0,41,97,36,24,42,97,97,24,1,96,224,255,1,98,46,0,138,97,96,98,172,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,56,9,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,200,9,3,0,140,8,3,0,140,8,3,0,140,8,3,0,140,8,3,0,84,10,3,0,25,96,6,1,41,96,96,16,42,96,96,16,0,78,96,0,3,79,1,25,83,79,36,0,0,8,78,0,119,0,108,0,78,55,88,0,41,96,55,24,42,96,96,24,32,56,96,0,25,96,6,1,41,96,96,16,42,96,96,16,0,57,96,0,3,58,1,25,121,56,5,0,1,96,224,255,83,58,96,0,0,8,57,0,119,0,94,0,1,96,0,0,83,58,96,0,80,59,2,0,19,96,57,87,19,98,59,87,15,60,96,98,78,61,88,0,121,60,11,0,19,98,57,87,0,63,98,0,25,98,6,2,41,98,98,16,42,98,98,16,0,64,98,0,3,65,1,63,83,65,61,0,0,8,64,0,119,0,76,0,83,73,61,0,0,8,57,0,119,0,73,0,2,98,0,0,44,156,79,0,82,66,98,0,32,67,66,7,121,67,6,0,78,68,88,0,135,98,65,1,0,68,0,0,0,8,6,0,119,0,63,0,25,98,6,1,41,98,98,16,42,98,98,16,0,69,98,0,3,70,1,25,1,98,0,0,83,70,98,0,80,71,2,0,19,98,69,87,19,96,71,87,15,72,98,96,78,74,88,0,121,72,11,0,19,96,69,87,0,75,96,0,25,96,6,2,41,96,96,16,42,96,96,16,0,76,96,0,3,77,1,75,83,77,74,0,0,8,76,0,119,0,40,0,83,73,74,0,0,8,69,0,119,0,37,0,80,47,2,0,41,96,47,16,42,96,96,16,32,48,96,1,121,48,10,0,25,96,6,1,41,96,96,16,42,96,96,16,0,49,96,0,3,50,1,25,1,96,8,0,83,50,96,0,0,8,49,0,119,0,23,0,41,96,6,16,42,96,96,16,32,52,96,0,121,52,3,0,1,4,0,0,119,0,28,0,26,96,6,1,41,96,96,16,42,96,96,16,0,53,96,0,3,54,1,25,1,96,0,0,83,54,96,0,1,98,8,0,135,96,63,1,98,62,0,0,1,98,32,0,135,96,63,1,98,62,0,0,0,8,53,0,119,0,2,0,119,0,24,0,78,80,92,0,41,97,80,24,42,97,97,24,32,81,97,0,121,81,3,0,0,4,8,0,119,0,5,0,78,82,95,0,135,97,63,1,82,62,0,0,0,4,8,0,80,26,2,0,19,97,4,87,0,27,97,0,19,97,4,87,19,96,26,87,15,28,97,96,121,28,4,0,0,6,4,0,0,25,27,0,119,0,23,255,0,5,4,0,119,0,44,0,25,96,6,1,41,96,96,16,42,96,96,16,0,37,96,0,3,38,1,25,1,96,13,0,83,38,96,0,80,39,2,0,19,96,37,87,19,97,39,87,15,41,96,97,121,41,12,0,19,97,37,87,0,42,97,0,3,43,1,42,25,97,6,2,41,97,97,16,42,97,97,16,0,44,97,0,1,97,10,0,83,43,97,0,0,7,44,0,119,0,2,0,0,7,37,0,84,2,7,0,84,95,29,0,78,45,92,0,41,97,45,24,42,97,97,24,32,46,97,0,121,46,3,0,1,97,1,0,139,97,0,0,1,96,13,0,135,97,63,1,96,62,0,0,1,96,10,0,135,97,63,1,96,62,0,0,1,97,1,0,139,97,0,0,119,0,2,0,0,5,3,0,84,2,5,0,84,95,29,0,1,97,1,0,139,97,0,0,140,2,53,0,0,0,0,0,1,48,0,0,136,50,0,0,0,49,50,0,136,50,0,0,25,50,50,64,137,50,0,0,25,47,49,24,25,46,49,16,25,45,49,8,0,44,49,0,25,16,49,40,25,27,49,32,25,35,49,50,25,36,49,48,25,37,49,28,25,38,49,52,1,50,13,0,85,16,50,0,25,39,16,4,1,50,0,0,85,39,50,0,85,44,1,0,2,51,0,0,226,89,20,0,135,50,18,0,16,51,44,0,78,40,1,0,41,50,40,24,42,50,50,24,32,6,50,64,121,6,3,0,1,50,32,0,83,1,50,0,135,7,66,1,1,0,0,0,1,50,0,0,85,44,50,0,1,50,0,0,85,27,50,0,1,50,0,0,85,37,50,0,1,50,0,0,135,8,67,1,50,7,44,27,38,0,0,0,1,50,1,0,16,9,50,8,121,9,5,0,2,51,0,0,251,89,20,0,135,50,24,0,51,45,0,0,82,10,44,0,1,50,0,0,14,11,10,50,82,12,27,0,1,50,0,0,14,13,12,50,20,50,11,13,0,42,50,0,121,42,123,0,25,14,0,24,82,15,14,0,1,50,0,0,135,17,183,0,15,50,0,0,41,50,17,24,42,50,50,24,33,18,50,255,82,19,14,0,1,50,1,0,135,20,183,0,19,50,0,0,41,50,20,24,42,50,50,24,33,21,50,255,1,50,0,0,13,22,10,50,121,22,3,0,1,34,1,0,119,0,23,0,1,50,0,0,135,23,219,0,10,50,35,0,121,23,18,0,80,24,35,0,135,50,220,0,24,0,0,0,85,46,10,0,2,51,0,0,42,90,20,0,135,50,24,0,51,46,0,0,121,18,4,0,1,51,0,0,135,50,220,0,51,0,0,0,1,51,0,0,135,50,219,0,10,51,35,0,1,34,0,0,119,0,2,0,1,34,0,0,1,50,0,0,13,25,12,50,121,25,6,0,0,4,21,0,0,5,18,0,1,32,1,0,0,33,34,0,119,0,77,0,85,47,12,0,2,51,0,0,71,90,20,0,135,50,24,0,51,47,0,0,121,21,4,0,1,51,1,0,135,50,220,0,51,0,0,0,20,50,11,18,0,43,50,0,120,43,6,0,2,51,0,0,210,153,20,0,1,52,2,0,135,50,219,0,51,52,35,0,78,26,38,0,41,50,26,24,42,50,50,24,32,28,50,0,121,28,10,0,1,50,2,0,1,52,32,0,1,51,18,0,135,31,252,0,12,50,52,51,35,36,0,0,0,2,31,0,1,48,21,0,119,0,16,0,1,51,2,0,135,29,219,0,12,51,35,0,121,29,6,0,1,52,1,0,1,50,2,0,135,51,223,0,52,37,50,0,119,0,7,0,1,51,32,0,135,30,216,0,12,51,35,0,0,2,30,0,1,48,21,0,119,0,1,0,32,51,48,21,121,51,11,0,40,51,21,1,0,3,51,0,20,51,2,3,0,41,51,0,120,41,6,0,2,50,0,0,210,153,20,0,1,52,2,0,135,51,219,0,50,52,35,0,121,43,6,0,0,4,21,0,0,5,18,0,1,32,0,0,0,33,34,0,119,0,13,0,1,52,0,0,135,51,220,0,52,0,0,0,0,4,21,0,1,5,0,0,1,32,0,0,0,33,34,0,119,0,5,0,1,4,0,0,1,5,0,0,1,32,1,0,1,33,1,0,135,51,27,1,0,7,0,0,120,33,12,0,1,52,0,0,135,51,220,0,52,0,0,0,121,5,6,0,2,52,0,0,210,153,20,0,1,50,2,0,135,51,219,0,52,50,35,0,135,51,68,1,10,0,0,0,121,32,3,0,137,49,0,0,139,0,0,0,1,50,1,0,135,51,220,0,50,0,0,0,120,5,6,0,2,50,0,0,210,153,20,0,1,52,2,0,135,51,219,0,50,52,35,0,121,4,6,0,2,52,0,0,210,153,20,0,1,50,2,0,135,51,219,0,52,50,35,0,120,5,4,0,1,50,0,0,135,51,220,0,50,0,0,0,135,51,68,1,12,0,0,0,137,49,0,0,139,0,0,0,140,0,67,0,0,0,0,0,2,59,0,0,220,19,224,0,2,60,0,0,216,19,224,0,2,61,0,0,82,165,4,0,2,62,0,0,255,7,0,0,2,63,0,0,248,4,56,0,2,64,0,0,81,165,4,0,1,57,0,0,136,65,0,0,0,58,65,0,2,65,0,0,252,130,237,0,82,7,65,0,2,65,0,0,68,149,18,0,82,8,65,0,3,19,8,7,2,65,0,0,68,149,18,0,85,65,19,0,2,65,0,0,252,130,237,0,1,66,0,0,85,65,66,0,1,66,0,0,15,30,66,19,120,30,7,0,1,45,0,0,0,46,19,0,3,44,45,46,1,66,0,0,15,47,66,44,139,47,0,0,2,66,0,0,192,243,223,0,82,41,66,0,32,49,41,0,121,49,4,0,0,9,19,0,1,11,0,0,119,0,10,0,135,66,69,1,2,66,0,0,68,149,18,0,82,1,66,0,2,66,0,0,252,130,237,0,82,2,66,0,0,9,1,0,0,11,2,0,2,66,0,0,72,149,18,0,82,50,66,0,2,66,0,0,54,224,53,2,1,65,1,0,83,66,65,0,82,51,59,0,1,65,0,0,13,52,51,65,121,52,4,0,0,48,9,0,1,57,11,0,119,0,80,0,4,53,50,9,4,10,53,11,76,65,10,0,145,12,65,0,88,13,51,0,145,13,13,0,76,65,50,0,145,14,65,0,65,15,13,14,145,15,15,0,72,65,15,12,12,16,65,0,121,16,3,0,58,0,15,0,119,0,46,0,0,18,51,0,58,21,13,0,25,17,18,12,82,20,17,0,85,59,20,0,2,65,0,0,224,19,224,0,89,65,21,0,25,22,18,8,82,23,22,0,25,24,18,4,82,25,24,0,19,66,23,62,135,65,146,0,66,25,0,0,82,26,60,0,85,17,26,0,85,60,18,0,82,27,59,0,1,65,0,0,13,28,27,65,120,28,18,0,2,65,0,0,72,149,18,0,82,3,65,0,88,29,27,0,145,29,29,0,76,65,3,0,145,31,65,0,65,32,29,31,145,32,32,0,72,65,32,12,12,33,65,0,121,33,3,0,58,0,32,0,119,0,10,0,0,18,27,0,58,21,29,0,119,0,220,255,2,65,0,0,68,149,18,0,82,4,65,0,0,48,4,0,1,57,11,0,119,0,20,0,2,65,0,0,54,224,53,2,1,66,0,0,83,65,66,0,64,34,0,12,145,34,34,0,75,35,34,0,32,36,35,0,1,66,1,0,125,54,36,66,35,0,0,0,2,66,0,0,68,149,18,0,82,37,66,0,15,38,54,37,125,55,38,54,37,0,0,0,0,40,37,0,0,56,55,0,32,66,57,11,121,66,7,0,2,66,0,0,54,224,53,2,1,65,0,0,83,66,65,0,0,40,48,0,0,56,48,0,2,65,0,0,252,130,237,0,85,65,56,0,4,39,40,56,2,65,0,0,68,149,18,0,85,65,39,0,2,65,0,0,192,243,223,0,82,42,65,0,32,43,42,0,121,43,7,0,0,45,56,0,0,46,39,0,3,44,45,46,1,65,0,0,15,47,65,44,139,47,0,0,135,65,69,1,2,65,0,0,68,149,18,0,82,5,65,0,2,65,0,0,252,130,237,0,82,6,65,0,0,45,6,0,0,46,5,0,3,44,45,46,1,65,0,0,15,47,65,44,139,47,0,0,140,2,51,0,0,0,0,0,2,47,0,0,0,238,1,0,1,45,0,0,136,48,0,0,0,46,48,0,136,48,0,0,1,49,16,16,3,48,48,49,137,48,0,0,1,48,0,16,3,44,46,48,0,25,46,0,135,36,66,1,1,0,0,0,0,3,25,0,0,4,36,0,78,38,4,0,41,48,38,24,42,48,48,24,1,49,0,0,1,50,93,0,138,48,49,50,212,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,216,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,220,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,224,19,3,0,48,20,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,52,20,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,204,19,3,0,56,20,3,0,0,20,38,0,119,0,27,0,119,0,32,0,119,0,31,0,119,0,30,0,1,49,0,0,83,3,49,0,1,2,0,0,27,49,2,20,3,39,47,49,82,40,39,0,135,41,33,1,40,25,0,0,32,42,41,0,121,42,3,0,1,45,5,0,119,0,18,0,25,16,2,1,32,17,16,42,120,17,3,0,0,2,16,0,119,0,243,255,78,10,4,0,0,20,10,0,119,0,4,0,119,0,9,0,119,0,8,0,119,0,234,255,25,18,4,1,25,19,3,1,83,3,20,0,0,3,19,0,0,4,18,0,119,0,124,255,32,48,45,5,121,48,18,0,27,48,2,20,3,48,47,48,25,9,48,12,82,13,9,0,42,48,13,1,0,43,48,0,3,15,0,43,27,48,2,20,3,48,47,48,25,8,48,8,82,12,8,0,1,49,255,0,19,49,12,49,135,48,70,1,49,15,4,0,137,46,0,0,139,0,0,0,1,48,0,0,83,3,48,0,135,21,41,0,25,0,0,0,32,22,21,0,121,22,3,0,137,46,0,0,139,0,0,0,1,5,0,0,27,48,5,20,3,23,47,48,82,24,23,0,135,26,33,1,24,25,0,0,32,27,26,0,121,27,3,0,1,45,12,0,119,0,6,0,25,30,5,1,32,31,30,42,120,31,3,0,0,5,30,0,119,0,243,255,32,48,45,12,121,48,18,0,27,48,5,20,3,48,47,48,25,7,48,12,82,11,7,0,42,48,11,1,0,28,48,0,3,29,0,28,27,48,5,20,3,48,47,48,25,6,48,8,82,14,6,0,1,49,255,0,19,49,14,49,135,48,70,1,49,29,4,0,137,46,0,0,139,0,0,0,135,32,71,1,0,25,4,0,121,32,3,0,137,46,0,0,139,0,0,0,2,48,0,0,186,223,53,2,78,33,48,0,41,48,33,24,42,48,48,24,32,34,48,0,120,34,6,0,135,35,72,1,0,25,4,0,121,35,3,0,137,46,0,0,139,0,0,0,2,48,0,0,123,156,20,0,135,37,23,1,48,0,0,0,85,44,25,0,135,48,24,1,0,37,44,0,137,46,0,0,139,0,0,0,140,1,51,0,0,0,0,0,1,47,0,0,136,49,0,0,0,48,49,0,2,49,0,0,128,170,18,0,78,3,49,0,41,49,3,24,42,49,49,24,33,14,49,0,2,49,0,0,44,156,79,0,82,25,49,0,32,36,25,7,20,49,14,36,0,43,49,0,120,43,69,0,1,49,26,4,135,19,166,0,49,0,0,0,1,49,28,4,135,20,166,0,49,0,0,0,2,49,0,0,255,255,0,0,19,49,19,49,0,21,49,0,41,49,19,16,42,49,49,16,41,50,20,16,42,50,50,16,13,22,49,50,25,23,0,36,78,24,23,0,41,50,24,24,42,50,50,24,32,26,50,0,121,22,6,0,1,50,211,128,1,49,147,128,125,46,26,50,49,0,0,0,139,46,0,0,120,26,3,0,1,37,147,128,139,37,0,0,1,49,0,4,3,27,21,49,135,28,166,0,27,0,0,0,41,49,28,16,42,49,49,16,32,29,49,0,120,29,3,0,1,37,147,128,139,37,0,0,1,49,128,4,135,30,166,0,49,0,0,0,1,49,130,4,135,31,166,0,49,0,0,0,25,32,21,2,2,49,0,0,255,255,0,0,19,49,32,49,0,33,49,0,25,49,19,2,41,49,49,16,42,49,49,16,0,34,49,0,2,49,0,0,255,255,0,0,19,49,34,49,2,50,0,0,255,255,0,0,19,50,31,50,15,35,49,50,125,45,35,33,30,0,0,0,1,49,26,4,135,50,235,0,49,45,0,0,1,37,211,128,139,37,0,0,25,38,0,36,78,39,38,0,41,50,39,24,42,50,50,24,32,40,50,0,120,40,3,0,1,37,147,128,139,37,0,0,2,50,0,0,220,156,79,0,82,41,50,0,2,50,0,0,224,156,79,0,82,42,50,0,16,4,41,42,121,4,3,0,1,37,147,128,139,37,0,0,2,50,0,0,200,129,237,0,80,5,50,0,39,50,25,1,0,6,50,0,32,7,6,5,1,50,17,0,1,49,1,0,125,8,7,50,49,0,0,0,2,49,0,0,201,129,237,0,83,49,8,0,121,36,3,0,135,49,64,1,119,0,4,0,1,50,22,0,135,49,205,0,50,0,0,0,2,49,0,0,236,129,237,0,82,9,49,0,38,49,9,64,0,10,49,0,32,11,10,0,121,11,32,0,2,49,0,0,44,156,79,0,82,12,49,0,32,13,12,7,2,49,0,0,200,129,237,0,78,15,49,0,41,49,15,24,42,49,49,24,32,16,49,0,19,49,13,16,0,44,49,0,121,44,17,0,2,49,0,0,201,129,237,0,78,17,49,0,135,18,65,1,0,17,0,0,1,49,147,128,1,50,211,128,125,1,18,49,50,0,0,0,2,50,0,0,201,129,237,0,1,49,0,0,83,50,49,0,135,49,64,1,0,2,1,0,119,0,4,0,1,2,147,128,119,0,2,0,1,2,211,128,2,49,0,0,200,129,237,0,84,49,5,0,0,37,2,0,139,37,0,0,140,2,40,0,0,0,0,0,2,38,0,0,255,255,0,0,1,36,0,0,136,39,0,0,0,37,39,0,135,39,73,1,2,39,0,0,216,129,237,0,80,12,39,0,19,39,12,38,0,23,39,0,2,39,0,0,250,255,0,0,3,30,23,39,19,39,30,38,0,31,39,0,2,39,0,0,216,129,237,0,84,39,31,0,2,39,0,0,188,130,237,0,82,32,39,0,26,39,12,6,41,39,39,16,42,39,39,16,0,33,39,0,19,39,33,38,0,34,39,0,3,35,32,34,2,39,0,0,176,129,237,0,82,2,39,0,2,39,0,0,110,223,53,2,80,3,39,0,19,39,3,38,0,4,39,0,41,39,2,5,0,5,39,0,3,6,5,4,19,39,6,38,0,7,39,0,135,39,235,0,35,7,0,0,2,39,0,0,188,130,237,0,82,8,39,0,2,39,0,0,216,129,237,0,80,9,39,0,19,39,9,38,0,10,39,0,25,11,8,2,3,13,11,10,2,39,0,0,108,223,53,2,80,14,39,0,135,39,235,0,13,14,0,0,2,39,0,0,188,130,237,0,82,15,39,0,2,39,0,0,216,129,237,0,80,16,39,0,19,39,16,38,0,17,39,0,25,18,15,4,3,19,18,17,2,39,0,0,236,129,237,0,82,20,39,0,19,39,20,38,0,21,39,0,135,39,235,0,19,21,0,0,2,39,0,0,232,129,237,0,82,22,39,0,2,39,0,0,152,130,237,0,82,24,39,0,19,39,1,38,0,25,39,0,2,39,0,0,232,129,237,0,85,39,25,0,19,39,0,38,0,26,39,0,2,39,0,0,152,130,237,0,85,39,26,0,41,39,26,4,0,27,39,0,2,39,0,0,184,130,237,0,85,39,27,0,135,39,145,0,2,39,0,0,232,129,237,0,85,39,22,0,19,39,24,38,0,28,39,0,2,39,0,0,152,130,237,0,85,39,28,0,41,39,28,4,0,29,39,0,2,39,0,0,184,130,237,0,85,39,29,0,139,0,0,0,140,0,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,136,26,0,0,25,26,26,32,137,26,0,0,25,23,25,8,0,22,25,0,25,0,25,16,1,26,21,0,85,0,26,0,25,1,0,4,1,26,0,0,85,1,26,0,2,27,0,0,235,137,20,0,135,26,18,0,0,27,22,0,2,26,0,0,80,189,79,0,82,12,26,0,1,26,0,0,13,15,12,26,120,15,5,0,2,27,0,0,1,138,20,0,135,26,31,0,27,23,0,0,1,26,64,0,135,16,26,0,26,0,0,0,135,26,51,1,16,0,0,0,2,26,0,0,184,99,17,0,85,16,26,0,25,17,16,28,85,17,17,0,25,18,16,32,85,18,17,0,25,19,16,36,1,26,0,0,85,19,26,0,25,20,16,40,85,20,20,0,25,21,16,44,85,21,20,0,25,2,16,48,1,26,0,0,85,2,26,0,25,3,16,54,1,26,0,0,84,3,26,0,25,4,16,60,1,26,1,0,83,4,26,0,25,5,16,61,1,26,0,0,83,5,26,0,25,6,16,56,1,26,0,0,85,6,26,0,25,7,16,62,1,26,0,0,83,7,26,0,25,8,16,63,1,26,0,0,83,8,26,0,2,26,0,0,80,189,79,0,85,26,16,0,135,26,74,1,16,0,0,0,2,26,0,0,80,189,79,0,82,9,26,0,1,26,0,0,13,10,9,26,121,10,7,0,2,26,0,0,80,189,79,0,1,27,0,0,85,26,27,0,137,25,0,0,139,0,0,0,82,11,9,0,25,13,11,4,82,14,13,0,1,26,255,7,19,26,14,26,135,27,146,0,26,9,0,0,2,27,0,0,80,189,79,0,1,26,0,0,85,27,26,0,137,25,0,0,139,0,0,0,140,0,34,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,25,29,31,8,0,28,31,0,25,0,31,12,2,32,0,0,124,156,79,0,135,1,18,1,32,0,0,0,2,32,0,0,255,255,0,0,19,32,1,32,0,12,32,0,41,32,12,4,0,21,32,0,1,32,20,1,3,22,21,32,135,23,181,0,22,0,0,0,1,32,0,0,85,0,32,0,1,32,255,0,19,32,23,32,0,24,32,0,2,32,0,0,252,194,79,0,82,25,32,0,2,32,0,0,248,194,79,0,82,26,32,0,4,27,25,26,42,32,27,2,0,2,32,0,16,3,2,24,121,3,5,0,2,33,0,0,93,4,21,0,135,32,31,0,33,28,0,0,0,4,26,0,41,32,24,2,3,5,4,32,82,6,5,0,1,32,0,0,13,7,6,32,121,7,5,0,2,33,0,0,130,4,21,0,135,32,31,0,33,29,0,0,25,8,6,20,82,9,8,0,1,32,0,0,13,10,9,32,121,10,4,0,137,31,0,0,1,32,0,0,139,32,0,0,1,33,255,7,19,33,9,33,135,32,146,0,33,0,0,0,82,11,0,0,82,13,11,0,25,14,13,8,82,15,14,0,1,33,255,7,19,33,15,33,135,32,146,0,33,11,0,0,82,16,0,0,1,32,0,0,13,17,16,32,121,17,4,0,137,31,0,0,1,32,0,0,139,32,0,0,82,18,16,0,25,19,18,4,82,20,19,0,1,33,255,7,19,33,20,33,135,32,146,0,33,16,0,0,137,31,0,0,1,32,0,0,139,32,0,0,140,3,34,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,0,23,31,0,2,32,0,0,124,156,79,0,135,24,18,1,32,0,0,0,2,32,0,0,255,255,0,0,19,32,24,32,0,25,32,0,41,32,25,4,0,26,32,0,85,23,26,0,25,27,23,4,84,27,24,0,135,28,183,0,23,0,0,0,1,32,255,0,19,32,28,32,0,29,32,0,2,32,0,0,56,92,17,0,82,4,32,0,16,5,29,4,120,5,7,0,1,33,6,0,135,32,17,1,33,0,0,0,1,3,0,0,137,31,0,0,139,3,0,0,2,32,0,0,232,156,79,0,82,6,32,0,41,32,29,2,3,7,6,32,82,8,7,0,1,32,0,0,13,9,8,32,120,9,29,0,82,10,8,0,25,11,10,40,82,12,11,0,1,32,255,0,19,32,12,32,135,13,19,1,32,8,0,0,121,13,21,0,80,14,2,0,84,23,14,0,2,32,0,0,232,156,79,0,82,15,32,0,41,32,29,2,3,16,15,32,82,17,16,0,82,18,17,0,25,19,18,12,82,20,19,0,1,32,255,0,19,32,20,32,135,21,21,1,32,17,1,23,80,22,23,0,84,2,22,0,0,3,21,0,137,31,0,0,139,3,0,0,1,33,6,0,135,32,17,1,33,0,0,0,1,3,0,0,137,31,0,0,139,3,0,0,140,3,34,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,0,23,31,0,2,32,0,0,124,156,79,0,135,24,18,1,32,0,0,0,2,32,0,0,255,255,0,0,19,32,24,32,0,25,32,0,41,32,25,4,0,26,32,0,85,23,26,0,25,27,23,4,84,27,24,0,135,28,183,0,23,0,0,0,1,32,255,0,19,32,28,32,0,29,32,0,2,32,0,0,56,92,17,0,82,4,32,0,16,5,29,4,120,5,7,0,1,33,6,0,135,32,17,1,33,0,0,0,1,3,0,0,137,31,0,0,139,3,0,0,2,32,0,0,232,156,79,0,82,6,32,0,41,32,29,2,3,7,6,32,82,8,7,0,1,32,0,0,13,9,8,32,120,9,29,0,82,10,8,0,25,11,10,40,82,12,11,0,1,32,255,0,19,32,12,32,135,13,19,1,32,8,0,0,121,13,21,0,80,14,2,0,84,23,14,0,2,32,0,0,232,156,79,0,82,15,32,0,41,32,29,2,3,16,15,32,82,17,16,0,82,18,17,0,25,19,18,8,82,20,19,0,1,32,255,0,19,32,20,32,135,21,21,1,32,17,1,23,80,22,23,0,84,2,22,0,0,3,21,0,137,31,0,0,139,3,0,0,1,33,6,0,135,32,17,1,33,0,0,0,1,3,0,0,137,31,0,0,139,3,0,0,140,0,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,2,31,0,0,236,129,237,0,82,0,31,0,1,31,0,2,19,31,0,31,0,1,31,0,1,31,0,2,20,31,0,31,0,12,31,0,2,31,0,0,236,129,237,0,85,31,12,0,2,31,0,0,152,130,237,0,82,20,31,0,2,31,0,0,232,129,237,0,82,21,31,0,2,31,0,0], eb + 194560);
  HEAPU8.set([108,223,53,2,80,22,31,0,2,31,0,0,255,255,0,0,19,31,22,31,0,23,31,0,2,31,0,0,152,130,237,0,85,31,23,0,41,31,23,4,0,24,31,0,2,31,0,0,184,130,237,0,85,31,24,0,2,31,0,0,110,223,53,2,80,25,31,0,2,31,0,0,255,255,0,0,19,31,25,31,0,26,31,0,2,31,0,0,180,129,237,0,82,2,31,0,41,31,2,5,0,3,31,0,3,4,3,26,2,31,0,0,232,129,237,0,85,31,4,0,2,31,0,0,60,156,79,0,82,5,31,0,25,6,5,1,2,31,0,0,60,156,79,0,85,31,6,0,135,31,145,0,2,31,0,0,60,156,79,0,82,7,31,0,26,8,7,1,2,31,0,0,60,156,79,0,85,31,8,0,2,31,0,0,232,129,237,0,85,31,21,0,2,31,0,0,255,255,0,0,19,31,20,31,0,9,31,0,2,31,0,0,152,130,237,0,85,31,9,0,41,31,9,4,0,10,31,0,2,31,0,0,184,130,237,0,85,31,10,0,32,11,1,0,2,31,0,0,236,129,237,0,82,13,31,0,1,31,255,253,19,31,13,31,0,14,31,0,1,31,0,2,20,31,13,31,0,15,31,0,125,28,11,14,15,0,0,0,2,31,0,0,236,129,237,0,85,31,28,0,2,31,0,0,188,224,53,2,78,16,31,0,41,31,16,24,42,31,31,24,32,17,31,0,2,31,0,0,252,130,237,0,82,18,31,0,1,31,0,0,15,19,31,18,19,31,17,19,0,27,31,0,120,27,2,0,139,0,0,0,2,31,0,0,252,130,237,0,1,32,0,0,85,31,32,0,139,0,0,0,140,2,32,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,2,31,0,0,216,129,237,0,80,12,31,0,2,31,0,0,255,255,0,0,19,31,12,31,0,22,31,0,2,31,0,0,252,255,0,0,3,23,22,31,2,31,0,0,255,255,0,0,19,31,23,31,0,24,31,0,2,31,0,0,216,129,237,0,84,31,24,0,2,31,0,0,188,130,237,0,82,25,31,0,26,31,12,4,41,31,31,16,42,31,31,16,0,26,31,0,2,31,0,0,255,255,0,0,19,31,26,31,0,27,31,0,3,28,25,27,2,31,0,0,176,129,237,0,82,2,31,0,2,31,0,0,110,223,53,2,80,3,31,0,2,31,0,0,255,255,0,0,19,31,3,31,0,4,31,0,41,31,2,5,0,5,31,0,3,6,5,4,2,31,0,0,255,255,0,0,19,31,6,31,0,7,31,0,135,31,235,0,28,7,0,0,2,31,0,0,188,130,237,0,82,8,31,0,2,31,0,0,216,129,237,0,80,9,31,0,2,31,0,0,255,255,0,0,19,31,9,31,0,10,31,0,25,11,8,2,3,13,11,10,2,31,0,0,108,223,53,2,80,14,31,0,135,31,235,0,13,14,0,0,2,31,0,0,232,129,237,0,82,15,31,0,2,31,0,0,152,130,237,0,82,16,31,0,2,31,0,0,255,255,0,0,19,31,1,31,0,17,31,0,2,31,0,0,232,129,237,0,85,31,17,0,2,31,0,0,255,255,0,0,19,31,0,31,0,18,31,0,2,31,0,0,152,130,237,0,85,31,18,0,41,31,18,4,0,19,31,0,2,31,0,0,184,130,237,0,85,31,19,0,135,31,145,0,2,31,0,0,232,129,237,0,85,31,15,0,2,31,0,0,255,255,0,0,19,31,16,31,0,20,31,0,2,31,0,0,152,130,237,0,85,31,20,0,41,31,20,4,0,21,31,0,2,31,0,0,184,130,237,0,85,31,21,0,139,0,0,0,140,0,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,2,6,0,0,99,25,21,0,78,0,6,0,41,6,0,24,42,6,6,24,32,1,6,0,121,1,20,0,135,6,75,1,135,6,76,1,135,6,77,1,135,6,78,1,135,6,157,0,135,6,158,0,135,6,79,1,135,6,80,1,135,6,81,1,135,6,82,1,135,6,83,1,135,6,84,1,1,7,16,0,135,6,141,0,7,0,0,0,2,6,0,0,99,25,21,0,1,7,1,0,83,6,7,0,1,6,6,0,135,7,141,0,6,0,0,0,2,7,0,0,99,25,21,0,1,6,0,0,83,7,6,0,1,7,0,0,135,6,85,1,7,0,0,0,1,7,0,0,135,6,86,1,7,0,0,0,2,6,0,0,44,156,79,0,82,2,6,0,32,3,2,7,121,3,4,0,1,7,1,0,135,6,14,1,7,0,0,0,1,7,7,0,135,6,141,0,7,0,0,0,1,7,0,0,135,6,87,1,7,0,0,0,1,7,0,0,135,6,88,1,7,0,0,0,1,7,0,0,135,6,89,1,7,0,0,0,1,7,8,0,135,6,141,0,7,0,0,0,135,6,90,1,1,7,9,0,135,6,141,0,7,0,0,0,1,7,0,0,135,6,91,1,7,0,0,0,1,7,0,0,135,6,92,1,7,0,0,0,1,7,0,0,135,6,93,1,7,0,0,0,1,7,10,0,135,6,141,0,7,0,0,0,1,7,11,0,135,6,141,0,7,0,0,0,135,6,94,1,1,6,1,0,139,6,0,0,140,3,26,0,0,0,0,0,2,23,0,0,3,224,53,2,1,21,0,0,136,24,0,0,0,22,24,0,136,24,0,0,1,25,32,8,3,24,24,25,137,24,0,0,25,12,22,16,0,13,22,0,1,24,18,8,3,14,22,24,1,24,16,8,3,15,22,24,85,13,2,0,1,25,255,7,135,24,95,1,12,25,1,13,135,16,41,0,12,0,0,0,2,24,0,0,255,255,0,0,19,24,16,24,0,17,24,0,32,18,17,0,121,18,3,0,137,22,0,0,139,0,0,0,1,3,0,0,1,4,0,0,1,24,1,0,84,15,24,0,3,19,12,4,78,5,19,0,41,24,5,24,42,24,24,24,33,6,24,10,78,7,23,0,41,24,7,24,42,24,24,24,32,8,24,13,20,24,6,8,0,20,24,0,120,20,6,0,1,24,13,0,83,14,24,0,1,25,1,0,135,24,174,0,25,14,15,0,83,14,5,0,83,23,5,0,1,25,1,0,135,24,174,0,25,14,15,0,25,24,3,1,41,24,24,16,42,24,24,16,0,9,24,0,2,24,0,0,255,255,0,0,19,24,9,24,0,10,24,0,16,11,10,17,121,11,4,0,0,3,9,0,0,4,10,0,119,0,220,255,137,22,0,0,139,0,0,0,140,0,14,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,25,8,10,8,0,7,10,0,1,12,0,0,135,11,96,1,12,0,0,0,1,12,0,0,135,11,122,0,12,0,0,0,2,11,0,0,252,129,237,0,78,1,11,0,41,11,1,24,42,11,11,24,32,2,11,0,120,2,5,0,2,12,0,0,9,206,20,0,135,11,31,0,12,7,0,0,1,12,4,0,135,11,141,0,12,0,0,0,2,11,0,0,216,129,237,0,1,12,0,0,85,11,12,0,2,12,0,0,232,129,237,0,1,11,0,0,85,12,11,0,1,12,1,0,1,13,96,0,135,11,97,1,12,13,0,0,1,13,2,0,1,12,96,0,135,11,97,1,13,12,0,0,1,0,0,0,1,11,0,124,3,4,0,11,1,12,0,0,135,11,182,0,4,12,0,0,25,5,0,1,1,11,0,4,13,6,5,11,120,6,3,0,0,0,5,0,119,0,246,255,135,3,98,1,121,3,5,0,137,10,0,0,1,11,0,0,139,11,0,0,119,0,5,0,2,12,0,0,71,206,20,0,135,11,31,0,12,8,0,0,1,11,0,0,139,11,0,0,140,1,17,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,2,16,0,0,232,129,237,0,82,1,16,0,2,16,0,0,152,130,237,0,82,6,16,0,2,16,0,0,110,223,53,2,80,7,16,0,2,16,0,0,255,255,0,0,19,16,7,16,0,8,16,0,1,16,255,0,19,16,0,16,0,9,16,0,27,10,9,6,1,16,0,16,20,16,10,16,0,11,16,0,3,12,11,8,2,16,0,0,232,129,237,0,85,16,12,0,2,16,0,0,108,223,53,2,80,13,16,0,2,16,0,0,255,255,0,0,19,16,13,16,0,2,16,0,2,16,0,0,152,130,237,0,85,16,2,0,41,16,2,4,0,3,16,0,2,16,0,0,184,130,237,0,85,16,3,0,135,16,145,0,2,16,0,0,232,129,237,0,85,16,1,0,2,16,0,0,255,255,0,0,19,16,6,16,0,4,16,0,2,16,0,0,152,130,237,0,85,16,4,0,41,16,4,4,0,5,16,0,2,16,0,0,184,130,237,0,85,16,5,0,139,0,0,0,140,3,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,25,4,0,32,82,5,4,0,2,13,0,0,96,161,23,0,41,14,5,2,3,6,13,14,82,7,6,0,82,8,7,0,25,9,8,12,82,10,9,0,1,14,255,0,19,14,10,14,135,3,21,1,14,7,1,2,139,3,0,0,140,3,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,25,4,0,32,82,5,4,0,2,13,0,0,96,161,23,0,41,14,5,2,3,6,13,14,82,7,6,0,82,8,7,0,25,9,8,8,82,10,9,0,1,14,255,0,19,14,10,14,135,3,21,1,14,7,1,2,139,3,0,0,140,1,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,25,1,0,32,82,2,1,0,2,11,0,0,96,161,23,0,41,12,2,2,3,3,11,12,82,4,3,0,82,5,4,0,25,6,5,28,82,7,6,0,1,12,255,0,19,12,7,12,135,8,19,1,12,4,0,0,139,8,0,0,140,0,10,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,2,9,0,0,204,190,79,0,82,0,9,0,2,9,0,0,108,223,53,2,80,1,9,0,2,9,0,0,110,223,53,2,80,2,9,0,2,9,0,0,255,255,0,0,19,9,2,9,0,3,9,0,41,9,0,5,0,4,9,0,3,5,4,3,2,9,0,0,255,255,0,0,19,9,5,9,0,6,9,0,135,9,99,1,1,6,0,0,1,9,0,0,139,9,0,0,140,0,5,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,135,0,100,1,32,1,0,0,120,1,254,255,119,0,1,0,139,0,0,0], eb + 204800);

  var relocations = [];
  relocations = relocations.concat([364,476,516,1040,1600,1640,2452,3444,3936,4044,5336,5712,5964,5968,5972,5976,6184,6188,6192,6196,6448,7420,7572,7876,8628,9188,12420,12556,12748,13100,13204,13344,13584,14548,14656,14852,15264,15852,16352,16592,16928,17056,17296,17752,18800,19648,19956,19980,20016,20040,20080,20168,20592,20940,21636,22088,22444,22896,23252,23704,24060,24600,24956,25408,25764,26900,28288,32796,32956,33784,34164,34776,35708,35844,36228,36840,37224,37836,38168,38776,38912,39296,39584,39856,39992,40376,40804,40936,41368,41600,41768,41964,42216,42460,42592,42880,43104,43732,43868,44252,44500,44856,45104,45324,45580,45776,46032,46292,46424,46704,46972,47312,47668,48052,48300,48656,49000,49164,49424,49556,50008,50636,50772,51156,51660,51784,52232,52732,53180,53688,53812,54260,54460,54720,54844,55292,55920,56048,56712,56836,57284,57768,57892,58232,58720,59116,59552,59676,60124,60372,60720,61168,61772,62044,62480,62604,63032,63264,63440,63648,63908,64168,64292,64584,64784,65324,65448,65792,66060,66408,66836,67104,67452,67880,68148,68496,68924,69084,69356,69484,69912,70180,70528,70956,71224,71572,72000,72268,72616,73044,73312,73660,74040,74584,74708,75052,75320,75668,76004,76516,77428,77552,77896,78436,78568,78916,79184,79540,79972,80240,80596,81028,81296,81652,82084,82388,82744,83092,83308,83580,83716,84148,84308,84580,84716,85148,85708,85840,86188,86492,86848,87280,87636,88080,88436,88684,89320,89676,89920,90596,90864,91220,91652,91920,92276,92452,92876,93144,93500,93676,94100,94640,95072,95620,95756,96188,96728,97160,97700,98132,98400,98756,99140,99412,99768,100096,100196,100692,100960,101316,101848,102116,102472,102652,103084,103180,103472,103572,103956,104068,104424,104532,104796,104908,105264,105372,105728,105836,106192,106300,106656,106764,107120,107228,107584,107692,108048,108156,108512,108620,108976,109084,109440,109548,109904,110016,110392,110504,111100,111492,111644,111684,111720,111760,111816,112040,112232,112420,112956,114156,114284,114508,114512,114516,114520,114524,114528,114532,114536,114540,114544,114548,114552,114556,114560,114564,114568,114572,114576,114580,114584,114588,115032,115036,115040,115044,115048,115052,115056,115060,115064,115068,115072,115076,115080,115084,115088,115092,115096,115100,115104,115108,115112,115116,115120,115124,115128,115132,115136,115140,115144,115148,115152,115156,115160,115164,115168,115172,115176,115180,115184,115188,115192,115196,115200,115204,115208,115212,115216,115220,115224,115228,115232,115236,115240,115244,115248,115252,115256,115260,115264,115268,115272,115276,115280,115284,115288,115292,115296,115300,115304,115308,115312,115316,115320,115324,115328,115332,115336,115520,115524,115528,115532,115536,115540,115544,115548,115552,115556,115560,115564,115568,115572,115576,115580,115584,115588,115592,115596,115600,115604,115608,115612,115616,115620,115624,115628,115632,115636,115640,115644,115648,115652,115656,115660,115664,115668,115672,115676,115680,115684,115688,115692,115696,115700,115704,115708,115712,115716,115720,115724,115728,115732,115736,115740,115744,115748,115752,115756,115760,115764,115768,115772,115776,115780,115784,115788,115792,115796,115800,115804,115808,115812,115816,115820,115824,115828,115832,115836,115840,115844,115848,115852,115856,115860,115864,115868,115872,115876,115880,115884,115888,115892,115896,115900,115904,115908,115912,115916,115920,115924,115928,115932,115936,115940,115944,115948,115952,115956,115960,115964,115968,115972,116224,117276,117300,117332,118268,118272,118276,118280,118284,118288,118524,118528,118532,118536,118540,118544,119420,119604,119608,119612,119616,119620,119624,119628,119632,119636,119640,122048,124768,126108,126216,126516,127068,127240,127304,127420,128172,128244,128380,130304,130412,130620,131644,131684,131724,131764,133016,133020,133720,133724,133728,133732,133736,133740,133744,133748,135020,135024,135028,135032,137864,137944,138724,138840,140596,140600,144304,144308,144656,144660,144664,144668,147460,147464,147468,147472,147476,147480,147484,147488,147492,147496,147500,147504,147508,147512,147516,147520,147524,147528,147532,147536,147540,147544,147548,147552,147556,147560,147564,147568,147572,147576,147580,147584,147588,147592,147748,147820,147844,148632,149584,149588,150344,150372,150956,150960,150964,150968,150972,150976,150980,150984,150988,150992,150996,151000,151004,151008,151012,151016,151020,151024,151028,151032,151344,151348,151352,151356,151360,151364,151368,151372,151376,151380,151384,151388,151392,151396,151400,151404,151408,151412,151416,151420,151424,151428,151432,151604,151648,151676,151680,151684,151688,151692,151696,151700,151704,151708,151712,151716,151720,151724,151728,151732,152500,152644,152708,152736,152808,153140,153652,153680,153860,153948,154592,154596,154600,154604,154608,154612,154616,154620,154856,154972,155344,155508,155956,156100,156216,156388,156496,156664,156708,156732,157460,157672,157956,158132,158344,158688,158900,159192,159408,159608,159728,159832,160232,160856,160884,160888,160892,160896,160900,160904,160908,160912,160916,160920,160924,160928,160932,160936,160940,160944,160948,160952,160956,160960,160964,160968,160972,160976,160980,160984,160988,160992,160996,161000,161004,161008,161012,161016,161020,161024,161028,161032,161036,161040,161044,161048,161052,161056,161060,161064,161068,161072,161076,161080,161084,161088,161092,161096,161100,161104,161108,161112,161116,161120,161124,161128,161132,161136,161140,161144,161148,161152,161156,161160,161164,161168,161172,161176,161180,161184,161188,161192,161196,161200,161204,161208,161212,161216,161220,161224,161228,161232,161236,161240,161244,161248,161252,161256,161260,161264,161268,161272,161276,161280,161284,161288,161292,161296,161300,161304,161308,161312,161316,161320,161324,161328,161332,161336,161340,161344,161348,161352,161356,161360,161364,161368,161372,161376,161380,161384,161388,161392,161396,161400,161404,161408,161412,161416,161420,161424,161428,161432,161436,161440,161444,161448,161452,161456,161460,161464,161468,161472,161476,161480,161484,161488,161492,161496,161500,161504,161508,161512,161516,161520,161524,161528,161532,161536,161540,161544,161548,161552,161556,161560,161564,161568,161572,161576,161580,161584,161588,161592,161596,161600,161604,161608,161612,161616,161620,161624,161628,161632,161636,161640,161644,161648,161652,161656,161660,161664,161668,161672,161676,161680,161684,161688,161692,161696,161700,161704,161708,161712,161716,161720,161724,161728,161732,161736,161740,161744,161748,161752,161756,161760,161764,161768,161772,161776,161780,161784,161788,161792,161796,161800,161804,161808,161812,161816,161820,161824,161828,161832,161836,161840,161844,161848,161852,161856,161860,161864,161868,161872,161876,161880,161884,161888,161892,161896,161900,161904,161908,161912,161916,161920,161924,161928,161932,161936,161940,161944,161948,161952,161956,161960,161964,161968,161972,161976,161980,161984,161988,161992,161996,162000,162004,162008,162012,162016,162020,162024,162028,162032,162036,162040,162044,162048,162052,162056,162060,162064,162068,162072,162076,162080,162084,162088,162092,162096,162100,162104,162108,162112,162116,162120,162124,162128,162132,162136,162140,162144,162148,162152,162156,162160,162164,162168,162172,162176,162180,162184,162188,162192,162196,162200,162204,162208,162212,162216,162220,162224,162228,162232,162236,162240,162244,162248,162252,162256,162260,162264,162268,162272,162276,162280,162284,162288,162292,162296,162300,162304,162308,162312,162316,162320,162324,162328,162332,162336,162340,162344,162348,162352,162356,162360,162364,162368,162372,162376,162380,162384,162388,162392,162396,162400,162404,162408,162412,162416,162420,162424,162428,162432,162436,162440,162444,162448,162452,162456,162460,162464,162468,162472,162476,162480,162484,162488,162492,162496,162500,162504,162508,162512,162516,162520,162524,162528,162532,162536,162540,162544,162548,162552,162556,162560,162564,162568,162572,162576,162580,162584,162588,162592,162596,162600,162604,162608,162612,162616,162620,162624,162628,162632,162636,162640,162644,162648,162652,162656,162660,162664,162668,162672,162676,162680,162684,162688,162692,162696,162700,162704,162708,162712,162716,162720,162724,162728,162732,162736,162740,162744,162748,162752,162756,162760,162764,162768,162772,162776,162780,162784,162788,162792,162796,162800,162804,162808,162812,162816,162820,162824,162828,162832,162836,162840,162844,162848,162852,162856,162860,162864,162868,162872,162876,162880,162884,162888,162892,162896,162900,162904,162908,162912,162916,162920,162924,162928,162932,162936,162940,162944,162948,162952,162956,162960,162964,162968,162972,162976,162980,162984,162988,162992,162996,163000,163004,163008,163012,163016,163020,163024,163028,163032,163036,163040,163044,163048,163052,163056,163060,163064,163068,163072,163076,163080,163084,163088,163092,163096,163100,163104,163108,163112,163116,163120,163124,163128,163132,163136,163140,163144,163148,163152,163156,163160,163164,163168,163172,163176,163180,163184,163188,163192,163196,163200,163204,163208,163212,163216,163220,163224,163228,163232,163236,163240,163244,163248,163252,163256,163260,163264,163268,163272,163276,163280,163284,163288,163292,163296,163300,163304,163308,163312,163316,163320,163324,163328,163332,163336,163340,163344,163348,163352,163356,163360,163364,163368,163372,163376,163380,163384,163388,163392,163396,163400,163404,163408,163412,163416,163420,163424,163428,163432,163436,163440,163444,163448,163452,163456,163460,163464,163468,163472,163476,163480,163484,163488,163492,163496,163500,163504,163508,163512,163516,163520,163524,163528,163532,163536,163540,163544,163548,163552,163556,163560,163564,163568,163572,163576,163580,163584,163588,163592,163596,163600,163604,163608,163612,163616,163620,163624,163628,163632,163636,163640,163644,163648,163652,163656,163660,163664,163668,163672,163676,163680,163684,163688,163692,163696,163700,163704,163708,163712,163716,163720,163724,163728,163732,163736,163740,163744,163748,163752,163756,163760,163764,163768,163772,163776,163780,163784,163788,163792,163796,163800,163804,163808,163812,163816,163820,163824,163828,163832,163836,163840,163844,163848,163852,163856,163860,163864,163868,163872,163876,163880,163884,163888,163892,163896,163900,163904,163908,163912,163916,163920,163924,163928,163932,163936,163940,163944,163948,163952,163956,163960,163964,163968,163972,163976,163980,163984,163988,163992,163996,164000,164004,164008,164012,164016,164020,164024,164028,164032,164036,164040,164044,164048,164052,164056,164060,164064,164068,164072,164076,164080,164084,164088,164092,164096,164100,164104,164108,164112,164116,164120,164124,164128,164132,164136,164140,164144,164148,164152,164156,164160,164164,164168,164172,164176,164180,164184,164188,164192,164196,164200,164204,164208,164212,164216,164220,164224,164228,164232,164236,164240,164244,164248,164252,164256,164260,164264,164268,164272,164276,164280,164284,164288,164292,164296,164300,164304,164308,164312,164316,164320,164324,164328,164332,164336,164340,164344,164348,164352,164356,164360,164364,164368,164372,164376,164380,164384,164388,164392,164396,164400,164404,164408,164412,164416,164420,164424,164428,164432,164436,164440,164444,164448,164452,164456,164460,164464,164468,164472,164476,164480,164484,164488,164492,164496,164500,164504,164508,164512,164516,164520,164524,164528,164532,164536,164540,164544,164548,164552,164556,164560,164564,164568,164572,164576,164580,164584,164588,164592,164596,164600,164604,164608,164612,164616,164620,164624,164628,164632,164636,164640,164644,164648,164652,164656,164660,164664,164668,164672,164676,164680,164684,164688,164692,164696,164700,164704,164708,164712,164716,164720,164724,164728,164732,164736,164740,164744,164748,164752,164756,164760,164764,164768,164772,164776,164780,164784,164788,164792,164796,164800,164804,164808,164812,164816,164820,164824,164828,164832,164836,164840,164844,164848,164852,164856,164860,164864,164868,164872,164876,164880,164884,164888,164892,164896,164900,164904,164908,164912,164916,164920,164924,164928,164932,164936,164940,164944,164948,164952,164956,164960,164964,164968,164972,164976,164980,164984,164988,164992,164996,165000,165004,165008,165012,165016,165020,165024,165028,165032,165036,165040,165044,165048,165052,165056,165060,165064,165068,165072,165076,165080,165084,165088,165092,165096,165100,165104,165108,165112,165116,165120,165124,165128,165132,165136,165140,165144,165148,165152,165156,165160,165164,165168,165172,165176,165180,165184,165188,165192,165196,165200,165204,165208,165212,165216,165220,165224,165228,165232,165236,165240,165244,165248,165252,165256,165260,165264,165268,165272,165276,165280,165284,165288,165292,165296,165300,165304,165308,165312,165316,165320,165324,165328,165332,165336,165340,165344,165348,165352,165356,165360,165364,165368,165372,165376,165380,165384,165388,165392,165396,165400,165404,165408,165412,165416,165420,165424,165428,165432,165436,165440,165444,165448,165452,165456,165460,165464,165468,165472,165476,165480,165484,165488,165492,165496,165500,165504,165508,165512,165516,165520,165524,165528,165532,165536,165540,165544,165548,165552,165556,165560,165564,165568,165572,165576,165580,165584,165588,165592,165596,165600,165604,165608,165612,165616,165620,165624,165628,165632,165636,165640,165644,165648,165652,165656,165660,165664,165668,165672,165676,165680,165684,165688,165692,165696,165700,165704,165708,165712,165716,165720,165724,165728,165732,165736,165740,165744,165748,165752,165756,165760,165764,165768,165772,165776,165780,165784,165788,165792,165796,165800,165804,165808,165812,165816,165820,165824,165828,165832,165836,165840,165844,165848,165852,165856,165860,165864,165868,165872,165876,165880,165884,165888,165892,165896,165900,165904,165908,165912,165916,165920,165924,165928,165932,165936,165940,165944,165948,165952,165956,165960,165964,165968,165972,165976,165980,165984,165988,165992,165996,166000,166004,166008,166012,166016,166020,166024,166028,166032,166036,166040,166044,166048,166052,166056,166060,166064,166068,166072,166076,166080,166084,166088,166092,166096,166100,166104,166108,166112,166116,166120,166124,166128,166132,166136,166140,166144,166148,166152,166156,166160,166164,166168,166172,166176,166180,166184,166188,166192,166196,166200,166204,166208,166212,166216,166220,166224,166228,166232,166236,166240,166244,166248,166252,166256,166260,166264,166268,166272,166276,166280,166284,166288,166292,166296,166300,166304,166308,166312,166316,166320,166324,166328,166332,166336,166340,166344,166348,166352,166356,166360,166364,166368,166372,166376,166380,166384,166388,166392,166396,166400,166404,166408,166412,166416,166420,166424,166428,166432,166436,166440,166444,166448,166452,166456,166460,166464,166468,166472,166476,166480,166484,166488,166492,166496,166500,166504,166508,166512,166516,166520,166524,166528,166532,166536,166540,166544,166548,166552,166556,166560,166564,166568,166572,166576,166580,166584,166588,166592,166596,166600,166604,166608,166612,166616,166620,166624,166628,166632,166636,166640,166644,166648,166652,166656,166660,166664,166668,166672,166676,166680,166684,166688,166692,166696,166700,166704,166708,166712,166716,166720,166724,166728,166732,166736,166740,166744,166748,166752,166756,166760,166764,166768,166772,166776,166780,166784,166788,166792,166796,166800,166804,166808,166812,166816,166820,166824,166828,166832,166836,166840,166844,166848,166852,166856,166860,166864,166868,166872,166876,166880,166884,166888,166892,166896,166900,166904,166908,166912,166916,166920,166924,166928,166932,166936,166940,166944,166948,166952,166956,166960,166964,166968,166972,166976,166980,166984,166988,166992,166996,167000,167004,167008,167012,167016,167020,167024,167028,167032,167036,167040,167044,167048,167052,167056,167060,167064,167068,167072,167076,167080,167084,167088,167092,167096,167100,167104,167108,167112,167116,167120,167124,167128,167132,167136,167140,167144,167148,167152,167156,167160,167164,167168,167172,167176,167180,167184,167188,167192,167196,167200,167204,167208,167212,167216,167220,167224,167228,167232,167236,167240,167244,167248,167252,167256,167260,167264,167268,167272,167276,167280,167284,167288,167292,167296,167300,167304,167308,167312,167316,167320,167324,167328,167332,167336,167340,167344,167348,167352,167356,167360,167364,167368,167372,167376,167380,167384,167388,167392,167396,167400,167404,167408,167412,167416,167420,167424,167428,167432,167436,167440,167444,167448,167452,167456,167460,167464,167468,167472,167476,167480,167484,167488,167492,167496,167500,167504,167508,167512,167516,167520,167524,167528,167532,167536,167540,167544,167548,167552,167556,167560,167564,167568,167572,167576,167580,167584,167588,167592,167596,167600,167604,167608,167612,167616,167620,167624,167628,167632,167636,167640,167644,167648,167652,167656,167660,167664,167668,167672,167676,167680,167684,167688,167692,167696,167700,167704,167708,167712,167716,167720,167724,167728,167732,167736,167740,167744,167748,167752,167756,167760,167764,167768,167772,167776,167780,167784,167788,167792,167796,167800,167804,167808,167812,167816,167820,167824,167828,167832,167836,167840,167844,167848,167852,167856,167860,167864,167868,167872,167876,167880,167884,167888,167892,167896,167900,167904,167908,167912,167916,167920,167924,167928,167932,167936,167940,167944,167948,167952,167956,167960,167964,167968,167972,167976,167980,167984,167988,167992,167996,168000,168004,168008,168012,168016,168020,168024,168028,168032,168036,168040,168044,168048,168052,168212,169432,169460,169464,169468,169472,169476,169480,169484,169488,169492,169496,169500,169504,169508,169512,169516,169520,169524,169528,169532,169536,169540,169544,169548,169552,169556,169560,169564,169568,169572,169576,169580,169584,169588,169592,169596,169600,169604,169608,169612,169616,169620,169624,169628,169632,169636,169640,169644,169648,169652,169656,169660,169664,169668,169672,169676,169680,169684,169688,169692,169696,169700,169704,169708,169712,169716,169720,169724,169728,169732,169736,169740,169744,169748,169752,169756,169760,169764,169768,169772,169776,169780,169784,169788,169792,169796,169800,169804,169808,169812,169816,169820,169824,169828,169832,169836,169840,169844,169848,169852,169856,169860,169864,169868,169872,169876,169880,169884,169888,169892,169896,169900,169904,169908,169912,169916,169920,169924,169928,169932,169936,169940,169944,169948,169952,169956,169960,169964,169968,169972,169976,169980,169984,169988,169992,169996,170000,170004,170008,170012,170016,170020,170024,170028,170032,170036,170040,170044,170048,170052,170056,170060,170064,170068,170072,170076,170080,170084,170088,170092,170096,170100,170104,170108,170112,170116,170120,170124,170128,170132,170136,170140,170144,170148,170152,170156,170160,170164,170168,170172,170176,170180,170184,170188,170192,170196,170200,170204,170208,170212,170216,170220,170224,170228,170232,170236,170240,170244,170248,170252,170256,170260,170264,170268,170272,170276,170280,170284,170288,170292,170296,170300,170304,170308,170312,170316,170320,170324,170328,170332,170336,170340,170344,170348,170352,170356,170360,170364,170368,170372,170376,170380,170384,170388,170392,170396,170400,170404,170408,170412,170416,170420,170424,170428,170432,170436,170440,170444,170448,170452,170456,170460,170464,170468,170472,170476,170480,170484,170488,170492,170496,170500,170504,170508,170512,170516,170520,170524,170528,170532,170536,170540,170544,170548,170552,170556,170560,170564,170568,170572,170576,170580,170584,170588,170592,170596,170600,170604,170608,170612,170616,170620,170624,170628,170632,170636,170640,170644,170648,170652,170656,170660,170664,170668,170672,170676,170680,170684,170688,170692,170696,170700,170704,170708,170712,170716,170720,170724,170728,170732,170736,170740,170744,170748,170752,170756,170760,170764,170768,170772,170776,170780,170784,170788,170792,170796,170800,170804,170808,170812,170816,170820,170824,170828,170832,170836,170840,170844,170848,170852,170856,170860,170864,170868,170872,170876,170880,170884,170888,170892,170896,170900,170904,170908,170912,170916,170920,170924,170928,170932,170936,170940,170944,170948,170952,170956,170960,170964,170968,170972,170976,170980,170984,170988,170992,170996,171000,171004,171008,171012,171016,171020,171024,171028,171032,171036,171040,171044,171048,171052,171056,171060,171064,171068,171072,171076,171080,171084,171088,171092,171096,171100,171104,171108,171112,171116,171120,171124,171128,171132,171136,171140,171144,171148,171152,171156,171160,171164,171168,171172,171176,171180,171184,171188,171192,171196,171200,171204,171208,171212,171216,171220,171224,171228,171232,171236,171240,171244,171248,171252,171256,171260,171264,171268,171272,171276,171280,171284,171288,171292,171296,171300,171304,171308,171312,171316,171320,171324,171328,171332,171336,171340,171344,171348,171352,171356,171360,171364,171368,171372,171376,171380,171384,171388,171392,171396,171400,171404,171408,171412,171416,171420,171424,171428,171432,171436,171440,171444,171448,171452,171456,171460,171464,171468,171472,171476,171480,171484,171488,171492,171496,171500,171504,171508,171684,171728,172264,172292,172592,172668,172672,172676,172680,172684,172688,172692,172696,172700,172704,172708,172712,172716,172720,172724,172728,172732,172736,172740,172744,172748,172752,172756,172760,172764,172768,172772,172776,172780,172784,172788,172792,172796,172800,172804,172808,172812,172816,172820,172824,172828,172832,172836,172840,172844,172848,172852,172856,172860,172864,172868,172872,172876,172880,172884,172888,172892,172896,172900,172904,172908,172912,172916,172920,172924,172928,172932,172936,172940,172944,172948,172952,172956,172960,172964,172968,172972,172976,172980,172984,172988,172992,172996,173000,173004,173008,173012,173016,173020,173024,173028,173032,173036,173040,173044,173048,173052,173056,173060,173064,173068,173072,173076,173080,173084,173088,173092,173096,173100,173104,173108,173112,173116,173120,173124,173128,173132,173136,173140,173144,173148,173152,173156,173160,173164,173168,173172,173176,173180,173184,173188,173192,173196,173200,173204,173208,173212,173216,173220,173224,173228,173232,173236,173240,173244,173248,173252,173256,173260,173264,173268,173272,173276,173280,173284,173288,173292,173296,173300,173304,173308,173312,173316,173320,173324,173328,173332,173336,173340,173344,173348,173352,173356,173360,173364,173368,173372,173376,173380,173384,173388,173392,173396,173400,173404,173408,173412,173416,173420,173424,173428,173432,173436,173440,173444,173448,173452,173456,173460,173464,173468,173472,173476,173480,173484,173488,173492,173496,173500,173504,173508,173512,173516,173520,173524,173528,173532,173536,173540,173544,173548,173552,173556,173560,173564,173568,173572,173576,173580,173584,173588,173592,173596,173600,173604,173608,173612,173616,173620,173624,173628,173632,173636,173640,173644,173648,173652,173656,173660,173664,173668,173672,173676,173680,173684,173688,173692,173888,174044,174272,174540,174596,174756,174872,175680,175716,175752,176052,176252,176588,176704,176984,176988,176992,176996,177000,177004,177008,177012,177016,177020,177024,177028,177032,177036,177040,177044,177048,177052,177336,177340,177344,177348,177428,177432,177436,177440,177444,177448,177452,177456,177460,177464,177468,177472,177476,177480,177484,177488,177492,177496,177568,177748,177752,177756,177760,177764,177768,177772,177776,177780,177784,177788,177792,177796,177800,177804,177808,177812,177816,177820,177824,177828,177832,177836,177840,177844,177848,177852,177856,177860,177864,177868,177872,177876,177880,177884,177888,177892,177896,177900,177904,177908,177912,177916,177920,177924,177928,177932,177936,177940,177944,178276,178424,178684,178688,178692,178696,178700,178844,178884,178888,178892,178896,178900,179328,179356,179360,179364,179368,179372,179376,179380,179384,179388,179392,179396,179400,179404,179408,179412,179416,179420,179424,179428,179432,179436,179440,179444,179448,179452,179456,179460,179464,179468,179472,179476,179480,179484,179488,179492,179496,179500,179504,179508,179512,179516,179520,179524,179528,179532,179536,179540,179544,179548,179552,179556,179560,179564,179568,179572,179576,179708,179864,180028,180252,180436,180672,180856,181092,181256,181480,181520,181524,181528,181716,182216,182520,182724,182780,183036,183160,183304,183308,183312,183316,183320,183324,183328,183332,183336,183340,183344,183348,183352,183356,183360,183364,183368,183372,183376,183380,183384,183388,183392,183396,183400,183404,183408,183412,183416,183420,183424,183428,183432,183436,183440,183444,183448,183452,183456,183460,183464,183468,183472,183476,183480,183484,183488,183492,184244,184420,184624,184680,184840,184964,184968,184972,184976,184980,184984,184988,184992,184996,185000,185004,185008,185012,185016,185020,185024,185028,185252,185428,185488,185580,185584,185588,185592,185596,185600,185604,185608,185612,185616,185620,185624,185628,185632,185636,186300,186544,187712,187716,187720,187724,187728,187732,187736,187740,187744,187748,187752,187756,187760,187764,187768,187772,187776,187780,187784,187788,187792,187796,187800,187804,187808,187812,187816,187820,187824,187828,187832,187836,187840,188004,188028,188512,191032,191036,191040,191044,191048,191052,191056,191060,191064,191068,191072,191076,191080,191084,191088,191092,191096,191100,191104,191108,191112,191116,191120,191124,191128,191132,191136,191140,191144,191148,191152,191156,191160,192464,195816,195820,195824,195828,195832,195836,195964,195968,195972,195976,195980,195984,195988,195992,195996,196000,196916,196920,196924,196928,196932,196936,196940,198612,198616,198620,198624,198628,198632,198636,198640,198644,198648,198652,198656,198660,198664,198668,198672,198676,198680,198684,198688,198692,198696,198700,198704,198708,198712,198716,198720,198724,198728,198732,198736,198740,198744,198748,198752,198756,198760,198764,198768,198772,198776,198780,198784,198788,198792,201304,201308,201312,201316,201320,201324,201328,201332,201336,201340,201344,201348,201352,201356,201360,201364,201368,201372,201376,201380,201384,201388,201392,201396,201400,201404,201408,201412,201416,201420,201424,201428,201432,201436,201440,201444,201448,201452,201456,201460,201464,201468,201472,201476,201480,201484,201488,201492,201496,201500,201504,201508,201512,201516,201520,201524,201528,201532,201536,201540,201544,201548,201552,201556,201560,201564,201568,201572,201576,201580,201584,201588,201592,201596,201600,201604,201608,201612,201616,201620,201624,201628,201632,201636,201640,201644,201648,201652,201656,201660,201664,201668,201672]);

  for (var i = 0; i < relocations.length; i++) {
    //assert(relocations[i] % 4 === 0);
    //assert(relocations[i] >= 0 && relocations[i] < eb + 207192); // in range
    //assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //err(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        stringToUTF8(name, dirp + pos + 11, 256);
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

   

  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  function _dlerror() {
      // char *dlerror(void);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlerror.html
      if (DLFCN.errorMsg === null) {
        return 0;
      } else {
        if (DLFCN.error) _free(DLFCN.error);
        var msgArr = intArrayFromString(DLFCN.errorMsg);
        DLFCN.error = allocate(msgArr, 'i8', ALLOC_NORMAL);
        DLFCN.errorMsg = null;
        return DLFCN.error;
      }
    }

  function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = '_' + symbol;
        if (!lib.module.hasOwnProperty(symbol)) {
          DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                 '" in dynamic lib: ' + lib.name);
          return 0;
        } else {
          var result = lib.module[symbol];
          if (typeof result === 'function') {
            // convert the exported function into a function pointer using our generic
            // JS mechanism.
            return addFunction(result);
          }
          return result;
        }
      }
    }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglBindAPI(api) {
      if (api == 0x30A0 /* EGL_OPENGL_ES_API */) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } else { // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
    }

  function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) { 
      return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
    }

  
  
  var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.passiveMotionFunc, lastX, lastY);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.motionFunc, lastX, lastY);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },touchHandler:function (event) {
        if (event.target != Module['canvas']) {
          return;
        }
  
        var touches = event.changedTouches,
            main = touches[0],
            type = "";
  
        switch(event.type) {
          case "touchstart": type = "mousedown"; break;
          case "touchmove": type = "mousemove"; break;
          case "touchend": type = "mouseup"; break;
          default: return;
        }
  
        var simulatedEvent = document.createEvent("MouseEvent");
        simulatedEvent.initMouseEvent(type, true, true, window, 1, 
                                      main.screenX, main.screenY, 
                                      main.clientX, main.clientY, false, 
                                      false, false, false, 0/*main*/, null);
  
        main.target.dispatchEvent(simulatedEvent);
        event.preventDefault();
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onFullscreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullscreenEventChange, true);
        }
        Browser.setCanvasSize(width, height, true); // N.B. GLUT.reshapeFunc is also registered as a canvas resize callback.
                                                    // Just call it once here.
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
        }
        _glutPostRedisplay();
      },requestFullscreen:function () {
        Browser.requestFullscreen(/*lockPointer=*/false, /*resizeCanvas=*/false);
      },requestFullScreen:function () {
        err('GLUT.requestFullScreen() is deprecated. Please call GLUT.requestFullscreen instead.');
        GLUT.requestFullScreen = function() {
          return GLUT.requestFullscreen();
        }
        return GLUT.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        err('GLUT.cancelFullScreen() is deprecated. Please call GLUT.exitFullscreen instead.');
        GLUT.cancelFullScreen = function() {
          return GLUT.exitFullscreen();
        }
        return GLUT.exitFullscreen();
      }};function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }
  
  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0),
        alpha: ((GLUT.initDisplayMode & 0x0008 /*GLUT_ALPHA*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          out('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
  
  
  
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _eglCreateContext(display, config, hmm, contextAttribs) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
      // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
      var glesContextVersion = 1;
      for(;;) {
        var param = HEAP32[((contextAttribs)>>2)];
        if (param == 0x3098 /*EGL_CONTEXT_CLIENT_VERSION*/) {
          glesContextVersion = HEAP32[(((contextAttribs)+(4))>>2)];
        } else if (param == 0x3038 /*EGL_NONE*/) {
          break;
        } else {
          /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */
          EGL.setErrorCode(0x3004 /*EGL_BAD_ATTRIBUTE*/);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion != 2) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0; /* EGL_NO_CONTEXT */
      }
  
      _glutInitDisplayMode(0xB2 /* GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE | GLUT_STENCIL */);
      EGL.windowID = _glutCreateWindow();
      if (EGL.windowID != 0) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        // Note: This function only creates a context, but it shall not make it active.
        return 62004; // Magic ID for Emscripten EGLContext
      } else {
        EGL.setErrorCode(0x3009 /* EGL_BAD_MATCH */); // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
        return 0; /* EGL_NO_CONTEXT */
      }
    }

  function _eglCreateWindowSurface(display, config, win, attrib_list) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002 /* Magic ID for the only EGLConfig supported by Emscripten */) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      // TODO: Examine attrib_list! Parameters that can be present there are:
      // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
      // - EGL_VG_COLORSPACE (can't be set)
      // - EGL_VG_ALPHA_FORMAT (can't be set)
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 62006; /* Magic ID for Emscripten 'default surface' */
    }

  
  function _glutDestroyWindow(name) {
      Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      return 1;
    }function _eglDestroyContext(display, context) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      if (context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  function _eglDestroySurface(display, surface) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0; 
      }
      if (surface != 62006 /* Magic ID for the only EGLSurface supported by Emscripten */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1; /* Magic ID for Emscripten 'default surface' */
    }

  function _eglGetConfigAttrib(display, config, attribute, value) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002 /* Magic ID for the only EGLConfig supported by Emscripten */) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch(attribute) {
      case 0x3020: // EGL_BUFFER_SIZE
        HEAP32[((value)>>2)]=32;
        return 1;
      case 0x3021: // EGL_ALPHA_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3022: // EGL_BLUE_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3023: // EGL_GREEN_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3024: // EGL_RED_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3025: // EGL_DEPTH_SIZE
        HEAP32[((value)>>2)]=24;
        return 1;
      case 0x3026: // EGL_STENCIL_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3027: // EGL_CONFIG_CAVEAT
        // We can return here one of EGL_NONE (0x3038), EGL_SLOW_CONFIG (0x3050) or EGL_NON_CONFORMANT_CONFIG (0x3051).
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)]=62002;
        return 1;
      case 0x3029: // EGL_LEVEL
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302A: // EGL_MAX_PBUFFER_HEIGHT
        HEAP32[((value)>>2)]=4096;
        return 1;
      case 0x302B: // EGL_MAX_PBUFFER_PIXELS
        HEAP32[((value)>>2)]=16777216;
        return 1;
      case 0x302C: // EGL_MAX_PBUFFER_WIDTH
        HEAP32[((value)>>2)]=4096;
        return 1;
      case 0x302D: // EGL_NATIVE_RENDERABLE
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302E: // EGL_NATIVE_VISUAL_ID
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302F: // EGL_NATIVE_VISUAL_TYPE
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3031: // EGL_SAMPLES
        HEAP32[((value)>>2)]=4;
        return 1;
      case 0x3032: // EGL_SAMPLE_BUFFERS
        HEAP32[((value)>>2)]=1;
        return 1;
      case 0x3033: // EGL_SURFACE_TYPE
        HEAP32[((value)>>2)]=0x0004;
        return 1;
      case 0x3034: // EGL_TRANSPARENT_TYPE
        // If this returns EGL_TRANSPARENT_RGB (0x3052), transparency is used through color-keying. No such thing applies to Emscripten canvas.
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3035: // EGL_TRANSPARENT_BLUE_VALUE
      case 0x3036: // EGL_TRANSPARENT_GREEN_VALUE
      case 0x3037: // EGL_TRANSPARENT_RED_VALUE
        // "If EGL_TRANSPARENT_TYPE is EGL_NONE, then the values for EGL_TRANSPARENT_RED_VALUE, EGL_TRANSPARENT_GREEN_VALUE, and EGL_TRANSPARENT_BLUE_VALUE are undefined."
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3039: // EGL_BIND_TO_TEXTURE_RGB
      case 0x303A: // EGL_BIND_TO_TEXTURE_RGBA
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x303B: // EGL_MIN_SWAP_INTERVAL
      case 0x303C: // EGL_MAX_SWAP_INTERVAL
        HEAP32[((value)>>2)]=1;
        return 1;
      case 0x303D: // EGL_LUMINANCE_SIZE
      case 0x303E: // EGL_ALPHA_MASK_SIZE
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x303F: // EGL_COLOR_BUFFER_TYPE
        // EGL has two types of buffers: EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.
        HEAP32[((value)>>2)]=0x308E;
        return 1;
      case 0x3040: // EGL_RENDERABLE_TYPE
        // A bit combination of EGL_OPENGL_ES_BIT,EGL_OPENVG_BIT,EGL_OPENGL_ES2_BIT and EGL_OPENGL_BIT.
        HEAP32[((value)>>2)]=0x0004;
        return 1;
      case 0x3042: // EGL_CONFORMANT
        // "EGL_CONFORMANT is a mask indicating if a client API context created with respect to the corresponding EGLConfig will pass the required conformance tests for that API."
        HEAP32[((value)>>2)]=0;
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    }

  function _eglGetDisplay(nativeDisplayType) {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      // Note: As a 'conformant' implementation of EGL, we would prefer to init here only if the user
      //       calls this function with EGL_DEFAULT_DISPLAY. Other display IDs would be preferred to be unsupported
      //       and EGL_NO_DISPLAY returned. Uncomment the following code lines to do this.
      // Instead, an alternative route has been preferred, namely that the Emscripten EGL implementation
      // "emulates" X11, and eglGetDisplay is expected to accept/receive a pointer to an X11 Display object.
      // Therefore, be lax and allow anything to be passed in, and return the magic handle to our default EGLDisplay object.
  
  //    if (nativeDisplayType == 0 /* EGL_DEFAULT_DISPLAY */) {
          return 62000; // Magic ID for Emscripten 'default display'
  //    }
  //    else
  //      return 0; // EGL_NO_DISPLAY
    }

  function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _eglInitialize(display, majorVersion, minorVersion) {
      if (display == 62000 /* Magic ID for Emscripten 'default display' */) {
        if (majorVersion) {
          HEAP32[((majorVersion)>>2)]=1; // Advertise EGL Major version: '1'
        }
        if (minorVersion) {
          HEAP32[((minorVersion)>>2)]=4; // Advertise EGL Minor version: '4'
        }
        EGL.defaultDisplayInitialized = true;
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } 
      else {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
    }

  function _eglMakeCurrent(display, draw, read, context) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0 /* EGL_FALSE */;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy. 
      if (context != 0 && context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006 /* Magic ID for Emscripten 'default surface' */)) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    }

  function _eglSwapBuffers() {
  
      if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(0x3001 /* EGL_NOT_INITIALIZED */);
      } else if (!Module.ctx) {
        EGL.setErrorCode(0x3002 /* EGL_BAD_ACCESS */);
      } else if (Module.ctx.isContextLost()) {
        EGL.setErrorCode(0x300E /* EGL_CONTEXT_LOST */);
      } else {
        // According to documentation this does an implicit flush.
        // Due to discussion at https://github.com/kripken/emscripten/pull/1871
        // the flush was removed since this _may_ result in slowing code down.
        //_glFlush();
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1 /* EGL_TRUE */;
      }
      return 0 /* EGL_FALSE */;
    }

  function _eglSwapInterval(display, interval) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  function _eglTerminate(display) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  
  function _eglWaitClient() {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }function _eglWaitGL() {
  return _eglWaitClient.apply(null, arguments)
  }

  function _eglWaitNative(nativeEngineId) {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  var _emscripten_asm_const_int=true;

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    }

  
  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,lastGamepadState:null,lastGamepadStateFrame:null,numGamepadsConnected:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,staticInit:function () {
        if (typeof window !== 'undefined') {
          window.addEventListener("gamepadconnected", function() { ++JSEvents.numGamepadsConnected; });
          window.addEventListener("gamepaddisconnected", function() { --JSEvents.numGamepadsConnected; });
          
          // Chromium does not fire the gamepadconnected event on reload, so we need to get the number of gamepads here as a workaround.
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=502824
          var firstState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null);
          if (firstState) {
            JSEvents.numGamepadsConnected = firstState.length;
          }
        }
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
          stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
          stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.keyEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/kripken/emscripten/pull/4997
        // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
        if (e.type !== 'wheel' && e.type !== 'mousewheel') {
          JSEvents.previousScreenX = e.screenX;
          JSEvents.previousScreenY = e.screenY;
        }
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.uiEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
          stringToUTF8(id, JSEvents.focusEvent + 128, 128);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.focusEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceMotionEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.orientationChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.fullscreenChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.pointerlockChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.visibilityChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.touchEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.gamepadEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.batteryEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};var __currentFullscreenStrategy={};function _emscripten_exit_fullscreen() {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestFullscreen);
  
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else {
        return -1;
      }
  
      if (__currentFullscreenStrategy.canvasResizedCallback) {
        Module['dynCall_iiii'](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    }

  function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  function _emscripten_force_exit(status) {
      Module['noExitRuntime'] = false;
      exit(status);
    }

  function _emscripten_get_device_pixel_ratio() {
      return window.devicePixelRatio || 1.0;
    }

  function _emscripten_get_element_css_size(target, width, height) {
      if (!target) {
        target = Module['canvas'];
      } else {
        target = JSEvents.findEventTarget(target);
      }
  
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  
  function __emscripten_sample_gamepad_data() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return;
  
      // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
      if (Browser.mainLoop.currentFrameNumber !== JSEvents.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
        JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
        JSEvents.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
      }
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      JSEvents.fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_num_gamepads() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return 0;
  
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
      return JSEvents.lastGamepadState.length;
    }

  function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBeginConditionalRender() {
  err('missing function: emscripten_glBeginConditionalRender'); abort(-1);
  }

  function _emscripten_glBeginTransformFeedback() {
  err('missing function: emscripten_glBeginTransformFeedback'); abort(-1);
  }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glBindBufferBase() {
  err('missing function: emscripten_glBindBufferBase'); abort(-1);
  }

  function _emscripten_glBindBufferRange() {
  err('missing function: emscripten_glBindBufferRange'); abort(-1);
  }

  function _emscripten_glBindFragDataLocation() {
  err('missing function: emscripten_glBindFragDataLocation'); abort(-1);
  }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
  
    }

  function _emscripten_glBindProgramARB() {
  err('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBlitFramebuffer() {
  err('missing function: emscripten_glBlitFramebuffer'); abort(-1);
  }

  function _emscripten_glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClampColor() {
  err('missing function: emscripten_glClampColor'); abort(-1);
  }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearBufferfi() {
  err('missing function: emscripten_glClearBufferfi'); abort(-1);
  }

  function _emscripten_glClearBufferfv() {
  err('missing function: emscripten_glClearBufferfv'); abort(-1);
  }

  function _emscripten_glClearBufferiv() {
  err('missing function: emscripten_glClearBufferiv'); abort(-1);
  }

  function _emscripten_glClearBufferuiv() {
  err('missing function: emscripten_glClearBufferuiv'); abort(-1);
  }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepth(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glClientActiveTexture() {
  err('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glColorMaski() {
  err('missing function: emscripten_glColorMaski'); abort(-1);
  }

  function _emscripten_glColorPointer() {
  err('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteObjectARB() {
  err('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDisablei() {
  err('missing function: emscripten_glDisablei'); abort(-1);
  }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDrawBuffers(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawRangeElements() {
  err('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableClientState() {
  err('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEnablei() {
  err('missing function: emscripten_glEnablei'); abort(-1);
  }

  function _emscripten_glEndConditionalRender() {
  err('missing function: emscripten_glEndConditionalRender'); abort(-1);
  }

  function _emscripten_glEndTransformFeedback() {
  err('missing function: emscripten_glEndTransformFeedback'); abort(-1);
  }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glFrustum() {
  err('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniformBlockName() {
  err('missing function: emscripten_glGetActiveUniformBlockName'); abort(-1);
  }

  function _emscripten_glGetActiveUniformBlockiv() {
  err('missing function: emscripten_glGetActiveUniformBlockiv'); abort(-1);
  }

  function _emscripten_glGetActiveUniformName() {
  err('missing function: emscripten_glGetActiveUniformName'); abort(-1);
  }

  function _emscripten_glGetActiveUniformsiv() {
  err('missing function: emscripten_glGetActiveUniformsiv'); abort(-1);
  }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glGetBooleani_v() {
  err('missing function: emscripten_glGetBooleani_v'); abort(-1);
  }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glGetFragDataLocation() {
  err('missing function: emscripten_glGetFragDataLocation'); abort(-1);
  }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetInfoLogARB() {
  err('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  function _emscripten_glGetIntegeri_v() {
  err('missing function: emscripten_glGetIntegeri_v'); abort(-1);
  }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetObjectParameterivARB() {
  err('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  err('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetStringi() {
  err('missing function: emscripten_glGetStringi'); abort(-1);
  }

  function _emscripten_glGetTexParameterIiv() {
  err('missing function: emscripten_glGetTexParameterIiv'); abort(-1);
  }

  function _emscripten_glGetTexParameterIuiv() {
  err('missing function: emscripten_glGetTexParameterIuiv'); abort(-1);
  }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTransformFeedbackVarying() {
  err('missing function: emscripten_glGetTransformFeedbackVarying'); abort(-1);
  }

  function _emscripten_glGetUniformBlockIndex() {
  err('missing function: emscripten_glGetUniformBlockIndex'); abort(-1);
  }

  function _emscripten_glGetUniformIndices() {
  err('missing function: emscripten_glGetUniformIndices'); abort(-1);
  }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glGetUniformuiv() {
  err('missing function: emscripten_glGetUniformuiv'); abort(-1);
  }

  function _emscripten_glGetVertexAttribIiv() {
  err('missing function: emscripten_glGetVertexAttribIiv'); abort(-1);
  }

  function _emscripten_glGetVertexAttribIuiv() {
  err('missing function: emscripten_glGetVertexAttribIuiv'); abort(-1);
  }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsEnabledi() {
  err('missing function: emscripten_glIsEnabledi'); abort(-1);
  }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArray(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glLoadMatrixf() {
  err('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glNormalPointer() {
  err('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glRenderbufferStorageMultisample() {
  err('missing function: emscripten_glRenderbufferStorageMultisample'); abort(-1);
  }

  function _emscripten_glRotatef() {
  err('missing function: emscripten_glRotatef'); abort(-1);
  }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexCoordPointer() {
  err('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _emscripten_glTexImage3D() {
  err('missing function: emscripten_glTexImage3D'); abort(-1);
  }

  function _emscripten_glTexParameterIiv() {
  err('missing function: emscripten_glTexParameterIiv'); abort(-1);
  }

  function _emscripten_glTexParameterIuiv() {
  err('missing function: emscripten_glTexParameterIuiv'); abort(-1);
  }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexStorage2D() {
  err('missing function: emscripten_glTexStorage2D'); abort(-1);
  }

  function _emscripten_glTexStorage3D() {
  err('missing function: emscripten_glTexStorage3D'); abort(-1);
  }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glTexSubImage3D() {
  err('missing function: emscripten_glTexSubImage3D'); abort(-1);
  }

  function _emscripten_glTransformFeedbackVaryings() {
  err('missing function: emscripten_glTransformFeedbackVaryings'); abort(-1);
  }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glUniform1ui() {
  err('missing function: emscripten_glUniform1ui'); abort(-1);
  }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glUniform2ui() {
  err('missing function: emscripten_glUniform2ui'); abort(-1);
  }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glUniform3ui() {
  err('missing function: emscripten_glUniform3ui'); abort(-1);
  }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _emscripten_glUniform4ui() {
  err('missing function: emscripten_glUniform4ui'); abort(-1);
  }

  function _emscripten_glUniformBlockBinding() {
  err('missing function: emscripten_glUniformBlockBinding'); abort(-1);
  }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribI1i() {
  err('missing function: emscripten_glVertexAttribI1i'); abort(-1);
  }

  function _emscripten_glVertexAttribI1iv() {
  err('missing function: emscripten_glVertexAttribI1iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI1ui() {
  err('missing function: emscripten_glVertexAttribI1ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI1uiv() {
  err('missing function: emscripten_glVertexAttribI1uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI2i() {
  err('missing function: emscripten_glVertexAttribI2i'); abort(-1);
  }

  function _emscripten_glVertexAttribI2iv() {
  err('missing function: emscripten_glVertexAttribI2iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI2ui() {
  err('missing function: emscripten_glVertexAttribI2ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI2uiv() {
  err('missing function: emscripten_glVertexAttribI2uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI3i() {
  err('missing function: emscripten_glVertexAttribI3i'); abort(-1);
  }

  function _emscripten_glVertexAttribI3iv() {
  err('missing function: emscripten_glVertexAttribI3iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI3ui() {
  err('missing function: emscripten_glVertexAttribI3ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI3uiv() {
  err('missing function: emscripten_glVertexAttribI3uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4bv() {
  err('missing function: emscripten_glVertexAttribI4bv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4i() {
  err('missing function: emscripten_glVertexAttribI4i'); abort(-1);
  }

  function _emscripten_glVertexAttribI4iv() {
  err('missing function: emscripten_glVertexAttribI4iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4sv() {
  err('missing function: emscripten_glVertexAttribI4sv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4ubv() {
  err('missing function: emscripten_glVertexAttribI4ubv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4ui() {
  err('missing function: emscripten_glVertexAttribI4ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI4uiv() {
  err('missing function: emscripten_glVertexAttribI4uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4usv() {
  err('missing function: emscripten_glVertexAttribI4usv'); abort(-1);
  }

  function _emscripten_glVertexAttribIPointer() {
  err('missing function: emscripten_glVertexAttribIPointer'); abort(-1);
  }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  
  function __setLetterbox(element, topBottom, leftRight) {
      if (JSEvents.isInternetExplorer()) {
        // Cannot use padding on IE11, because IE11 computes padding in addition to the size, unlike
        // other browsers, which treat padding to be part of the size.
        // e.g.
        // FF, Chrome: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = (1920 - 2*460) x (1080-2*40) = 1000x1000px, and total element size = 1920x1080px.
        //       IE11: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = 1920x1080px and total element size = (1920+2*460) x (1080+2*40)px.
        // IE11  treats margin like Chrome and FF treat padding.
        element.style.marginLeft = element.style.marginRight = leftRight + 'px';
        element.style.marginTop = element.style.marginBottom = topBottom + 'px';
      } else {
        // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
        element.style.paddingLeft = element.style.paddingRight = leftRight + 'px';
        element.style.paddingTop = element.style.paddingBottom = topBottom + 'px';
      }
    }function _emscripten_do_request_fullscreen(target, strategy) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!JSEvents.fullscreenEnabled()) return -3;
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
  
      if (!target.requestFullscreen && !target.msRequestFullscreen && !target.mozRequestFullScreen && !target.mozRequestFullscreen && !target.webkitRequestFullscreen) {
        return -3;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (strategy.deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestFullscreen, 1 /* priority over pointer lock */, [target, strategy]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestFullscreen(target, strategy);
    }
  
  function __registerRestoreOldStyle(canvas) {
      var oldWidth = canvas.width;
      var oldHeight = canvas.height;
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor; // Chrome reads color from here.
      var oldDocumentBackgroundColor = document.body.style.backgroundColor; // IE11 reads color from here.
      // Firefox always has black background color.
      var oldPaddingLeft = canvas.style.paddingLeft; // Chrome, FF, Safari
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft; // IE11
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow; // Chrome, Firefox
      var oldDocumentScroll = document.body.scroll; // IE
      var oldImageRendering = canvas.style.imageRendering;
  
      function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        if (!fullscreenElement) {
          document.removeEventListener('fullscreenchange', restoreOldStyle);
          document.removeEventListener('mozfullscreenchange', restoreOldStyle);
          document.removeEventListener('webkitfullscreenchange', restoreOldStyle);
          document.removeEventListener('MSFullscreenChange', restoreOldStyle);
  
          canvas.width = oldWidth;
          canvas.height = oldHeight;
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor; // Chrome
          // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
          // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
          // had explicitly set so subsequent fullscreen transitions would not set background color properly.
          if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = 'white';
          document.body.style.backgroundColor = oldDocumentBackgroundColor; // IE11
          canvas.style.paddingLeft = oldPaddingLeft; // Chrome, FF, Safari
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft; // IE11
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow; // Chrome, Firefox
          document.body.scroll = oldDocumentScroll; // IE
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
  
          if (__currentFullscreenStrategy.canvasResizedCallback) {
            Module['dynCall_iiii'](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
          }
        }
      }
      document.addEventListener('fullscreenchange', restoreOldStyle);
      document.addEventListener('mozfullscreenchange', restoreOldStyle);
      document.addEventListener('webkitfullscreenchange', restoreOldStyle);
      document.addEventListener('MSFullscreenChange', restoreOldStyle);
      return restoreOldStyle;
    }function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
      var strategy = {};
      strategy.scaleMode = HEAP32[((fullscreenStrategy)>>2)];
      strategy.canvasResolutionScaleMode = HEAP32[(((fullscreenStrategy)+(4))>>2)];
      strategy.filteringMode = HEAP32[(((fullscreenStrategy)+(8))>>2)];
      strategy.deferUntilInEventHandler = deferUntilInEventHandler;
      strategy.canvasResizedCallback = HEAP32[(((fullscreenStrategy)+(12))>>2)];
      strategy.canvasResizedCallbackUserData = HEAP32[(((fullscreenStrategy)+(16))>>2)];
      __currentFullscreenStrategy = strategy;
  
      return _emscripten_do_request_fullscreen(target, strategy);
    }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestPointerLock(target);
    }

  function _emscripten_set_blur_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur");
      return 0;
    }

  function _emscripten_set_canvas_size(width, height) {
      Browser.setCanvasSize(width, height);
    }

  function _emscripten_set_element_css_size(target, width, height) {
      if (!target) {
        target = Module['canvas'];
      } else {
        target = JSEvents.findEventTarget(target);
      }
  
      if (!target) return -4;
  
      target.style.setProperty("width", width + "px");
      target.style.setProperty("height", height + "px");
  
      return 0;
    }

  function _emscripten_set_focus_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus");
      return 0;
    }

  function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
      return 0;
    }

  function _emscripten_set_gamepadconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected");
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected");
      return 0;
   }

  function _emscripten_set_keydown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown");
      return 0;
    }

  function _emscripten_set_keypress_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress");
      return 0;
    }

  function _emscripten_set_keyup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup");
      return 0;
    }


  function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
      return 0;
    }

  function _emscripten_set_mouseenter_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter");
      return 0;
    }

  function _emscripten_set_mouseleave_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave");
      return 0;
    }

  function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
      return 0;
    }

  function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
      return 0;
    }

  function _emscripten_set_pointerlockchange_callback(target, userData, useCapture, callbackfunc) {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange");
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange");
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange");
      JSEvents.registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange");
      return 0;
    }

  function _emscripten_set_resize_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize");
      return 0;
    }

  function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  function _emscripten_set_visibilitychange_callback(userData, useCapture, callbackfunc) {
      JSEvents.registerVisibilityChangeEventCallback(document, userData, useCapture, callbackfunc, 21, "visibilitychange");
      return 0;
    }

  function _emscripten_set_wheel_callback(target, userData, useCapture, callbackfunc) {
      target = JSEvents.findEventTarget(target);
      if (typeof target.onwheel !== 'undefined') {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel");
        return 0;
      } else if (typeof target.onmousewheel !== 'undefined') {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel");
        return 0;
      } else {
        return -1;
      }
    }

  
  var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,restartFunc:null,asyncFinalizers:[],ensureInit:function () {
        if (this.initted) return;
        this.initted = true;
      },setState:function (s) {
        this.ensureInit();
        this.state = s;
        Module['setAsyncState'](s);
      },handle:function (doAsyncOp, yieldDuring) {
        Module['noExitRuntime'] = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, Module['emtStackSave']()>>2));
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (ABORT) {
              return;
            }
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            // we are now starting to restore the stack
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            var asyncReturnValue;
            if (!EmterpreterAsync.restartFunc) {
              // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
              Module['emterpret'](stack[0]);
            } else {
              // the restartFunc knows how to emterpret the proper function, and also returns the return value
              asyncReturnValue = EmterpreterAsync.restartFunc();
            }
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              // All async operations have concluded.
              // In particular, if we were in an async ccall, we have
              // consumed the restartFunc and can reset it to null.
              EmterpreterAsync.restartFunc = null;
              // The async finalizers can run now, after all async operations.
              var asyncFinalizers = EmterpreterAsync.asyncFinalizers;
              EmterpreterAsync.asyncFinalizers = [];
              asyncFinalizers.forEach(function(func) {
                func(asyncReturnValue);
              });
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};function _emscripten_sleep_with_yield(ms) {
      EmterpreterAsync.handle(function(resume) {
        Browser.safeSetTimeout(resume, ms);
      }, true);
    }

  
  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }function _execlp() {
  return _execl.apply(null, arguments)
  }

  function _execvp() {
  return _execl.apply(null, arguments)
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }function _exit(status) {
      __exit(status);
    }

  function _ftime(p) {
      var millis = Date.now();
      HEAP32[((p)>>2)]=(millis/1000)|0;
      HEAP16[(((p)+(4))>>1)]=millis % 1000;
      HEAP16[(((p)+(6))>>1)]=0; // Obsolete field
      HEAP16[(((p)+(8))>>1)]=0; // Obsolete field
      return 0;
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  function _getpwnam() { throw 'getpwnam: TODO' }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _glClear(x0) { GLctx['clear'](x0) }



   

   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_ctlz_i32=true;

  
  function _llvm_exp2_f32(x) {
      return Math.pow(2, x);
    }function _llvm_exp2_f64() {
  return _llvm_exp2_f32.apply(null, arguments)
  }

  var _llvm_fabs_f32=Math_abs;

  var _llvm_fabs_f64=Math_abs;

  var _llvm_floor_f32=Math_floor;

  var _llvm_floor_f64=Math_floor;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(__get_environ());
      }
      return 0;
    }

   

  function _sigaction(signum, act, oldact) {
      //int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
      return 0;
    }

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
      }
      return 0;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)];
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
var GLctx; GL.init();
JSEvents.staticInit();;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



Module['wasmTableSize'] = 4650;

Module['wasmMaxTableSize'] = 4650;

function invoke_i(index) {
  var sp = stackSave();
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiidii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiidii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  var sp = stackSave();
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  var sp = stackSave();
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vf(index,a1) {
  var sp = stackSave();
  try {
    Module["dynCall_vf"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vff(index,a1,a2) {
  var sp = stackSave();
  try {
    Module["dynCall_vff"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vffff(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    Module["dynCall_vffff"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vfi(index,a1,a2) {
  var sp = stackSave();
  try {
    Module["dynCall_vfi"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vif(index,a1,a2) {
  var sp = stackSave();
  try {
    Module["dynCall_vif"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viff(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    Module["dynCall_viff"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vifff(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    Module["dynCall_vifff"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viffff(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    Module["dynCall_viffff"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viif(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    Module["dynCall_viif"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viifi(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    Module["dynCall_viifi"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = {};

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflowEmterpreter": abortStackOverflowEmterpreter, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiidii": invoke_iiiiidii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_v": invoke_v, "invoke_vd": invoke_vd, "invoke_vdd": invoke_vdd, "invoke_vdddddd": invoke_vdddddd, "invoke_vf": invoke_vf, "invoke_vff": invoke_vff, "invoke_vffff": invoke_vffff, "invoke_vfi": invoke_vfi, "invoke_vi": invoke_vi, "invoke_vif": invoke_vif, "invoke_viff": invoke_viff, "invoke_vifff": invoke_vifff, "invoke_viffff": invoke_viffff, "invoke_vii": invoke_vii, "invoke_viif": invoke_viif, "invoke_viifi": invoke_viifi, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiii": invoke_viiiiiiiiiii, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_throw": ___cxa_throw, "___cxa_uncaught_exception": ___cxa_uncaught_exception, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall10": ___syscall10, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall194": ___syscall194, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall33": ___syscall33, "___syscall38": ___syscall38, "___syscall39": ___syscall39, "___syscall4": ___syscall4, "___syscall40": ___syscall40, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__emscripten_sample_gamepad_data": __emscripten_sample_gamepad_data, "__exit": __exit, "__isLeapYear": __isLeapYear, "__registerRestoreOldStyle": __registerRestoreOldStyle, "__setLetterbox": __setLetterbox, "_abort": _abort, "_clock_gettime": _clock_gettime, "_dlclose": _dlclose, "_dlerror": _dlerror, "_dlsym": _dlsym, "_eglBindAPI": _eglBindAPI, "_eglChooseConfig": _eglChooseConfig, "_eglCreateContext": _eglCreateContext, "_eglCreateWindowSurface": _eglCreateWindowSurface, "_eglDestroyContext": _eglDestroyContext, "_eglDestroySurface": _eglDestroySurface, "_eglGetConfigAttrib": _eglGetConfigAttrib, "_eglGetDisplay": _eglGetDisplay, "_eglGetProcAddress": _eglGetProcAddress, "_eglInitialize": _eglInitialize, "_eglMakeCurrent": _eglMakeCurrent, "_eglSwapBuffers": _eglSwapBuffers, "_eglSwapInterval": _eglSwapInterval, "_eglTerminate": _eglTerminate, "_eglWaitClient": _eglWaitClient, "_eglWaitGL": _eglWaitGL, "_eglWaitNative": _eglWaitNative, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "_emscripten_do_request_fullscreen": _emscripten_do_request_fullscreen, "_emscripten_exit_fullscreen": _emscripten_exit_fullscreen, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_force_exit": _emscripten_force_exit, "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBeginConditionalRender": _emscripten_glBeginConditionalRender, "_emscripten_glBeginTransformFeedback": _emscripten_glBeginTransformFeedback, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindBufferBase": _emscripten_glBindBufferBase, "_emscripten_glBindBufferRange": _emscripten_glBindBufferRange, "_emscripten_glBindFragDataLocation": _emscripten_glBindFragDataLocation, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBlitFramebuffer": _emscripten_glBlitFramebuffer, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClampColor": _emscripten_glClampColor, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearBufferfi": _emscripten_glClearBufferfi, "_emscripten_glClearBufferfv": _emscripten_glClearBufferfv, "_emscripten_glClearBufferiv": _emscripten_glClearBufferiv, "_emscripten_glClearBufferuiv": _emscripten_glClearBufferuiv, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glColorMaski": _emscripten_glColorMaski, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDisablei": _emscripten_glDisablei, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glEnablei": _emscripten_glEnablei, "_emscripten_glEndConditionalRender": _emscripten_glEndConditionalRender, "_emscripten_glEndTransformFeedback": _emscripten_glEndTransformFeedback, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetActiveUniformBlockName": _emscripten_glGetActiveUniformBlockName, "_emscripten_glGetActiveUniformBlockiv": _emscripten_glGetActiveUniformBlockiv, "_emscripten_glGetActiveUniformName": _emscripten_glGetActiveUniformName, "_emscripten_glGetActiveUniformsiv": _emscripten_glGetActiveUniformsiv, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleani_v": _emscripten_glGetBooleani_v, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFragDataLocation": _emscripten_glGetFragDataLocation, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glGetIntegeri_v": _emscripten_glGetIntegeri_v, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetStringi": _emscripten_glGetStringi, "_emscripten_glGetTexParameterIiv": _emscripten_glGetTexParameterIiv, "_emscripten_glGetTexParameterIuiv": _emscripten_glGetTexParameterIuiv, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetTransformFeedbackVarying": _emscripten_glGetTransformFeedbackVarying, "_emscripten_glGetUniformBlockIndex": _emscripten_glGetUniformBlockIndex, "_emscripten_glGetUniformIndices": _emscripten_glGetUniformIndices, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetUniformuiv": _emscripten_glGetUniformuiv, "_emscripten_glGetVertexAttribIiv": _emscripten_glGetVertexAttribIiv, "_emscripten_glGetVertexAttribIuiv": _emscripten_glGetVertexAttribIuiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsEnabledi": _emscripten_glIsEnabledi, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArray": _emscripten_glIsVertexArray, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glRenderbufferStorageMultisample": _emscripten_glRenderbufferStorageMultisample, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexImage3D": _emscripten_glTexImage3D, "_emscripten_glTexParameterIiv": _emscripten_glTexParameterIiv, "_emscripten_glTexParameterIuiv": _emscripten_glTexParameterIuiv, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexStorage2D": _emscripten_glTexStorage2D, "_emscripten_glTexStorage3D": _emscripten_glTexStorage3D, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glTexSubImage3D": _emscripten_glTexSubImage3D, "_emscripten_glTransformFeedbackVaryings": _emscripten_glTransformFeedbackVaryings, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform1ui": _emscripten_glUniform1ui, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform2ui": _emscripten_glUniform2ui, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform3ui": _emscripten_glUniform3ui, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniform4ui": _emscripten_glUniform4ui, "_emscripten_glUniformBlockBinding": _emscripten_glUniformBlockBinding, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_glVertexAttribI1i": _emscripten_glVertexAttribI1i, "_emscripten_glVertexAttribI1iv": _emscripten_glVertexAttribI1iv, "_emscripten_glVertexAttribI1ui": _emscripten_glVertexAttribI1ui, "_emscripten_glVertexAttribI1uiv": _emscripten_glVertexAttribI1uiv, "_emscripten_glVertexAttribI2i": _emscripten_glVertexAttribI2i, "_emscripten_glVertexAttribI2iv": _emscripten_glVertexAttribI2iv, "_emscripten_glVertexAttribI2ui": _emscripten_glVertexAttribI2ui, "_emscripten_glVertexAttribI2uiv": _emscripten_glVertexAttribI2uiv, "_emscripten_glVertexAttribI3i": _emscripten_glVertexAttribI3i, "_emscripten_glVertexAttribI3iv": _emscripten_glVertexAttribI3iv, "_emscripten_glVertexAttribI3ui": _emscripten_glVertexAttribI3ui, "_emscripten_glVertexAttribI3uiv": _emscripten_glVertexAttribI3uiv, "_emscripten_glVertexAttribI4bv": _emscripten_glVertexAttribI4bv, "_emscripten_glVertexAttribI4i": _emscripten_glVertexAttribI4i, "_emscripten_glVertexAttribI4iv": _emscripten_glVertexAttribI4iv, "_emscripten_glVertexAttribI4sv": _emscripten_glVertexAttribI4sv, "_emscripten_glVertexAttribI4ubv": _emscripten_glVertexAttribI4ubv, "_emscripten_glVertexAttribI4ui": _emscripten_glVertexAttribI4ui, "_emscripten_glVertexAttribI4uiv": _emscripten_glVertexAttribI4uiv, "_emscripten_glVertexAttribI4usv": _emscripten_glVertexAttribI4usv, "_emscripten_glVertexAttribIPointer": _emscripten_glVertexAttribIPointer, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_fullscreen_strategy": _emscripten_request_fullscreen_strategy, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_set_blur_callback": _emscripten_set_blur_callback, "_emscripten_set_canvas_size": _emscripten_set_canvas_size, "_emscripten_set_element_css_size": _emscripten_set_element_css_size, "_emscripten_set_focus_callback": _emscripten_set_focus_callback, "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback, "_emscripten_set_gamepadconnected_callback": _emscripten_set_gamepadconnected_callback, "_emscripten_set_gamepaddisconnected_callback": _emscripten_set_gamepaddisconnected_callback, "_emscripten_set_keydown_callback": _emscripten_set_keydown_callback, "_emscripten_set_keypress_callback": _emscripten_set_keypress_callback, "_emscripten_set_keyup_callback": _emscripten_set_keyup_callback, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback, "_emscripten_set_mouseenter_callback": _emscripten_set_mouseenter_callback, "_emscripten_set_mouseleave_callback": _emscripten_set_mouseleave_callback, "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback, "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback, "_emscripten_set_pointerlockchange_callback": _emscripten_set_pointerlockchange_callback, "_emscripten_set_resize_callback": _emscripten_set_resize_callback, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "_emscripten_set_visibilitychange_callback": _emscripten_set_visibilitychange_callback, "_emscripten_set_wheel_callback": _emscripten_set_wheel_callback, "_emscripten_sleep_with_yield": _emscripten_sleep_with_yield, "_execl": _execl, "_execlp": _execlp, "_execvp": _execvp, "_exit": _exit, "_ftime": _ftime, "_getenv": _getenv, "_getpwnam": _getpwnam, "_gettimeofday": _gettimeofday, "_glClear": _glClear, "_glutCreateWindow": _glutCreateWindow, "_glutDestroyWindow": _glutDestroyWindow, "_glutInitDisplayMode": _glutInitDisplayMode, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_exp2_f32": _llvm_exp2_f32, "_llvm_exp2_f64": _llvm_exp2_f64, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_floor_f32": _llvm_floor_f32, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_localtime": _localtime, "_localtime_r": _localtime_r, "_mktime": _mktime, "_nanosleep": _nanosleep, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_putenv": _putenv, "_sigaction": _sigaction, "_signal": _signal, "_strftime": _strftime, "_strftime_l": _strftime_l, "_time": _time, "_tzset": _tzset, "_usleep": _usleep, "_utime": _utime, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
Module.asmLibraryArg['EMTSTACKTOP'] = EMTSTACKTOP; Module.asmLibraryArg['EMT_STACK_MAX'] = EMT_STACK_MAX; Module.asmLibraryArg['eb'] = eb;
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

Module["asm"] = asm;
var __GLOBAL__sub_I_cpu_cpp = Module["__GLOBAL__sub_I_cpu_cpp"] = function() {  return Module["asm"]["__GLOBAL__sub_I_cpu_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_dos_devices_cpp = Module["__GLOBAL__sub_I_dos_devices_cpp"] = function() {  return Module["asm"]["__GLOBAL__sub_I_dos_devices_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_drives_cpp = Module["__GLOBAL__sub_I_drives_cpp"] = function() {  return Module["asm"]["__GLOBAL__sub_I_drives_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_gus_cpp = Module["__GLOBAL__sub_I_gus_cpp"] = function() {  return Module["asm"]["__GLOBAL__sub_I_gus_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_menu_cpp = Module["__GLOBAL__sub_I_menu_cpp"] = function() {  return Module["asm"]["__GLOBAL__sub_I_menu_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_programs_cpp = Module["__GLOBAL__sub_I_programs_cpp"] = function() {  return Module["asm"]["__GLOBAL__sub_I_programs_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_sdl_mapper_cpp = Module["__GLOBAL__sub_I_sdl_mapper_cpp"] = function() {  return Module["asm"]["__GLOBAL__sub_I_sdl_mapper_cpp"].apply(null, arguments) };
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {  return Module["asm"]["__ZSt18uncaught_exceptionv"].apply(null, arguments) };
var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {  return Module["asm"]["___cxa_can_catch"].apply(null, arguments) };
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments) };
var ___divdi3 = Module["___divdi3"] = function() {  return Module["asm"]["___divdi3"].apply(null, arguments) };
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = function() {  return Module["asm"]["___emscripten_environ_constructor"].apply(null, arguments) };
var ___errno_location = Module["___errno_location"] = function() {  return Module["asm"]["___errno_location"].apply(null, arguments) };
var ___muldi3 = Module["___muldi3"] = function() {  return Module["asm"]["___muldi3"].apply(null, arguments) };
var ___udivdi3 = Module["___udivdi3"] = function() {  return Module["asm"]["___udivdi3"].apply(null, arguments) };
var ___uremdi3 = Module["___uremdi3"] = function() {  return Module["asm"]["___uremdi3"].apply(null, arguments) };
var __get_daylight = Module["__get_daylight"] = function() {  return Module["asm"]["__get_daylight"].apply(null, arguments) };
var __get_environ = Module["__get_environ"] = function() {  return Module["asm"]["__get_environ"].apply(null, arguments) };
var __get_timezone = Module["__get_timezone"] = function() {  return Module["asm"]["__get_timezone"].apply(null, arguments) };
var __get_tzname = Module["__get_tzname"] = function() {  return Module["asm"]["__get_tzname"].apply(null, arguments) };
var _bitshift64Ashr = Module["_bitshift64Ashr"] = function() {  return Module["asm"]["_bitshift64Ashr"].apply(null, arguments) };
var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments) };
var _bitshift64Shl = Module["_bitshift64Shl"] = function() {  return Module["asm"]["_bitshift64Shl"].apply(null, arguments) };
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {  return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments) };
var _free = Module["_free"] = function() {  return Module["asm"]["_free"].apply(null, arguments) };
var _i64Add = Module["_i64Add"] = function() {  return Module["asm"]["_i64Add"].apply(null, arguments) };
var _i64Subtract = Module["_i64Subtract"] = function() {  return Module["asm"]["_i64Subtract"].apply(null, arguments) };
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = function() {  return Module["asm"]["_llvm_bswap_i16"].apply(null, arguments) };
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments) };
var _main = Module["_main"] = function() {  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {  return Module["asm"]["_malloc"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memmove = Module["_memmove"] = function() {  return Module["asm"]["_memmove"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {  return Module["asm"]["_memset"].apply(null, arguments) };
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {  return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments) };
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = function() {  return Module["asm"]["_pthread_mutex_lock"].apply(null, arguments) };
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = function() {  return Module["asm"]["_pthread_mutex_unlock"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {  return Module["asm"]["_sbrk"].apply(null, arguments) };
var _strstr = Module["_strstr"] = function() {  return Module["asm"]["_strstr"].apply(null, arguments) };
var emtStackRestore = Module["emtStackRestore"] = function() {  return Module["asm"]["emtStackRestore"].apply(null, arguments) };
var emtStackSave = Module["emtStackSave"] = function() {  return Module["asm"]["emtStackSave"].apply(null, arguments) };
var emterpret = Module["emterpret"] = function() {  return Module["asm"]["emterpret"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var getEmtStackMax = Module["getEmtStackMax"] = function() {  return Module["asm"]["getEmtStackMax"].apply(null, arguments) };
var getTempRet0 = Module["getTempRet0"] = function() {  return Module["asm"]["getTempRet0"].apply(null, arguments) };
var runPostSets = Module["runPostSets"] = function() {  return Module["asm"]["runPostSets"].apply(null, arguments) };
var setAsyncState = Module["setAsyncState"] = function() {  return Module["asm"]["setAsyncState"].apply(null, arguments) };
var setEmtStackMax = Module["setEmtStackMax"] = function() {  return Module["asm"]["setEmtStackMax"].apply(null, arguments) };
var setTempRet0 = Module["setTempRet0"] = function() {  return Module["asm"]["setTempRet0"].apply(null, arguments) };
var setThrew = Module["setThrew"] = function() {  return Module["asm"]["setThrew"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_i = Module["dynCall_i"] = function() {  return Module["asm"]["dynCall_i"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {  return Module["asm"]["dynCall_iiiii"].apply(null, arguments) };
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments) };
var dynCall_iiiiidii = Module["dynCall_iiiiidii"] = function() {  return Module["asm"]["dynCall_iiiiidii"].apply(null, arguments) };
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments) };
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function() {  return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments) };
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiiiiii"].apply(null, arguments) };
var dynCall_v = Module["dynCall_v"] = function() {  return Module["asm"]["dynCall_v"].apply(null, arguments) };
var dynCall_vd = Module["dynCall_vd"] = function() {  return Module["asm"]["dynCall_vd"].apply(null, arguments) };
var dynCall_vdd = Module["dynCall_vdd"] = function() {  return Module["asm"]["dynCall_vdd"].apply(null, arguments) };
var dynCall_vdddddd = Module["dynCall_vdddddd"] = function() {  return Module["asm"]["dynCall_vdddddd"].apply(null, arguments) };
var dynCall_vf = Module["dynCall_vf"] = function() {  return Module["asm"]["dynCall_vf"].apply(null, arguments) };
var dynCall_vff = Module["dynCall_vff"] = function() {  return Module["asm"]["dynCall_vff"].apply(null, arguments) };
var dynCall_vffff = Module["dynCall_vffff"] = function() {  return Module["asm"]["dynCall_vffff"].apply(null, arguments) };
var dynCall_vfi = Module["dynCall_vfi"] = function() {  return Module["asm"]["dynCall_vfi"].apply(null, arguments) };
var dynCall_vi = Module["dynCall_vi"] = function() {  return Module["asm"]["dynCall_vi"].apply(null, arguments) };
var dynCall_vif = Module["dynCall_vif"] = function() {  return Module["asm"]["dynCall_vif"].apply(null, arguments) };
var dynCall_viff = Module["dynCall_viff"] = function() {  return Module["asm"]["dynCall_viff"].apply(null, arguments) };
var dynCall_vifff = Module["dynCall_vifff"] = function() {  return Module["asm"]["dynCall_vifff"].apply(null, arguments) };
var dynCall_viffff = Module["dynCall_viffff"] = function() {  return Module["asm"]["dynCall_viffff"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
var dynCall_viif = Module["dynCall_viif"] = function() {  return Module["asm"]["dynCall_viif"].apply(null, arguments) };
var dynCall_viifi = Module["dynCall_viifi"] = function() {  return Module["asm"]["dynCall_viifi"].apply(null, arguments) };
var dynCall_viii = Module["dynCall_viii"] = function() {  return Module["asm"]["dynCall_viii"].apply(null, arguments) };
var dynCall_viiii = Module["dynCall_viiii"] = function() {  return Module["asm"]["dynCall_viiii"].apply(null, arguments) };
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {  return Module["asm"]["dynCall_viiiii"].apply(null, arguments) };
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments) };
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {  return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = function() {  return Module["asm"]["dynCall_viiiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = function() {  return Module["asm"]["dynCall_viiiiiiiiiii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;








Module["getMemory"] = getMemory;
Module["Pointer_stringify"] = Pointer_stringify;























Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;


Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;































/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state !== 1) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}








